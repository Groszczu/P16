
game_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007960  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  200001d4  08007d9c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08007d9c  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ba0  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc2  00000000  00000000  00032da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00035a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00036628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023628  00000000  00000000  00037090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbda  00000000  00000000  0005a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3f16  00000000  00000000  00068292  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c1a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  0012c224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ad0 	.word	0x08007ad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	08007ad0 	.word	0x08007ad0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <KeypadScan>:
void Line4ScanStart(KeypadSide side);
uint32_t Line4ScanDetection(KeypadSide side);
void Line4ScanOver(KeypadSide side);

uint32_t KeypadScan(KeypadSide side)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d101      	bne.n	80004dc <KeypadScan+0x14>
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <KeypadScan+0x138>)
 80004da:	e000      	b.n	80004de <KeypadScan+0x16>
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <KeypadScan+0x13c>)
 80004de:	60bb      	str	r3, [r7, #8]

	switch(*CurrentKeyState)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b0e      	cmp	r3, #14
 80004e6:	f200 8085 	bhi.w	80005f4 <KeypadScan+0x12c>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <KeypadScan+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	0800052d 	.word	0x0800052d
 80004f4:	0800053b 	.word	0x0800053b
 80004f8:	08000547 	.word	0x08000547
 80004fc:	08000555 	.word	0x08000555
 8000500:	08000563 	.word	0x08000563
 8000504:	0800056f 	.word	0x0800056f
 8000508:	0800057d 	.word	0x0800057d
 800050c:	0800058b 	.word	0x0800058b
 8000510:	08000597 	.word	0x08000597
 8000514:	080005a5 	.word	0x080005a5
 8000518:	080005b3 	.word	0x080005b3
 800051c:	080005bf 	.word	0x080005bf
 8000520:	080005cd 	.word	0x080005cd
 8000524:	080005db 	.word	0x080005db
 8000528:	080005e7 	.word	0x080005e7
	{
		case GND_START: ReValue = KEY_VALUE_NULL; GndScanStart(side); break;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb3a 	bl	8000bac <GndScanStart>
 8000538:	e05c      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_DETECTION: ReValue = GndScanDetection(side); break;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fbbd 	bl	8000cbc <GndScanDetection>
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	e056      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_OVER: ReValue = KEY_VALUE_NULL; GndScanOver(side); break;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fcc3 	bl	8000ed8 <GndScanOver>
 8000552:	e04f      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE1_START: ReValue = KEY_VALUE_NULL; Line1ScanStart(side); break;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd40 	bl	8000fe0 <Line1ScanStart>
 8000560:	e048      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_DETECTION: ReValue = Line1ScanDetection(side); break;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fdff 	bl	8001168 <Line1ScanDetection>
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	e042      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_OVER: ReValue = KEY_VALUE_NULL; Line1ScanOver(side); break;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fec5 	bl	8001304 <Line1ScanOver>
 800057a:	e03b      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE2_START: ReValue = KEY_VALUE_NULL; Line2ScanStart(side); break;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ff2e 	bl	80013e4 <Line2ScanStart>
 8000588:	e034      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_DETECTION: ReValue = Line2ScanDetection(side); break;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff89 	bl	80014a4 <Line2ScanDetection>
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	e02e      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_OVER: ReValue = KEY_VALUE_NULL; Line2ScanOver(side); break;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f823 	bl	80015e8 <Line2ScanOver>
 80005a2:	e027      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE3_START: ReValue = KEY_VALUE_NULL; Line3ScanStart(side); break;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f878 	bl	80016a0 <Line3ScanStart>
 80005b0:	e020      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_DETECTION: ReValue = Line3ScanDetection(side); break;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f8bf 	bl	8001738 <Line3ScanDetection>
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	e01a      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_OVER: ReValue = KEY_VALUE_NULL; Line3ScanOver(side); break;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f92f 	bl	8001828 <Line3ScanOver>
 80005ca:	e013      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE4_START: ReValue = KEY_VALUE_NULL; Line4ScanStart(side); break;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f970 	bl	80018b8 <Line4ScanStart>
 80005d8:	e00c      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_DETECTION: ReValue = Line4ScanDetection(side); break;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f9a3 	bl	8001928 <Line4ScanDetection>
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	e006      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_OVER: ReValue = KEY_VALUE_NULL; Line4ScanOver(side); break;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f9d3 	bl	8001998 <Line4ScanOver>
 80005f2:	bf00      	nop
	}

	return ReValue;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0
 8000604:	200001f1 	.word	0x200001f1

08000608 <ConfigurationGnd>:
	}
}


void ConfigurationGnd(KeypadSide side)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <ConfigurationGnd+0xc0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <ConfigurationGnd+0x4e>
 8000650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000654:	e000      	b.n	8000658 <ConfigurationGnd+0x50>
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <ConfigurationGnd+0x5c>
 800065e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000662:	e000      	b.n	8000666 <ConfigurationGnd+0x5e>
 8000664:	2308      	movs	r3, #8
 8000666:	4313      	orrs	r3, r2
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	2a00      	cmp	r2, #0
 800066c:	d102      	bne.n	8000674 <ConfigurationGnd+0x6c>
 800066e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000672:	e000      	b.n	8000676 <ConfigurationGnd+0x6e>
 8000674:	2204      	movs	r2, #4
 8000676:	4313      	orrs	r3, r2
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	2a00      	cmp	r2, #0
 800067c:	d102      	bne.n	8000684 <ConfigurationGnd+0x7c>
 800067e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000682:	e000      	b.n	8000686 <ConfigurationGnd+0x7e>
 8000684:	2202      	movs	r2, #2
 8000686:	4313      	orrs	r3, r2
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	2a00      	cmp	r2, #0
 800068c:	d102      	bne.n	8000694 <ConfigurationGnd+0x8c>
 800068e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000692:	e000      	b.n	8000696 <ConfigurationGnd+0x8e>
 8000694:	2201      	movs	r2, #1
 8000696:	4313      	orrs	r3, r2
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <ConfigurationGnd+0xa8>
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <ConfigurationGnd+0xc4>)
 80006ae:	e000      	b.n	80006b2 <ConfigurationGnd+0xaa>
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <ConfigurationGnd+0xc8>)
 80006b2:	f107 0214 	add.w	r2, r7, #20
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fec7 	bl	800244c <HAL_GPIO_Init>
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <ConfigurationLine1>:

void ConfigurationLine1(KeypadSide side)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a3b      	ldr	r2, [pc, #236]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <ConfigurationLine1+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <ConfigurationLine1+0x100>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a34      	ldr	r2, [pc, #208]	; (80007d4 <ConfigurationLine1+0x100>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <ConfigurationLine1+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <ConfigurationLine1+0x4e>
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	e000      	b.n	8000724 <ConfigurationLine1+0x50>
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <ConfigurationLine1+0x64>
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <ConfigurationLine1+0x104>)
 8000736:	e000      	b.n	800073a <ConfigurationLine1+0x66>
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <ConfigurationLine1+0x108>)
 800073a:	f107 0214 	add.w	r2, r7, #20
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fe83 	bl	800244c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <ConfigurationLine1+0x7e>
 800074c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000750:	e000      	b.n	8000754 <ConfigurationLine1+0x80>
 8000752:	2208      	movs	r2, #8
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <ConfigurationLine1+0x8c>
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	e000      	b.n	8000762 <ConfigurationLine1+0x8e>
 8000760:	2304      	movs	r3, #4
 8000762:	4313      	orrs	r3, r2
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	2a00      	cmp	r2, #0
 8000768:	d102      	bne.n	8000770 <ConfigurationLine1+0x9c>
 800076a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800076e:	e000      	b.n	8000772 <ConfigurationLine1+0x9e>
 8000770:	2202      	movs	r2, #2
 8000772:	4313      	orrs	r3, r2
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	2a00      	cmp	r2, #0
 8000778:	d102      	bne.n	8000780 <ConfigurationLine1+0xac>
 800077a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800077e:	e000      	b.n	8000782 <ConfigurationLine1+0xae>
 8000780:	2201      	movs	r2, #1
 8000782:	4313      	orrs	r3, r2
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <ConfigurationLine1+0xc8>
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ConfigurationLine1+0x104>)
 800079a:	e000      	b.n	800079e <ConfigurationLine1+0xca>
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ConfigurationLine1+0x108>)
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe51 	bl	800244c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_SET);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <ConfigurationLine1+0xe0>
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <ConfigurationLine1+0x104>)
 80007b2:	e000      	b.n	80007b6 <ConfigurationLine1+0xe2>
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <ConfigurationLine1+0x108>)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <ConfigurationLine1+0xee>
 80007bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c0:	e000      	b.n	80007c4 <ConfigurationLine1+0xf0>
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f001 fff2 	bl	80027b0 <HAL_GPIO_WritePin>
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <ConfigurationLine2>:

void ConfigurationLine2(KeypadSide side)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <ConfigurationLine2+0x124>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a44      	ldr	r2, [pc, #272]	; (8000904 <ConfigurationLine2+0x124>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <ConfigurationLine2+0x124>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <ConfigurationLine2+0x124>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <ConfigurationLine2+0x124>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <ConfigurationLine2+0x124>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <ConfigurationLine2+0x4e>
 8000828:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800082c:	e000      	b.n	8000830 <ConfigurationLine2+0x50>
 800082e:	2240      	movs	r2, #64	; 0x40
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <ConfigurationLine2+0x5c>
 8000836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800083a:	e000      	b.n	800083e <ConfigurationLine2+0x5e>
 800083c:	2308      	movs	r3, #8
 800083e:	4313      	orrs	r3, r2
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <ConfigurationLine2+0x74>
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <ConfigurationLine2+0x128>)
 8000852:	e000      	b.n	8000856 <ConfigurationLine2+0x76>
 8000854:	4b2d      	ldr	r3, [pc, #180]	; (800090c <ConfigurationLine2+0x12c>)
 8000856:	f107 0214 	add.w	r2, r7, #20
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fdf5 	bl	800244c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <ConfigurationLine2+0x8e>
 8000868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086c:	e000      	b.n	8000870 <ConfigurationLine2+0x90>
 800086e:	2204      	movs	r2, #4
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <ConfigurationLine2+0x9c>
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	e000      	b.n	800087e <ConfigurationLine2+0x9e>
 800087c:	2302      	movs	r3, #2
 800087e:	4313      	orrs	r3, r2
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	2a00      	cmp	r2, #0
 8000884:	d102      	bne.n	800088c <ConfigurationLine2+0xac>
 8000886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088a:	e000      	b.n	800088e <ConfigurationLine2+0xae>
 800088c:	2201      	movs	r2, #1
 800088e:	4313      	orrs	r3, r2
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <ConfigurationLine2+0xc8>
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <ConfigurationLine2+0x128>)
 80008a6:	e000      	b.n	80008aa <ConfigurationLine2+0xca>
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <ConfigurationLine2+0x12c>)
 80008aa:	f107 0214 	add.w	r2, r7, #20
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdcb 	bl	800244c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_2(side), GPIO_PIN_SET);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <ConfigurationLine2+0xe0>
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <ConfigurationLine2+0x128>)
 80008be:	e000      	b.n	80008c2 <ConfigurationLine2+0xe2>
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <ConfigurationLine2+0x12c>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <ConfigurationLine2+0xee>
 80008c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008cc:	e000      	b.n	80008d0 <ConfigurationLine2+0xf0>
 80008ce:	2308      	movs	r3, #8
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f001 ff6c 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_RESET);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <ConfigurationLine2+0x102>
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <ConfigurationLine2+0x128>)
 80008e0:	e000      	b.n	80008e4 <ConfigurationLine2+0x104>
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <ConfigurationLine2+0x12c>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <ConfigurationLine2+0x110>
 80008ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ee:	e000      	b.n	80008f2 <ConfigurationLine2+0x112>
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 ff5b 	bl	80027b0 <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40020c00 	.word	0x40020c00

08000910 <ConfigurationLine3>:

void ConfigurationLine3(KeypadSide side)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <ConfigurationLine3+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <ConfigurationLine3+0x134>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <ConfigurationLine3+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <ConfigurationLine3+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <ConfigurationLine3+0x134>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <ConfigurationLine3+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <ConfigurationLine3+0x4e>
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	e000      	b.n	8000960 <ConfigurationLine3+0x50>
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <ConfigurationLine3+0x5c>
 8000966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800096a:	e000      	b.n	800096e <ConfigurationLine3+0x5e>
 800096c:	2308      	movs	r3, #8
 800096e:	4313      	orrs	r3, r2
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	2a00      	cmp	r2, #0
 8000974:	d102      	bne.n	800097c <ConfigurationLine3+0x6c>
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	e000      	b.n	800097e <ConfigurationLine3+0x6e>
 800097c:	2204      	movs	r2, #4
 800097e:	4313      	orrs	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <ConfigurationLine3+0x84>
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <ConfigurationLine3+0x138>)
 8000992:	e000      	b.n	8000996 <ConfigurationLine3+0x86>
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000996:	f107 0214 	add.w	r2, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fd55 	bl	800244c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_4(side) | IO_KEY_5(side);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <ConfigurationLine3+0x9e>
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	e000      	b.n	80009b0 <ConfigurationLine3+0xa0>
 80009ae:	2202      	movs	r2, #2
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <ConfigurationLine3+0xac>
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	e000      	b.n	80009be <ConfigurationLine3+0xae>
 80009bc:	2301      	movs	r3, #1
 80009be:	4313      	orrs	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d101      	bne.n	80009d8 <ConfigurationLine3+0xc8>
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <ConfigurationLine3+0x138>)
 80009d6:	e000      	b.n	80009da <ConfigurationLine3+0xca>
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009da:	f107 0214 	add.w	r2, r7, #20
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fd33 	bl	800244c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side), GPIO_PIN_RESET);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <ConfigurationLine3+0xe0>
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <ConfigurationLine3+0x138>)
 80009ee:	e000      	b.n	80009f2 <ConfigurationLine3+0xe2>
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <ConfigurationLine3+0xec>
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <ConfigurationLine3+0x140>)
 80009fa:	e000      	b.n	80009fe <ConfigurationLine3+0xee>
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <ConfigurationLine3+0xfa>
 8000a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a08:	e000      	b.n	8000a0c <ConfigurationLine3+0xfc>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f001 fecb 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_3(side), GPIO_PIN_SET);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <ConfigurationLine3+0x114>
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ConfigurationLine3+0x138>)
 8000a22:	e000      	b.n	8000a26 <ConfigurationLine3+0x116>
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <ConfigurationLine3+0x122>
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	e000      	b.n	8000a34 <ConfigurationLine3+0x124>
 8000a32:	2304      	movs	r3, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 feba 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	ffff8000 	.word	0xffff8000

08000a54 <ConfigurationLine4>:

void ConfigurationLine4(KeypadSide side)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <ConfigurationLine4+0x4e>
 8000a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa0:	e000      	b.n	8000aa4 <ConfigurationLine4+0x50>
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <ConfigurationLine4+0x5c>
 8000aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aae:	e000      	b.n	8000ab2 <ConfigurationLine4+0x5e>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d102      	bne.n	8000ac0 <ConfigurationLine4+0x6c>
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	e000      	b.n	8000ac2 <ConfigurationLine4+0x6e>
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d102      	bne.n	8000ad0 <ConfigurationLine4+0x7c>
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	e000      	b.n	8000ad2 <ConfigurationLine4+0x7e>
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <ConfigurationLine4+0x94>
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000ae6:	e000      	b.n	8000aea <ConfigurationLine4+0x96>
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000aea:	f107 0214 	add.w	r2, r7, #20
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fcab 	bl	800244c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_5(side);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <ConfigurationLine4+0xae>
 8000afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b00:	e000      	b.n	8000b04 <ConfigurationLine4+0xb0>
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <ConfigurationLine4+0xc8>
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b1a:	e000      	b.n	8000b1e <ConfigurationLine4+0xca>
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b1e:	f107 0214 	add.w	r2, r7, #20
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fc91 	bl	800244c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side), GPIO_PIN_RESET);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <ConfigurationLine4+0xe0>
 8000b30:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b32:	e000      	b.n	8000b36 <ConfigurationLine4+0xe2>
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <ConfigurationLine4+0xec>
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <ConfigurationLine4+0x154>)
 8000b3e:	e000      	b.n	8000b42 <ConfigurationLine4+0xee>
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <ConfigurationLine4+0xfa>
 8000b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4c:	e000      	b.n	8000b50 <ConfigurationLine4+0xfc>
 8000b4e:	2308      	movs	r3, #8
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d102      	bne.n	8000b60 <ConfigurationLine4+0x10c>
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	e000      	b.n	8000b62 <ConfigurationLine4+0x10e>
 8000b60:	2204      	movs	r2, #4
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f001 fe20 	bl	80027b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_4(side), GPIO_PIN_SET);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <ConfigurationLine4+0x126>
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b78:	e000      	b.n	8000b7c <ConfigurationLine4+0x128>
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <ConfigurationLine4+0x134>
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	e000      	b.n	8000b8a <ConfigurationLine4+0x136>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f001 fe0f 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	ffff8000 	.word	0xffff8000

08000bac <GndScanStart>:

void GndScanStart(KeypadSide side)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	ConfigurationGnd(side);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd25 	bl	8000608 <ConfigurationGnd>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <GndScanStart+0x1c>
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <GndScanStart+0x100>)
 8000bc6:	e000      	b.n	8000bca <GndScanStart+0x1e>
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <GndScanStart+0x104>)
 8000bca:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <GndScanStart+0x2a>
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <GndScanStart+0x108>)
 8000bd4:	e000      	b.n	8000bd8 <GndScanStart+0x2c>
 8000bd6:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <GndScanStart+0x10c>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <GndScanStart+0x38>
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	e000      	b.n	8000be6 <GndScanStart+0x3a>
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f001 fdc9 	bl	8002780 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d04f      	beq.n	8000c94 <GndScanStart+0xe8>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <GndScanStart+0x52>
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <GndScanStart+0x108>)
 8000bfc:	e000      	b.n	8000c00 <GndScanStart+0x54>
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <GndScanStart+0x10c>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <GndScanStart+0x60>
 8000c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c0a:	e000      	b.n	8000c0e <GndScanStart+0x62>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4610      	mov	r0, r2
 8000c12:	f001 fdb5 	bl	8002780 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d03b      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <GndScanStart+0x7a>
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <GndScanStart+0x108>)
 8000c24:	e000      	b.n	8000c28 <GndScanStart+0x7c>
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <GndScanStart+0x10c>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <GndScanStart+0x88>
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	e000      	b.n	8000c36 <GndScanStart+0x8a>
 8000c34:	2304      	movs	r3, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f001 fda1 	bl	8002780 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d027      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <GndScanStart+0xa2>
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <GndScanStart+0x108>)
 8000c4c:	e000      	b.n	8000c50 <GndScanStart+0xa4>
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <GndScanStart+0x10c>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <GndScanStart+0xb0>
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	e000      	b.n	8000c5e <GndScanStart+0xb2>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4610      	mov	r0, r2
 8000c62:	f001 fd8d 	bl	8002780 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <GndScanStart+0xca>
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <GndScanStart+0x108>)
 8000c74:	e000      	b.n	8000c78 <GndScanStart+0xcc>
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <GndScanStart+0x10c>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <GndScanStart+0xd8>
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	e000      	b.n	8000c86 <GndScanStart+0xda>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f001 fd79 	bl	8002780 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <GndScanStart+0xf0>
	{
		*CurrentKeyState = GND_DETECTION;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e002      	b.n	8000ca2 <GndScanStart+0xf6>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001f0 	.word	0x200001f0
 8000cb0:	200001f1 	.word	0x200001f1
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <GndScanDetection>:

uint32_t GndScanDetection(KeypadSide side)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <GndScanDetection+0x14>
 8000ccc:	4b7e      	ldr	r3, [pc, #504]	; (8000ec8 <GndScanDetection+0x20c>)
 8000cce:	e000      	b.n	8000cd2 <GndScanDetection+0x16>
 8000cd0:	4b7e      	ldr	r3, [pc, #504]	; (8000ecc <GndScanDetection+0x210>)
 8000cd2:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <GndScanDetection+0x22>
 8000cda:	4a7d      	ldr	r2, [pc, #500]	; (8000ed0 <GndScanDetection+0x214>)
 8000cdc:	e000      	b.n	8000ce0 <GndScanDetection+0x24>
 8000cde:	4a7d      	ldr	r2, [pc, #500]	; (8000ed4 <GndScanDetection+0x218>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <GndScanDetection+0x30>
 8000ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cea:	e000      	b.n	8000cee <GndScanDetection+0x32>
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f001 fd45 	bl	8002780 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d050      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <GndScanDetection+0x4a>
 8000d02:	4a73      	ldr	r2, [pc, #460]	; (8000ed0 <GndScanDetection+0x214>)
 8000d04:	e000      	b.n	8000d08 <GndScanDetection+0x4c>
 8000d06:	4a73      	ldr	r2, [pc, #460]	; (8000ed4 <GndScanDetection+0x218>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <GndScanDetection+0x58>
 8000d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d12:	e000      	b.n	8000d16 <GndScanDetection+0x5a>
 8000d14:	2308      	movs	r3, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f001 fd31 	bl	8002780 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d03c      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <GndScanDetection+0x72>
 8000d2a:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <GndScanDetection+0x214>)
 8000d2c:	e000      	b.n	8000d30 <GndScanDetection+0x74>
 8000d2e:	4a69      	ldr	r2, [pc, #420]	; (8000ed4 <GndScanDetection+0x218>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <GndScanDetection+0x80>
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	e000      	b.n	8000d3e <GndScanDetection+0x82>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4610      	mov	r0, r2
 8000d42:	f001 fd1d 	bl	8002780 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d028      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <GndScanDetection+0x9a>
 8000d52:	4a5f      	ldr	r2, [pc, #380]	; (8000ed0 <GndScanDetection+0x214>)
 8000d54:	e000      	b.n	8000d58 <GndScanDetection+0x9c>
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <GndScanDetection+0x218>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <GndScanDetection+0xa8>
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	e000      	b.n	8000d66 <GndScanDetection+0xaa>
 8000d64:	2302      	movs	r3, #2
 8000d66:	4619      	mov	r1, r3
 8000d68:	4610      	mov	r0, r2
 8000d6a:	f001 fd09 	bl	8002780 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d014      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <GndScanDetection+0xc2>
 8000d7a:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <GndScanDetection+0x214>)
 8000d7c:	e000      	b.n	8000d80 <GndScanDetection+0xc4>
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <GndScanDetection+0x218>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <GndScanDetection+0xd0>
 8000d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8a:	e000      	b.n	8000d8e <GndScanDetection+0xd2>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f001 fcf5 	bl	8002780 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 808a 	bne.w	8000eb2 <GndScanDetection+0x1f6>
	{
		if(GET_IO_KEY_1(side) == 0)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <GndScanDetection+0xec>
 8000da4:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <GndScanDetection+0x214>)
 8000da6:	e000      	b.n	8000daa <GndScanDetection+0xee>
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <GndScanDetection+0x218>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <GndScanDetection+0xfa>
 8000db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db4:	e000      	b.n	8000db8 <GndScanDetection+0xfc>
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f001 fce0 	bl	8002780 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <GndScanDetection+0x11a>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_LEFT : KEY_VALUE_LEFT);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <GndScanDetection+0x114>
 8000dcc:	2305      	movs	r3, #5
 8000dce:	e000      	b.n	8000dd2 <GndScanDetection+0x116>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e069      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_2(side) == 0))
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <GndScanDetection+0x124>
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <GndScanDetection+0x214>)
 8000dde:	e000      	b.n	8000de2 <GndScanDetection+0x126>
 8000de0:	4a3c      	ldr	r2, [pc, #240]	; (8000ed4 <GndScanDetection+0x218>)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <GndScanDetection+0x132>
 8000de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dec:	e000      	b.n	8000df0 <GndScanDetection+0x134>
 8000dee:	2308      	movs	r3, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f001 fcc4 	bl	8002780 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <GndScanDetection+0x152>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_UP : KEY_VALUE_UP);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <GndScanDetection+0x14c>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e000      	b.n	8000e0a <GndScanDetection+0x14e>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e04d      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_3(side) == 0))
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <GndScanDetection+0x15c>
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <GndScanDetection+0x214>)
 8000e16:	e000      	b.n	8000e1a <GndScanDetection+0x15e>
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <GndScanDetection+0x218>)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <GndScanDetection+0x16a>
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	e000      	b.n	8000e28 <GndScanDetection+0x16c>
 8000e26:	2304      	movs	r3, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f001 fca8 	bl	8002780 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <GndScanDetection+0x180>
		{
			ReValue = KEY_VALUE_PRESS;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e036      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_4(side) == 0))
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <GndScanDetection+0x18a>
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <GndScanDetection+0x214>)
 8000e44:	e000      	b.n	8000e48 <GndScanDetection+0x18c>
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <GndScanDetection+0x218>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <GndScanDetection+0x198>
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	e000      	b.n	8000e56 <GndScanDetection+0x19a>
 8000e54:	2302      	movs	r3, #2
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f001 fc91 	bl	8002780 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <GndScanDetection+0x1b8>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_DOWN : KEY_VALUE_DOWN);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <GndScanDetection+0x1b2>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e000      	b.n	8000e70 <GndScanDetection+0x1b4>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e01a      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_5(side) == 0))
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <GndScanDetection+0x1c2>
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <GndScanDetection+0x214>)
 8000e7c:	e000      	b.n	8000e80 <GndScanDetection+0x1c4>
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <GndScanDetection+0x218>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <GndScanDetection+0x1d0>
 8000e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8a:	e000      	b.n	8000e8e <GndScanDetection+0x1d2>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f001 fc75 	bl	8002780 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <GndScanDetection+0x1ee>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_RIGHT : KEY_VALUE_RIGHT);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <GndScanDetection+0x1ea>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <GndScanDetection+0x1ec>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	60fb      	str	r3, [r7, #12]
		}	

		*CurrentKeyState = GND_DETECTION;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e004      	b.n	8000ebc <GndScanDetection+0x200>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
	}

	return ReValue;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}	
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001f0 	.word	0x200001f0
 8000ecc:	200001f1 	.word	0x200001f1
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <GndScanOver>:
	
void GndScanOver(KeypadSide side)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <GndScanOver+0x14>
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <GndScanOver+0xf8>)
 8000eea:	e000      	b.n	8000eee <GndScanOver+0x16>
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <GndScanOver+0xfc>)
 8000eee:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0)))
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <GndScanOver+0x22>
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <GndScanOver+0x100>)
 8000ef8:	e000      	b.n	8000efc <GndScanOver+0x24>
 8000efa:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <GndScanOver+0x104>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <GndScanOver+0x30>
 8000f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f06:	e000      	b.n	8000f0a <GndScanOver+0x32>
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f001 fc37 	bl	8002780 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d04f      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <GndScanOver+0x4a>
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <GndScanOver+0x100>)
 8000f20:	e000      	b.n	8000f24 <GndScanOver+0x4c>
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <GndScanOver+0x104>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <GndScanOver+0x58>
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	e000      	b.n	8000f32 <GndScanOver+0x5a>
 8000f30:	2308      	movs	r3, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4610      	mov	r0, r2
 8000f36:	f001 fc23 	bl	8002780 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03b      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <GndScanOver+0x72>
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <GndScanOver+0x100>)
 8000f48:	e000      	b.n	8000f4c <GndScanOver+0x74>
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <GndScanOver+0x104>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <GndScanOver+0x80>
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	e000      	b.n	8000f5a <GndScanOver+0x82>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f001 fc0f 	bl	8002780 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d027      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <GndScanOver+0x9a>
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <GndScanOver+0x100>)
 8000f70:	e000      	b.n	8000f74 <GndScanOver+0x9c>
 8000f72:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <GndScanOver+0x104>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <GndScanOver+0xa8>
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	e000      	b.n	8000f82 <GndScanOver+0xaa>
 8000f80:	2302      	movs	r3, #2
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 fbfb 	bl	8002780 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <GndScanOver+0xc2>
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <GndScanOver+0x100>)
 8000f98:	e000      	b.n	8000f9c <GndScanOver+0xc4>
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <GndScanOver+0x104>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <GndScanOver+0xd0>
 8000fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa6:	e000      	b.n	8000faa <GndScanOver+0xd2>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f001 fbe7 	bl	8002780 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <GndScanOver+0xe8>
	{
		*CurrentKeyState = GND_OVER;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <GndScanOver+0xee>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	200001f1 	.word	0x200001f1
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <Line1ScanStart>:
/* Scan line 1 */
void Line1ScanStart(KeypadSide side)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine1(side);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb71 	bl	80006d4 <ConfigurationLine1>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <Line1ScanStart+0x1c>
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <Line1ScanStart+0x178>)
 8000ffa:	e000      	b.n	8000ffe <Line1ScanStart+0x1e>
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <Line1ScanStart+0x17c>)
 8000ffe:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <Line1ScanStart+0x2a>
 8001006:	4a56      	ldr	r2, [pc, #344]	; (8001160 <Line1ScanStart+0x180>)
 8001008:	e000      	b.n	800100c <Line1ScanStart+0x2c>
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <Line1ScanStart+0x184>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <Line1ScanStart+0x38>
 8001012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001016:	e000      	b.n	800101a <Line1ScanStart+0x3a>
 8001018:	2308      	movs	r3, #8
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fbaf 	bl	8002780 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d03b      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <Line1ScanStart+0x52>
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <Line1ScanStart+0x180>)
 8001030:	e000      	b.n	8001034 <Line1ScanStart+0x54>
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <Line1ScanStart+0x184>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <Line1ScanStart+0x60>
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	e000      	b.n	8001042 <Line1ScanStart+0x62>
 8001040:	2304      	movs	r3, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f001 fb9b 	bl	8002780 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d027      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <Line1ScanStart+0x7a>
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <Line1ScanStart+0x180>)
 8001058:	e000      	b.n	800105c <Line1ScanStart+0x7c>
 800105a:	4a42      	ldr	r2, [pc, #264]	; (8001164 <Line1ScanStart+0x184>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <Line1ScanStart+0x88>
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	e000      	b.n	800106a <Line1ScanStart+0x8a>
 8001068:	2302      	movs	r3, #2
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f001 fb87 	bl	8002780 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d013      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <Line1ScanStart+0xa2>
 800107e:	4a38      	ldr	r2, [pc, #224]	; (8001160 <Line1ScanStart+0x180>)
 8001080:	e000      	b.n	8001084 <Line1ScanStart+0xa4>
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <Line1ScanStart+0x184>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <Line1ScanStart+0xb0>
 800108a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800108e:	e000      	b.n	8001092 <Line1ScanStart+0xb2>
 8001090:	2301      	movs	r3, #1
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 fb73 	bl	8002780 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d103      	bne.n	80010a8 <Line1ScanStart+0xc8>
	{
		*CurrentKeyState = LINE1_DETECTION;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2204      	movs	r2, #4
 80010a4:	701a      	strb	r2, [r3, #0]
	}
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
	{
		*CurrentKeyState = LINE2_START;
	}		
}
 80010a6:	e052      	b.n	800114e <Line1ScanStart+0x16e>
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <Line1ScanStart+0xd2>
 80010ae:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <Line1ScanStart+0x180>)
 80010b0:	e000      	b.n	80010b4 <Line1ScanStart+0xd4>
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <Line1ScanStart+0x184>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <Line1ScanStart+0xe0>
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	e000      	b.n	80010c2 <Line1ScanStart+0xe2>
 80010c0:	2308      	movs	r3, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 fb5b 	bl	8002780 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d03e      	beq.n	800114e <Line1ScanStart+0x16e>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <Line1ScanStart+0xfa>
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <Line1ScanStart+0x180>)
 80010d8:	e000      	b.n	80010dc <Line1ScanStart+0xfc>
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <Line1ScanStart+0x184>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <Line1ScanStart+0x108>
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	e000      	b.n	80010ea <Line1ScanStart+0x10a>
 80010e8:	2304      	movs	r3, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f001 fb47 	bl	8002780 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d02a      	beq.n	800114e <Line1ScanStart+0x16e>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <Line1ScanStart+0x122>
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <Line1ScanStart+0x180>)
 8001100:	e000      	b.n	8001104 <Line1ScanStart+0x124>
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <Line1ScanStart+0x184>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <Line1ScanStart+0x130>
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	e000      	b.n	8001112 <Line1ScanStart+0x132>
 8001110:	2302      	movs	r3, #2
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f001 fb33 	bl	8002780 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d016      	beq.n	800114e <Line1ScanStart+0x16e>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <Line1ScanStart+0x14a>
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <Line1ScanStart+0x180>)
 8001128:	e000      	b.n	800112c <Line1ScanStart+0x14c>
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <Line1ScanStart+0x184>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <Line1ScanStart+0x158>
 8001132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001136:	e000      	b.n	800113a <Line1ScanStart+0x15a>
 8001138:	2301      	movs	r3, #1
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f001 fb1f 	bl	8002780 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <Line1ScanStart+0x16e>
		*CurrentKeyState = LINE2_START;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2206      	movs	r2, #6
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	200001f1 	.word	0x200001f1
 8001160:	40020400 	.word	0x40020400
 8001164:	40020c00 	.word	0x40020c00

08001168 <Line1ScanDetection>:

uint32_t Line1ScanDetection(KeypadSide side)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <Line1ScanDetection+0x14>
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <Line1ScanDetection+0x18c>)
 800117a:	e000      	b.n	800117e <Line1ScanDetection+0x16>
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <Line1ScanDetection+0x190>)
 800117e:	60bb      	str	r3, [r7, #8]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <Line1ScanDetection+0x22>
 8001186:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <Line1ScanDetection+0x194>)
 8001188:	e000      	b.n	800118c <Line1ScanDetection+0x24>
 800118a:	4a5d      	ldr	r2, [pc, #372]	; (8001300 <Line1ScanDetection+0x198>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <Line1ScanDetection+0x30>
 8001192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001196:	e000      	b.n	800119a <Line1ScanDetection+0x32>
 8001198:	2308      	movs	r3, #8
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f001 faef 	bl	8002780 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d03b      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <Line1ScanDetection+0x4a>
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <Line1ScanDetection+0x194>)
 80011b0:	e000      	b.n	80011b4 <Line1ScanDetection+0x4c>
 80011b2:	4a53      	ldr	r2, [pc, #332]	; (8001300 <Line1ScanDetection+0x198>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <Line1ScanDetection+0x58>
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	e000      	b.n	80011c2 <Line1ScanDetection+0x5a>
 80011c0:	2304      	movs	r3, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f001 fadb 	bl	8002780 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d027      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <Line1ScanDetection+0x72>
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <Line1ScanDetection+0x194>)
 80011d8:	e000      	b.n	80011dc <Line1ScanDetection+0x74>
 80011da:	4a49      	ldr	r2, [pc, #292]	; (8001300 <Line1ScanDetection+0x198>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <Line1ScanDetection+0x80>
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	e000      	b.n	80011ea <Line1ScanDetection+0x82>
 80011e8:	2302      	movs	r3, #2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f001 fac7 	bl	8002780 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d013      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <Line1ScanDetection+0x9a>
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <Line1ScanDetection+0x194>)
 8001200:	e000      	b.n	8001204 <Line1ScanDetection+0x9c>
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <Line1ScanDetection+0x198>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <Line1ScanDetection+0xa8>
 800120a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800120e:	e000      	b.n	8001212 <Line1ScanDetection+0xaa>
 8001210:	2301      	movs	r3, #1
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 fab3 	bl	8002780 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d15e      	bne.n	80012de <Line1ScanDetection+0x176>
	{
		if(GET_IO_KEY_2(side) == 1)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <Line1ScanDetection+0xc2>
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <Line1ScanDetection+0x194>)
 8001228:	e000      	b.n	800122c <Line1ScanDetection+0xc4>
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <Line1ScanDetection+0x198>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <Line1ScanDetection+0xd0>
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	e000      	b.n	800123a <Line1ScanDetection+0xd2>
 8001238:	2308      	movs	r3, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f001 fa9f 	bl	8002780 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <Line1ScanDetection+0xe6>
		{
			ReValue = KEY_VALUE_ONE;	
 8001248:	2306      	movs	r3, #6
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e043      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_3(side) == 1)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <Line1ScanDetection+0xf0>
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <Line1ScanDetection+0x194>)
 8001256:	e000      	b.n	800125a <Line1ScanDetection+0xf2>
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <Line1ScanDetection+0x198>)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <Line1ScanDetection+0xfe>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e000      	b.n	8001268 <Line1ScanDetection+0x100>
 8001266:	2304      	movs	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f001 fa88 	bl	8002780 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <Line1ScanDetection+0x114>
		{
			ReValue = KEY_VALUE_TWO;
 8001276:	2307      	movs	r3, #7
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e02c      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_4(side) == 1)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <Line1ScanDetection+0x11e>
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <Line1ScanDetection+0x194>)
 8001284:	e000      	b.n	8001288 <Line1ScanDetection+0x120>
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <Line1ScanDetection+0x198>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <Line1ScanDetection+0x12c>
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	e000      	b.n	8001296 <Line1ScanDetection+0x12e>
 8001294:	2302      	movs	r3, #2
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f001 fa71 	bl	8002780 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <Line1ScanDetection+0x142>
		{
			ReValue = KEY_VALUE_THREE;
 80012a4:	2308      	movs	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e015      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <Line1ScanDetection+0x14c>
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <Line1ScanDetection+0x194>)
 80012b2:	e000      	b.n	80012b6 <Line1ScanDetection+0x14e>
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <Line1ScanDetection+0x198>)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <Line1ScanDetection+0x15a>
 80012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c0:	e000      	b.n	80012c4 <Line1ScanDetection+0x15c>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f001 fa5a 	bl	8002780 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <Line1ScanDetection+0x16e>
		{
			ReValue = KEY_VALUE_FOUR;
 80012d2:	2309      	movs	r3, #9
 80012d4:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE1_DETECTION;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2204      	movs	r2, #4
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e004      	b.n	80012e8 <Line1ScanDetection+0x180>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2206      	movs	r2, #6
 80012e2:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	200001f1 	.word	0x200001f1
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020c00 	.word	0x40020c00

08001304 <Line1ScanOver>:

void Line1ScanOver(KeypadSide side)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <Line1ScanOver+0x14>
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <Line1ScanOver+0xd0>)
 8001316:	e000      	b.n	800131a <Line1ScanOver+0x16>
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <Line1ScanOver+0xd4>)
 800131a:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <Line1ScanOver+0x22>
 8001322:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <Line1ScanOver+0xd8>)
 8001324:	e000      	b.n	8001328 <Line1ScanOver+0x24>
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <Line1ScanOver+0xdc>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <Line1ScanOver+0x30>
 800132e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001332:	e000      	b.n	8001336 <Line1ScanOver+0x32>
 8001334:	2308      	movs	r3, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f001 fa21 	bl	8002780 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d03b      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <Line1ScanOver+0x4a>
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <Line1ScanOver+0xd8>)
 800134c:	e000      	b.n	8001350 <Line1ScanOver+0x4c>
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <Line1ScanOver+0xdc>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <Line1ScanOver+0x58>
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	e000      	b.n	800135e <Line1ScanOver+0x5a>
 800135c:	2304      	movs	r3, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f001 fa0d 	bl	8002780 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d027      	beq.n	80013bc <Line1ScanOver+0xb8>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <Line1ScanOver+0x72>
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <Line1ScanOver+0xd8>)
 8001374:	e000      	b.n	8001378 <Line1ScanOver+0x74>
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <Line1ScanOver+0xdc>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <Line1ScanOver+0x80>
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	e000      	b.n	8001386 <Line1ScanOver+0x82>
 8001384:	2302      	movs	r3, #2
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f001 f9f9 	bl	8002780 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d013      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <Line1ScanOver+0x9a>
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <Line1ScanOver+0xd8>)
 800139c:	e000      	b.n	80013a0 <Line1ScanOver+0x9c>
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <Line1ScanOver+0xdc>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <Line1ScanOver+0xa8>
 80013a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013aa:	e000      	b.n	80013ae <Line1ScanOver+0xaa>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f001 f9e5 	bl	8002780 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d103      	bne.n	80013c4 <Line1ScanOver+0xc0>
	{
		*CurrentKeyState = LINE1_OVER;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2205      	movs	r2, #5
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e002      	b.n	80013ca <Line1ScanOver+0xc6>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2206      	movs	r2, #6
 80013c8:	701a      	strb	r2, [r3, #0]
	}
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001f0 	.word	0x200001f0
 80013d8:	200001f1 	.word	0x200001f1
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <Line2ScanStart>:
/* Scan line 2 */
void Line2ScanStart(KeypadSide side)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine2(side);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f9f5 	bl	80007e0 <ConfigurationLine2>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <Line2ScanStart+0x1c>
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <Line2ScanStart+0xb0>)
 80013fe:	e000      	b.n	8001402 <Line2ScanStart+0x1e>
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <Line2ScanStart+0xb4>)
 8001402:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <Line2ScanStart+0x2a>
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <Line2ScanStart+0xb8>)
 800140c:	e000      	b.n	8001410 <Line2ScanStart+0x2c>
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <Line2ScanStart+0xbc>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <Line2ScanStart+0x38>
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	e000      	b.n	800141e <Line2ScanStart+0x3a>
 800141c:	2304      	movs	r3, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f001 f9ad 	bl	8002780 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d027      	beq.n	800147c <Line2ScanStart+0x98>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <Line2ScanStart+0x52>
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <Line2ScanStart+0xb8>)
 8001434:	e000      	b.n	8001438 <Line2ScanStart+0x54>
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <Line2ScanStart+0xbc>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <Line2ScanStart+0x60>
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	e000      	b.n	8001446 <Line2ScanStart+0x62>
 8001444:	2302      	movs	r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f001 f999 	bl	8002780 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d013      	beq.n	800147c <Line2ScanStart+0x98>
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <Line2ScanStart+0x7a>
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <Line2ScanStart+0xb8>)
 800145c:	e000      	b.n	8001460 <Line2ScanStart+0x7c>
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <Line2ScanStart+0xbc>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <Line2ScanStart+0x88>
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	e000      	b.n	800146e <Line2ScanStart+0x8a>
 800146c:	2301      	movs	r3, #1
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f001 f985 	bl	8002780 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <Line2ScanStart+0xa0>
	{
		*CurrentKeyState = LINE2_DETECTION;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2207      	movs	r2, #7
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e002      	b.n	800148a <Line2ScanStart+0xa6>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2209      	movs	r2, #9
 8001488:	701a      	strb	r2, [r3, #0]
	}		
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0
 8001498:	200001f1 	.word	0x200001f1
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <Line2ScanDetection>:

uint32_t Line2ScanDetection(KeypadSide side)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <Line2ScanDetection+0x14>
 80014b4:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <Line2ScanDetection+0x134>)
 80014b6:	e000      	b.n	80014ba <Line2ScanDetection+0x16>
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <Line2ScanDetection+0x138>)
 80014ba:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <Line2ScanDetection+0x22>
 80014c2:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014c4:	e000      	b.n	80014c8 <Line2ScanDetection+0x24>
 80014c6:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <Line2ScanDetection+0x140>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <Line2ScanDetection+0x30>
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	e000      	b.n	80014d6 <Line2ScanDetection+0x32>
 80014d4:	2304      	movs	r3, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f001 f951 	bl	8002780 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d027      	beq.n	8001534 <Line2ScanDetection+0x90>
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <Line2ScanDetection+0x4a>
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014ec:	e000      	b.n	80014f0 <Line2ScanDetection+0x4c>
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <Line2ScanDetection+0x140>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <Line2ScanDetection+0x58>
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	e000      	b.n	80014fe <Line2ScanDetection+0x5a>
 80014fc:	2302      	movs	r3, #2
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f001 f93d 	bl	8002780 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d013      	beq.n	8001534 <Line2ScanDetection+0x90>
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <Line2ScanDetection+0x72>
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001514:	e000      	b.n	8001518 <Line2ScanDetection+0x74>
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <Line2ScanDetection+0x140>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <Line2ScanDetection+0x80>
 800151e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001522:	e000      	b.n	8001526 <Line2ScanDetection+0x82>
 8001524:	2301      	movs	r3, #1
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f001 f929 	bl	8002780 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d147      	bne.n	80015c4 <Line2ScanDetection+0x120>
	{
		if(GET_IO_KEY_3(side) == 1)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <Line2ScanDetection+0x9a>
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <Line2ScanDetection+0x13c>)
 800153c:	e000      	b.n	8001540 <Line2ScanDetection+0x9c>
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <Line2ScanDetection+0x140>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <Line2ScanDetection+0xa8>
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	e000      	b.n	800154e <Line2ScanDetection+0xaa>
 800154c:	2304      	movs	r3, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f001 f915 	bl	8002780 <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <Line2ScanDetection+0xbe>
		{
			ReValue = KEY_VALUE_FIVE;	
 800155c:	230a      	movs	r3, #10
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e02c      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_4(side) == 1)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <Line2ScanDetection+0xc8>
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <Line2ScanDetection+0x13c>)
 800156a:	e000      	b.n	800156e <Line2ScanDetection+0xca>
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <Line2ScanDetection+0x140>)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <Line2ScanDetection+0xd6>
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	e000      	b.n	800157c <Line2ScanDetection+0xd8>
 800157a:	2302      	movs	r3, #2
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f001 f8fe 	bl	8002780 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <Line2ScanDetection+0xec>
		{
			ReValue = KEY_VALUE_SIX;
 800158a:	230b      	movs	r3, #11
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e015      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_5(side) == 1)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <Line2ScanDetection+0xf6>
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001598:	e000      	b.n	800159c <Line2ScanDetection+0xf8>
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <Line2ScanDetection+0x140>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <Line2ScanDetection+0x104>
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a6:	e000      	b.n	80015aa <Line2ScanDetection+0x106>
 80015a8:	2301      	movs	r3, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f001 f8e7 	bl	8002780 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <Line2ScanDetection+0x118>
		{
			ReValue = KEY_VALUE_SEVEN;
 80015b8:	230c      	movs	r3, #12
 80015ba:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE2_DETECTION;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2207      	movs	r2, #7
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e004      	b.n	80015ce <Line2ScanDetection+0x12a>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200001f0 	.word	0x200001f0
 80015dc:	200001f1 	.word	0x200001f1
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <Line2ScanOver>:

void Line2ScanOver(KeypadSide side)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <Line2ScanOver+0x14>
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <Line2ScanOver+0xa8>)
 80015fa:	e000      	b.n	80015fe <Line2ScanOver+0x16>
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <Line2ScanOver+0xac>)
 80015fe:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <Line2ScanOver+0x22>
 8001606:	4a24      	ldr	r2, [pc, #144]	; (8001698 <Line2ScanOver+0xb0>)
 8001608:	e000      	b.n	800160c <Line2ScanOver+0x24>
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <Line2ScanOver+0xb4>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <Line2ScanOver+0x30>
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	e000      	b.n	800161a <Line2ScanOver+0x32>
 8001618:	2304      	movs	r3, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f001 f8af 	bl	8002780 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d027      	beq.n	8001678 <Line2ScanOver+0x90>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <Line2ScanOver+0x4a>
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <Line2ScanOver+0xb0>)
 8001630:	e000      	b.n	8001634 <Line2ScanOver+0x4c>
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <Line2ScanOver+0xb4>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <Line2ScanOver+0x58>
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	e000      	b.n	8001642 <Line2ScanOver+0x5a>
 8001640:	2302      	movs	r3, #2
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f001 f89b 	bl	8002780 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d013      	beq.n	8001678 <Line2ScanOver+0x90>
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <Line2ScanOver+0x72>
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <Line2ScanOver+0xb0>)
 8001658:	e000      	b.n	800165c <Line2ScanOver+0x74>
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <Line2ScanOver+0xb4>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <Line2ScanOver+0x80>
 8001662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001666:	e000      	b.n	800166a <Line2ScanOver+0x82>
 8001668:	2301      	movs	r3, #1
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f001 f887 	bl	8002780 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d103      	bne.n	8001680 <Line2ScanOver+0x98>
	{
		*CurrentKeyState = LINE2_OVER;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2208      	movs	r2, #8
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e002      	b.n	8001686 <Line2ScanOver+0x9e>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2209      	movs	r2, #9
 8001684:	701a      	strb	r2, [r3, #0]
	}
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001f0 	.word	0x200001f0
 8001694:	200001f1 	.word	0x200001f1
 8001698:	40020400 	.word	0x40020400
 800169c:	40020c00 	.word	0x40020c00

080016a0 <Line3ScanStart>:
/* Scan line 3 */
void Line3ScanStart(KeypadSide side)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine3(side);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f92f 	bl	8000910 <ConfigurationLine3>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <Line3ScanStart+0x1c>
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <Line3ScanStart+0x88>)
 80016ba:	e000      	b.n	80016be <Line3ScanStart+0x1e>
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <Line3ScanStart+0x8c>)
 80016be:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <Line3ScanStart+0x2a>
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <Line3ScanStart+0x90>)
 80016c8:	e000      	b.n	80016cc <Line3ScanStart+0x2c>
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <Line3ScanStart+0x94>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <Line3ScanStart+0x38>
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	e000      	b.n	80016da <Line3ScanStart+0x3a>
 80016d8:	2302      	movs	r3, #2
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f001 f84f 	bl	8002780 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d013      	beq.n	8001710 <Line3ScanStart+0x70>
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <Line3ScanStart+0x52>
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <Line3ScanStart+0x90>)
 80016f0:	e000      	b.n	80016f4 <Line3ScanStart+0x54>
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <Line3ScanStart+0x94>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <Line3ScanStart+0x60>
 80016fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016fe:	e000      	b.n	8001702 <Line3ScanStart+0x62>
 8001700:	2301      	movs	r3, #1
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f001 f83b 	bl	8002780 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d103      	bne.n	8001718 <Line3ScanStart+0x78>
	{
		*CurrentKeyState = LINE3_DETECTION;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	220a      	movs	r2, #10
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e002      	b.n	800171e <Line3ScanStart+0x7e>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	701a      	strb	r2, [r3, #0]
	}		
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001f0 	.word	0x200001f0
 800172c:	200001f1 	.word	0x200001f1
 8001730:	40020400 	.word	0x40020400
 8001734:	40020c00 	.word	0x40020c00

08001738 <Line3ScanDetection>:

uint32_t Line3ScanDetection(KeypadSide side)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <Line3ScanDetection+0x14>
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <Line3ScanDetection+0xe0>)
 800174a:	e000      	b.n	800174e <Line3ScanDetection+0x16>
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <Line3ScanDetection+0xe4>)
 800174e:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <Line3ScanDetection+0x22>
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <Line3ScanDetection+0xe8>)
 8001758:	e000      	b.n	800175c <Line3ScanDetection+0x24>
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <Line3ScanDetection+0xec>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <Line3ScanDetection+0x30>
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	e000      	b.n	800176a <Line3ScanDetection+0x32>
 8001768:	2302      	movs	r3, #2
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f001 f807 	bl	8002780 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d013      	beq.n	80017a0 <Line3ScanDetection+0x68>
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <Line3ScanDetection+0x4a>
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <Line3ScanDetection+0xe8>)
 8001780:	e000      	b.n	8001784 <Line3ScanDetection+0x4c>
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <Line3ScanDetection+0xec>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <Line3ScanDetection+0x58>
 800178a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178e:	e000      	b.n	8001792 <Line3ScanDetection+0x5a>
 8001790:	2301      	movs	r3, #1
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f000 fff3 	bl	8002780 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d130      	bne.n	8001802 <Line3ScanDetection+0xca>
	{
		if(GET_IO_KEY_4(side) == 1)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <Line3ScanDetection+0x72>
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <Line3ScanDetection+0xe8>)
 80017a8:	e000      	b.n	80017ac <Line3ScanDetection+0x74>
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <Line3ScanDetection+0xec>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <Line3ScanDetection+0x80>
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	e000      	b.n	80017ba <Line3ScanDetection+0x82>
 80017b8:	2302      	movs	r3, #2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f000 ffdf 	bl	8002780 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <Line3ScanDetection+0x96>
		{
			ReValue = KEY_VALUE_EIGHT;	
 80017c8:	230d      	movs	r3, #13
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e015      	b.n	80017fa <Line3ScanDetection+0xc2>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <Line3ScanDetection+0xa0>
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <Line3ScanDetection+0xe8>)
 80017d6:	e000      	b.n	80017da <Line3ScanDetection+0xa2>
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <Line3ScanDetection+0xec>)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <Line3ScanDetection+0xae>
 80017e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e4:	e000      	b.n	80017e8 <Line3ScanDetection+0xb0>
 80017e6:	2301      	movs	r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f000 ffc8 	bl	8002780 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <Line3ScanDetection+0xc2>
		{
			ReValue = KEY_VALUE_NINE;
 80017f6:	230e      	movs	r3, #14
 80017f8:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE3_DETECTION;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	220a      	movs	r2, #10
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e004      	b.n	800180c <Line3ScanDetection+0xd4>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	220c      	movs	r2, #12
 8001806:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001f0 	.word	0x200001f0
 800181c:	200001f1 	.word	0x200001f1
 8001820:	40020400 	.word	0x40020400
 8001824:	40020c00 	.word	0x40020c00

08001828 <Line3ScanOver>:

void Line3ScanOver(KeypadSide side)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <Line3ScanOver+0x14>
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <Line3ScanOver+0x80>)
 800183a:	e000      	b.n	800183e <Line3ScanOver+0x16>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <Line3ScanOver+0x84>)
 800183e:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <Line3ScanOver+0x22>
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <Line3ScanOver+0x88>)
 8001848:	e000      	b.n	800184c <Line3ScanOver+0x24>
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <Line3ScanOver+0x8c>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <Line3ScanOver+0x30>
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	e000      	b.n	800185a <Line3ScanOver+0x32>
 8001858:	2302      	movs	r3, #2
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f000 ff8f 	bl	8002780 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d013      	beq.n	8001890 <Line3ScanOver+0x68>
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <Line3ScanOver+0x4a>
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <Line3ScanOver+0x88>)
 8001870:	e000      	b.n	8001874 <Line3ScanOver+0x4c>
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <Line3ScanOver+0x8c>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <Line3ScanOver+0x58>
 800187a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187e:	e000      	b.n	8001882 <Line3ScanOver+0x5a>
 8001880:	2301      	movs	r3, #1
 8001882:	4619      	mov	r1, r3
 8001884:	4610      	mov	r0, r2
 8001886:	f000 ff7b 	bl	8002780 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <Line3ScanOver+0x70>
	{
		*CurrentKeyState = LINE3_OVER;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	220b      	movs	r2, #11
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <Line3ScanOver+0x76>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	220c      	movs	r2, #12
 800189c:	701a      	strb	r2, [r3, #0]
	}
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001f0 	.word	0x200001f0
 80018ac:	200001f1 	.word	0x200001f1
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <Line4ScanStart>:
/* Scan line 4 */
void Line4ScanStart(KeypadSide side)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine4(side);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8c5 	bl	8000a54 <ConfigurationLine4>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <Line4ScanStart+0x1c>
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <Line4ScanStart+0x60>)
 80018d2:	e000      	b.n	80018d6 <Line4ScanStart+0x1e>
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <Line4ScanStart+0x64>)
 80018d6:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <Line4ScanStart+0x2a>
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <Line4ScanStart+0x68>)
 80018e0:	e000      	b.n	80018e4 <Line4ScanStart+0x2c>
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <Line4ScanStart+0x6c>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <Line4ScanStart+0x38>
 80018ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ee:	e000      	b.n	80018f2 <Line4ScanStart+0x3a>
 80018f0:	2301      	movs	r3, #1
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 ff43 	bl	8002780 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d103      	bne.n	8001908 <Line4ScanStart+0x50>
	{
		*CurrentKeyState = LINE4_DETECTION;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	220d      	movs	r2, #13
 8001904:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}		
}
 8001906:	e002      	b.n	800190e <Line4ScanStart+0x56>
		*CurrentKeyState = GND_START;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001f0 	.word	0x200001f0
 800191c:	200001f1 	.word	0x200001f1
 8001920:	40020400 	.word	0x40020400
 8001924:	40020c00 	.word	0x40020c00

08001928 <Line4ScanDetection>:

uint32_t Line4ScanDetection(KeypadSide side)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <Line4ScanDetection+0x14>
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <Line4ScanDetection+0x60>)
 800193a:	e000      	b.n	800193e <Line4ScanDetection+0x16>
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <Line4ScanDetection+0x64>)
 800193e:	60bb      	str	r3, [r7, #8]

	if(GET_IO_KEY_5(side) == 1)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <Line4ScanDetection+0x22>
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <Line4ScanDetection+0x68>)
 8001948:	e000      	b.n	800194c <Line4ScanDetection+0x24>
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <Line4ScanDetection+0x6c>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <Line4ScanDetection+0x30>
 8001952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001956:	e000      	b.n	800195a <Line4ScanDetection+0x32>
 8001958:	2301      	movs	r3, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f000 ff0f 	bl	8002780 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <Line4ScanDetection+0x4c>
	{
		ReValue = KEY_VALUE_TEN;	
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]

		*CurrentKeyState = LINE4_DETECTION;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	220d      	movs	r2, #13
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e004      	b.n	800197e <Line4ScanDetection+0x56>
	}
	else
	{
		*CurrentKeyState = GND_START;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001f0 	.word	0x200001f0
 800198c:	200001f1 	.word	0x200001f1
 8001990:	40020400 	.word	0x40020400
 8001994:	40020c00 	.word	0x40020c00

08001998 <Line4ScanOver>:

void Line4ScanOver(KeypadSide side)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <Line4ScanOver+0x14>
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <Line4ScanOver+0x58>)
 80019aa:	e000      	b.n	80019ae <Line4ScanOver+0x16>
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <Line4ScanOver+0x5c>)
 80019ae:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <Line4ScanOver+0x22>
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <Line4ScanOver+0x60>)
 80019b8:	e000      	b.n	80019bc <Line4ScanOver+0x24>
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <Line4ScanOver+0x64>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <Line4ScanOver+0x30>
 80019c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c6:	e000      	b.n	80019ca <Line4ScanOver+0x32>
 80019c8:	2301      	movs	r3, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f000 fed7 	bl	8002780 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <Line4ScanOver+0x48>
	{
		*CurrentKeyState = LINE4_OVER;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	220e      	movs	r2, #14
 80019dc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}
}
 80019de:	e002      	b.n	80019e6 <Line4ScanOver+0x4e>
		*CurrentKeyState = GND_START;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001f0 	.word	0x200001f0
 80019f4:	200001f1 	.word	0x200001f1
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020c00 	.word	0x40020c00

08001a00 <ResetGamepadReport>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */


void ResetGamepadReport() {
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	gamepadReport.buttons_16 = 0;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	gamepadReport.buttons_8 = 0;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	709a      	strb	r2, [r3, #2]
	gamepadReport.left_x = 0;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	70da      	strb	r2, [r3, #3]
	gamepadReport.left_y = 0;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	711a      	strb	r2, [r3, #4]
	gamepadReport.right_x = 0;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	715a      	strb	r2, [r3, #5]
	gamepadReport.right_y = 0;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	719a      	strb	r2, [r3, #6]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000204 	.word	0x20000204

08001a38 <PrepareSendBuffer>:

void PrepareSendBuffer(uint8_t *buffer, GamepadReport_t *gamepadReport) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t) (gamepadReport->buttons_16 & 0x00FF);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t) (gamepadReport->buttons_16 >> 8);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
	buffer[2] = gamepadReport->buttons_8;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3302      	adds	r3, #2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	7892      	ldrb	r2, [r2, #2]
 8001a64:	701a      	strb	r2, [r3, #0]
	buffer[3] = gamepadReport->left_x;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
	buffer[4] = gamepadReport->left_y;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
	buffer[5] = gamepadReport->right_x;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3305      	adds	r3, #5
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
	buffer[6] = gamepadReport->right_y;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3306      	adds	r3, #6
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <GetUserInput>:

void GetUserInput() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
	const uint8_t JOYSTICK_VALUE = 64;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	737b      	strb	r3, [r7, #13]

	uint32_t leftKeypadValue = KeypadScan(LEFT);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7fe fd06 	bl	80004c8 <KeypadScan>
 8001abc:	60b8      	str	r0, [r7, #8]
	uint32_t rightKeypadValue = KeypadScan(RIGHT);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7fe fd02 	bl	80004c8 <KeypadScan>
 8001ac4:	6078      	str	r0, [r7, #4]

	Bool changedLeft = true;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
	Bool changedRight = true;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73bb      	strb	r3, [r7, #14]

	switch(leftKeypadValue) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	f200 808c 	bhi.w	8001bee <GetUserInput+0x142>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <GetUserInput+0x30>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001b1d 	.word	0x08001b1d
 8001ae0:	08001b23 	.word	0x08001b23
 8001ae4:	08001b31 	.word	0x08001b31
 8001ae8:	08001b3f 	.word	0x08001b3f
 8001aec:	08001b4f 	.word	0x08001b4f
 8001af0:	08001b59 	.word	0x08001b59
 8001af4:	08001b63 	.word	0x08001b63
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b83 	.word	0x08001b83
 8001b00:	08001b89 	.word	0x08001b89
 8001b04:	08001b99 	.word	0x08001b99
 8001b08:	08001ba9 	.word	0x08001ba9
 8001b0c:	08001bb9 	.word	0x08001bb9
 8001b10:	08001bc9 	.word	0x08001bc9
 8001b14:	08001bcf 	.word	0x08001bcf
 8001b18:	08001bdf 	.word	0x08001bdf
		case 0: changedLeft = false; break;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e065      	b.n	8001bee <GetUserInput+0x142>
		case 1: gamepadReport.left_x = -JOYSTICK_VALUE; break; // LEFT
 8001b22:	7b7b      	ldrb	r3, [r7, #13]
 8001b24:	425b      	negs	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	4b8a      	ldr	r3, [pc, #552]	; (8001d54 <GetUserInput+0x2a8>)
 8001b2c:	70da      	strb	r2, [r3, #3]
 8001b2e:	e05e      	b.n	8001bee <GetUserInput+0x142>
		case 2: gamepadReport.left_y = -JOYSTICK_VALUE; break;  // UP
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	425b      	negs	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <GetUserInput+0x2a8>)
 8001b3a:	711a      	strb	r2, [r3, #4]
 8001b3c:	e057      	b.n	8001bee <GetUserInput+0x142>
		case 3: gamepadReport.buttons_8 |= 1U << 0; break; // PRESS
 8001b3e:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <GetUserInput+0x2a8>)
 8001b40:	789b      	ldrb	r3, [r3, #2]
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <GetUserInput+0x2a8>)
 8001b4a:	709a      	strb	r2, [r3, #2]
 8001b4c:	e04f      	b.n	8001bee <GetUserInput+0x142>
		case 4: gamepadReport.left_y = JOYSTICK_VALUE; break; // DOWN
 8001b4e:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001b52:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <GetUserInput+0x2a8>)
 8001b54:	711a      	strb	r2, [r3, #4]
 8001b56:	e04a      	b.n	8001bee <GetUserInput+0x142>
		case 5: gamepadReport.left_x = JOYSTICK_VALUE; break;  // RIGHT
 8001b58:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001b5c:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <GetUserInput+0x2a8>)
 8001b5e:	70da      	strb	r2, [r3, #3]
 8001b60:	e045      	b.n	8001bee <GetUserInput+0x142>
		case 6: gamepadReport.buttons_16 |= 1U << 7; break;
 8001b62:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <GetUserInput+0x2a8>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <GetUserInput+0x2a8>)
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	e03d      	b.n	8001bee <GetUserInput+0x142>
		case 7: gamepadReport.buttons_16 |= 1U << 6; break;
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <GetUserInput+0x2a8>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <GetUserInput+0x2a8>)
 8001b7e:	801a      	strh	r2, [r3, #0]
 8001b80:	e035      	b.n	8001bee <GetUserInput+0x142>
		case 8: changedLeft = false; break;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e032      	b.n	8001bee <GetUserInput+0x142>
		case 9: gamepadReport.buttons_16 |= 1U << 5; break;
 8001b88:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <GetUserInput+0x2a8>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <GetUserInput+0x2a8>)
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	e02a      	b.n	8001bee <GetUserInput+0x142>
		case 10: gamepadReport.buttons_16 |= 1U << 4; break;
 8001b98:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <GetUserInput+0x2a8>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <GetUserInput+0x2a8>)
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	e022      	b.n	8001bee <GetUserInput+0x142>
		case 11: gamepadReport.buttons_16 |= 1U << 3; break;
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <GetUserInput+0x2a8>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <GetUserInput+0x2a8>)
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	e01a      	b.n	8001bee <GetUserInput+0x142>
		case 12: gamepadReport.buttons_16 |= 1U << 2; break;
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <GetUserInput+0x2a8>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <GetUserInput+0x2a8>)
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	e012      	b.n	8001bee <GetUserInput+0x142>
		case 13: changedLeft = false; break;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e00f      	b.n	8001bee <GetUserInput+0x142>
		case 14: gamepadReport.buttons_16 |= 1U << 1; break;
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <GetUserInput+0x2a8>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <GetUserInput+0x2a8>)
 8001bda:	801a      	strh	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <GetUserInput+0x142>
		case 15: gamepadReport.buttons_16 |= 1U << 0; break;
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <GetUserInput+0x2a8>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <GetUserInput+0x2a8>)
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	bf00      	nop
	}

	switch(rightKeypadValue) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	f200 808e 	bhi.w	8001d12 <GetUserInput+0x266>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <GetUserInput+0x150>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c3d 	.word	0x08001c3d
 8001c00:	08001c43 	.word	0x08001c43
 8001c04:	08001c51 	.word	0x08001c51
 8001c08:	08001c5f 	.word	0x08001c5f
 8001c0c:	08001c6f 	.word	0x08001c6f
 8001c10:	08001c79 	.word	0x08001c79
 8001c14:	08001c83 	.word	0x08001c83
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001ca9 	.word	0x08001ca9
 8001c24:	08001cb9 	.word	0x08001cb9
 8001c28:	08001cc9 	.word	0x08001cc9
 8001c2c:	08001cd9 	.word	0x08001cd9
 8001c30:	08001ce9 	.word	0x08001ce9
 8001c34:	08001cef 	.word	0x08001cef
 8001c38:	08001cff 	.word	0x08001cff
		case 0: changedRight = false; break;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73bb      	strb	r3, [r7, #14]
 8001c40:	e067      	b.n	8001d12 <GetUserInput+0x266>
		case 1: gamepadReport.right_x = -JOYSTICK_VALUE; break; // LEFT
 8001c42:	7b7b      	ldrb	r3, [r7, #13]
 8001c44:	425b      	negs	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <GetUserInput+0x2a8>)
 8001c4c:	715a      	strb	r2, [r3, #5]
 8001c4e:	e060      	b.n	8001d12 <GetUserInput+0x266>
		case 2: gamepadReport.right_y = -JOYSTICK_VALUE; break;  // UP
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	425b      	negs	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <GetUserInput+0x2a8>)
 8001c5a:	719a      	strb	r2, [r3, #6]
 8001c5c:	e059      	b.n	8001d12 <GetUserInput+0x266>
		case 3: gamepadReport.buttons_8 |= 1U << 1; break; // PRESS
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <GetUserInput+0x2a8>)
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <GetUserInput+0x2a8>)
 8001c6a:	709a      	strb	r2, [r3, #2]
 8001c6c:	e051      	b.n	8001d12 <GetUserInput+0x266>
		case 4: gamepadReport.right_y = JOYSTICK_VALUE; break; // DOWN
 8001c6e:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <GetUserInput+0x2a8>)
 8001c74:	719a      	strb	r2, [r3, #6]
 8001c76:	e04c      	b.n	8001d12 <GetUserInput+0x266>
		case 5: gamepadReport.right_x = JOYSTICK_VALUE; break;  // RIGHT
 8001c78:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <GetUserInput+0x2a8>)
 8001c7e:	715a      	strb	r2, [r3, #5]
 8001c80:	e047      	b.n	8001d12 <GetUserInput+0x266>
		case 6: gamepadReport.buttons_16 |= 1U << 8; break;  // K1
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <GetUserInput+0x2a8>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <GetUserInput+0x2a8>)
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	e03f      	b.n	8001d12 <GetUserInput+0x266>
		case 7: gamepadReport.buttons_16 |= 1U << 9; break; // K2
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <GetUserInput+0x2a8>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <GetUserInput+0x2a8>)
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	e037      	b.n	8001d12 <GetUserInput+0x266>
		case 8: changedRight = false; break; // K3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73bb      	strb	r3, [r7, #14]
 8001ca6:	e034      	b.n	8001d12 <GetUserInput+0x266>
		case 9: gamepadReport.buttons_16 |= 1U << 10; break; // K4
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <GetUserInput+0x2a8>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <GetUserInput+0x2a8>)
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	e02c      	b.n	8001d12 <GetUserInput+0x266>
		case 10: gamepadReport.buttons_16 |= 1U << 11; break; // K5
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <GetUserInput+0x2a8>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <GetUserInput+0x2a8>)
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e024      	b.n	8001d12 <GetUserInput+0x266>
		case 11: gamepadReport.buttons_16 |= 1U << 12; break; // K6
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <GetUserInput+0x2a8>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <GetUserInput+0x2a8>)
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	e01c      	b.n	8001d12 <GetUserInput+0x266>
		case 12: gamepadReport.buttons_16 |= 1U << 13; break; // K7
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <GetUserInput+0x2a8>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <GetUserInput+0x2a8>)
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e014      	b.n	8001d12 <GetUserInput+0x266>
		case 13: changedRight = false; break; // K8
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73bb      	strb	r3, [r7, #14]
 8001cec:	e011      	b.n	8001d12 <GetUserInput+0x266>
		case 14: gamepadReport.buttons_16 |= 1U << 14; break; // K9
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <GetUserInput+0x2a8>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <GetUserInput+0x2a8>)
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	e009      	b.n	8001d12 <GetUserInput+0x266>
		case 15: gamepadReport.buttons_16 |= 1U << 15; break; // K10
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <GetUserInput+0x2a8>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <GetUserInput+0x2a8>)
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	bf00      	nop
	}

	// if no button has been pressed (or button without any functionality)
	if (changedLeft == false && changedRight == false) {
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d115      	bne.n	8001d44 <GetUserInput+0x298>
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d112      	bne.n	8001d44 <GetUserInput+0x298>
		// and last time this function was called there user input was detected
		if (CHANGED == true) {
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <GetUserInput+0x2ac>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d112      	bne.n	8001d4c <GetUserInput+0x2a0>
			// reset buffer values and send empty buffer to the device
			ResetGamepadReport();
 8001d26:	f7ff fe6b 	bl	8001a00 <ResetGamepadReport>
			PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <GetUserInput+0x2a8>)
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <GetUserInput+0x2b0>)
 8001d2e:	f7ff fe83 	bl	8001a38 <PrepareSendBuffer>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001d32:	2207      	movs	r2, #7
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <GetUserInput+0x2b0>)
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <GetUserInput+0x2b4>)
 8001d38:	f003 ff94 	bl	8005c64 <USBD_CUSTOM_HID_SendReport>
			CHANGED = false;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <GetUserInput+0x2ac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		}
		//else return without sending buffer
		return;
 8001d42:	e003      	b.n	8001d4c <GetUserInput+0x2a0>
	}

	// if some buttons were pressed set CHANGED flag to true
	CHANGED = true;
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <GetUserInput+0x2ac>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e000      	b.n	8001d4e <GetUserInput+0x2a2>
		return;
 8001d4c:	bf00      	nop
}
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000204 	.word	0x20000204
 8001d58:	200001f2 	.word	0x200001f2
 8001d5c:	2000020c 	.word	0x2000020c
 8001d60:	20000218 	.word	0x20000218

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f000 f9ca 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 f824 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 f88c 	bl	8001e8c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001d74:	f005 f966 	bl	8007044 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ResetGamepadReport();
 8001d78:	f7ff fe42 	bl	8001a00 <ResetGamepadReport>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GetUserInput();
 8001d7c:	f7ff fe96 	bl	8001aac <GetUserInput>

	  if (CHANGED == true) {
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <main+0x44>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d1f9      	bne.n	8001d7c <main+0x18>
		  PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001d88:	4908      	ldr	r1, [pc, #32]	; (8001dac <main+0x48>)
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <main+0x4c>)
 8001d8c:	f7ff fe54 	bl	8001a38 <PrepareSendBuffer>

	  	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001d90:	2207      	movs	r2, #7
 8001d92:	4907      	ldr	r1, [pc, #28]	; (8001db0 <main+0x4c>)
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <main+0x50>)
 8001d96:	f003 ff65 	bl	8005c64 <USBD_CUSTOM_HID_SendReport>
	  	  ResetGamepadReport();
 8001d9a:	f7ff fe31 	bl	8001a00 <ResetGamepadReport>

	  	HAL_Delay(50);
 8001d9e:	2032      	movs	r0, #50	; 0x32
 8001da0:	f000 fa20 	bl	80021e4 <HAL_Delay>
	  GetUserInput();
 8001da4:	e7ea      	b.n	8001d7c <main+0x18>
 8001da6:	bf00      	nop
 8001da8:	200001f2 	.word	0x200001f2
 8001dac:	20000204 	.word	0x20000204
 8001db0:	2000020c 	.word	0x2000020c
 8001db4:	20000218 	.word	0x20000218

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0320 	add.w	r3, r7, #32
 8001dc2:	2230      	movs	r2, #48	; 0x30
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 fdc0 	bl	800794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemClock_Config+0xcc>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <SystemClock_Config+0xcc>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6413      	str	r3, [r2, #64]	; 0x40
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <SystemClock_Config+0xcc>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <SystemClock_Config+0xd0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <SystemClock_Config+0xd0>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <SystemClock_Config+0xd0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e2c:	23a8      	movs	r3, #168	; 0xa8
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e34:	2307      	movs	r3, #7
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 fe3b 	bl	8003ab8 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e48:	f000 f886 	bl	8001f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	2302      	movs	r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 f894 	bl	8003f98 <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e76:	f000 f86f 	bl	8001f58 <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3750      	adds	r7, #80	; 0x50
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_GPIO_Init+0xc0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001f12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	480a      	ldr	r0, [pc, #40]	; (8001f50 <MX_GPIO_Init+0xc4>)
 8001f28:	f000 fa90 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f2c:	234f      	movs	r3, #79	; 0x4f
 8001f2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_GPIO_Init+0xc8>)
 8001f40:	f000 fa84 	bl	800244c <HAL_GPIO_Init>

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020c00 	.word	0x40020c00

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f8ca 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <OTG_FS_IRQHandler+0x10>)
 800201a:	f000 fd32 	bl	8002a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200006e8 	.word	0x200006e8

08002028 <_sbrk>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x50>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x16>
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <_sbrk+0x50>)
 800203a:	4a10      	ldr	r2, [pc, #64]	; (800207c <_sbrk+0x54>)
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <_sbrk+0x50>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <_sbrk+0x50>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	466a      	mov	r2, sp
 800204e:	4293      	cmp	r3, r2
 8002050:	d907      	bls.n	8002062 <_sbrk+0x3a>
 8002052:	f005 fc41 	bl	80078d8 <__errno>
 8002056:	4602      	mov	r2, r0
 8002058:	230c      	movs	r3, #12
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	e006      	b.n	8002070 <_sbrk+0x48>
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <_sbrk+0x50>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <_sbrk+0x50>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200001f4 	.word	0x200001f4
 800207c:	20000af8 	.word	0x20000af8

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <SystemInit+0x28>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x28>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SystemInit+0x28>)
 8002096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800209a:	609a      	str	r2, [r3, #8]
#endif
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x14>
 80020b0:	2100      	movs	r1, #0
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <LoopFillZerobss+0x18>)
 80020b6:	585b      	ldr	r3, [r3, r1]
 80020b8:	5043      	str	r3, [r0, r1]
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <LoopFillZerobss+0x1c>)
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x20>)
 80020c0:	1842      	adds	r2, r0, r1
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x24>)
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
 80020ca:	2300      	movs	r3, #0
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <LoopFillZerobss+0x28>)
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>
 80020d6:	f7ff ffd3 	bl	8002080 <SystemInit>
 80020da:	f005 fc03 	bl	80078e4 <__libc_init_array>
 80020de:	f7ff fe41 	bl	8001d64 <main>
 80020e2:	4770      	bx	lr
 80020e4:	20020000 	.word	0x20020000
 80020e8:	08007bc8 	.word	0x08007bc8
 80020ec:	20000000 	.word	0x20000000
 80020f0:	200001d4 	.word	0x200001d4
 80020f4:	200001d4 	.word	0x200001d4
 80020f8:	20000af4 	.word	0x20000af4

080020fc <ADC_IRQHandler>:
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f94d 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff ff18 	bl	8001f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f965 	bl	8002432 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f92d 	bl	80023de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000214 	.word	0x20000214

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000214 	.word	0x20000214

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_Delay+0x40>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000008 	.word	0x20000008

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002394:	d301      	bcc.n	800239a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SysTick_Config+0x40>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a2:	210f      	movs	r1, #15
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f7ff ff8e 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SysTick_Config+0x40>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SysTick_Config+0x40>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff29 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f0:	f7ff ff3e 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff ff8e 	bl	800231c <NVIC_EncodePriority>
 8002400:	4602      	mov	r2, r0
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff5d 	bl	80022c8 <__NVIC_SetPriority>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff31 	bl	800228c <__NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffa2 	bl	8002384 <SysTick_Config>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e16b      	b.n	8002740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 815a 	bne.w	800273a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00b      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249a:	2b11      	cmp	r3, #17
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0xfc>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80b4 	beq.w	800273a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_GPIO_Init+0x308>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <HAL_GPIO_Init+0x30c>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_GPIO_Init+0x310>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02b      	beq.n	8002672 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_GPIO_Init+0x314>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x318>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x31c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x21a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x320>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x216>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x324>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x212>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x328>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_GPIO_Init+0x32c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x20a>
 8002652:	2307      	movs	r3, #7
 8002654:	e00e      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002656:	2308      	movs	r3, #8
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800265a:	2306      	movs	r3, #6
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x228>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x228>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002684:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_GPIO_Init+0x30c>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_GPIO_Init+0x330>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_GPIO_Init+0x330>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_GPIO_Init+0x330>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_GPIO_Init+0x330>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_GPIO_Init+0x330>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_GPIO_Init+0x330>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_GPIO_Init+0x330>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_GPIO_Init+0x330>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f ae90 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	3724      	adds	r7, #36	; 0x24
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e001      	b.n	80027a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e4:	b08f      	sub	sp, #60	; 0x3c
 80027e6:	af0a      	add	r7, sp, #40	; 0x28
 80027e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e10f      	b.n	8002a14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f004 fd78 	bl	8007304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2203      	movs	r2, #3
 8002818:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fe8f 	bl	8004556 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	687e      	ldr	r6, [r7, #4]
 8002840:	466d      	mov	r5, sp
 8002842:	f106 0410 	add.w	r4, r6, #16
 8002846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002852:	e885 0003 	stmia.w	r5, {r0, r1}
 8002856:	1d33      	adds	r3, r6, #4
 8002858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	f001 fd66 	bl	800432c <USB_CoreInit>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0d0      	b.n	8002a14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fe7d 	bl	8004578 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e04a      	b.n	800291a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	333d      	adds	r3, #61	; 0x3d
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	333c      	adds	r3, #60	; 0x3c
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	b298      	uxth	r0, r3
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3342      	adds	r3, #66	; 0x42
 80028c0:	4602      	mov	r2, r0
 80028c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333f      	adds	r3, #63	; 0x3f
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3344      	adds	r3, #68	; 0x44
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3348      	adds	r3, #72	; 0x48
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3350      	adds	r3, #80	; 0x50
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	3301      	adds	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d3af      	bcc.n	8002884 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e044      	b.n	80029b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3b5      	bcc.n	800292a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	687e      	ldr	r6, [r7, #4]
 80029c6:	466d      	mov	r5, sp
 80029c8:	f106 0410 	add.w	r4, r6, #16
 80029cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029dc:	1d33      	adds	r3, r6, #4
 80029de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e0:	6838      	ldr	r0, [r7, #0]
 80029e2:	f001 fdf3 	bl	80045cc <USB_DevInit>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e00d      	b.n	8002a14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fe32 	bl	8005676 <USB_DevDisconnect>

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_PCD_Start+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e020      	b.n	8002a7a <HAL_PCD_Start+0x5e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d109      	bne.n	8002a5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d005      	beq.n	8002a5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 fdf0 	bl	8005646 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fd62 	bl	8004534 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a82:	b590      	push	{r4, r7, lr}
 8002a84:	b08d      	sub	sp, #52	; 0x34
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fe97 	bl	80057cc <USB_GetMode>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f040 839d 	bne.w	80031e0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fdfb 	bl	80056a6 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8393 	beq.w	80031de <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fdf2 	bl	80056a6 <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f002 0202 	and.w	r2, r2, #2
 8002ada:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fde0 	bl	80056a6 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d161      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0210 	bic.w	r2, r2, #16
 8002afe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	0c5b      	lsrs	r3, r3, #17
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d124      	bne.n	8002b76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d035      	beq.n	8002ba4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6a38      	ldr	r0, [r7, #32]
 8002b4c:	f002 fc58 	bl	8005400 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5c:	441a      	add	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b6e:	441a      	add	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	619a      	str	r2, [r3, #24]
 8002b74:	e016      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	0c5b      	lsrs	r3, r3, #17
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d110      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6a38      	ldr	r0, [r7, #32]
 8002b8e:	f002 fc37 	bl	8005400 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b9e:	441a      	add	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0210 	orr.w	r2, r2, #16
 8002bb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 fd74 	bl	80056a6 <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bc8:	d16e      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fd7a 	bl	80056cc <USB_ReadDevAllOutEpInterrupt>
 8002bd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bda:	e062      	b.n	8002ca2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d057      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 fd9f 	bl	8005734 <USB_ReadDevOutEPInterrupt>
 8002bf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2301      	movs	r3, #1
 8002c12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fd98 	bl	800374c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	461a      	mov	r2, r3
 8002c34:	2308      	movs	r3, #8
 8002c36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fe92 	bl	8003964 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	461a      	mov	r2, r3
 8002c58:	2310      	movs	r3, #16
 8002c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2320      	movs	r3, #32
 8002c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3301      	adds	r3, #1
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d199      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fcfa 	bl	80056a6 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cbc:	f040 80c0 	bne.w	8002e40 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fd1b 	bl	8005700 <USB_ReadDevAllInEpInterrupt>
 8002cca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cd0:	e0b2      	b.n	8002e38 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a7 	beq.w	8002e2c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fd41 	bl	8005770 <USB_ReadDevInEPInterrupt>
 8002cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d057      	beq.n	8002daa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69f9      	ldr	r1, [r7, #28]
 8002d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d132      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3348      	adds	r3, #72	; 0x48
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4403      	add	r3, r0
 8002d58:	3344      	adds	r3, #68	; 0x44
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4419      	add	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4403      	add	r3, r0
 8002d6c:	3348      	adds	r3, #72	; 0x48
 8002d6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d113      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x31c>
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3350      	adds	r3, #80	; 0x50
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d96:	461a      	mov	r2, r3
 8002d98:	2101      	movs	r1, #1
 8002d9a:	f002 fd49 	bl	8005830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f004 fb2e 	bl	8007406 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2302      	movs	r3, #2
 8002e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fc03 	bl	8003632 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3301      	adds	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f47f af49 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fc2e 	bl	80056a6 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e54:	d122      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fe0e 	bl	8003aa0 <HAL_PCDEx_LPM_Callback>
 8002e84:	e002      	b.n	8002e8c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f004 fb34 	bl	80074f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 fc00 	bl	80056a6 <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb0:	d112      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f004 faf0 	bl	80074a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ed6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fbe2 	bl	80056a6 <USB_ReadInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	f040 80c7 	bne.w	800307e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2110      	movs	r1, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fcc2 	bl	8004894 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f14:	e056      	b.n	8002fc4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f22:	461a      	mov	r2, r3
 8002f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3a:	0151      	lsls	r1, r2, #5
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	440a      	add	r2, r1
 8002f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5a:	0151      	lsls	r1, r2, #5
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	440a      	add	r2, r1
 8002f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	461a      	mov	r2, r3
 8002f78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8e:	0151      	lsls	r1, r2, #5
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	440a      	add	r2, r1
 8002f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	0151      	lsls	r1, r2, #5
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d3a3      	bcc.n	8002f16 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fe0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffa:	f043 030b 	orr.w	r3, r3, #11
 8002ffe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003010:	f043 030b 	orr.w	r3, r3, #11
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	e015      	b.n	8003044 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800302a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800302e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303e:	f043 030b 	orr.w	r3, r3, #11
 8003042:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003052:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003056:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003068:	461a      	mov	r2, r3
 800306a:	f002 fbe1 	bl	8005830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800307c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fb0f 	bl	80056a6 <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d124      	bne.n	80030de <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f002 fba5 	bl	80057e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fc57 	bl	8004956 <USB_GetDevSpeed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681c      	ldr	r4, [r3, #0]
 80030b4:	f001 f92e 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 80030b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	4620      	mov	r0, r4
 80030c4:	f001 f994 	bl	80043f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f004 f9c4 	bl	8007456 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fadf 	bl	80056a6 <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d10a      	bne.n	8003108 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f004 f9a1 	bl	800743a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f002 0208 	and.w	r2, r2, #8
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f002 faca 	bl	80056a6 <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311c:	d10f      	bne.n	800313e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	b2db      	uxtb	r3, r3
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f004 fa03 	bl	8007534 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f002 faaf 	bl	80056a6 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003152:	d10f      	bne.n	8003174 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f004 f9d6 	bl	8007510 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fa94 	bl	80056a6 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d10a      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f004 f9e4 	bl	8007558 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800319e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fa7e 	bl	80056a6 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d115      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f004 f9d4 	bl	8007574 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	e000      	b.n	80031e0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80031de:	bf00      	nop
    }
  }
}
 80031e0:	3734      	adds	r7, #52	; 0x34
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd90      	pop	{r4, r7, pc}

080031e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_PCD_SetAddress+0x1a>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e013      	b.n	8003228 <HAL_PCD_SetAddress+0x42>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f002 f9ee 	bl	80055fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	70fb      	strb	r3, [r7, #3]
 8003242:	460b      	mov	r3, r1
 8003244:	803b      	strh	r3, [r7, #0]
 8003246:	4613      	mov	r3, r2
 8003248:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da0f      	bge.n	8003276 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3338      	adds	r3, #56	; 0x38
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	705a      	strb	r2, [r3, #1]
 8003274:	e00f      	b.n	8003296 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032a2:	883a      	ldrh	r2, [r7, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	78ba      	ldrb	r2, [r7, #2]
 80032ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032c0:	78bb      	ldrb	r3, [r7, #2]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d102      	bne.n	80032cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_PCD_EP_Open+0xaa>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e00e      	b.n	80032f8 <HAL_PCD_EP_Open+0xc8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 fb59 	bl	80049a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800330c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da0f      	bge.n	8003334 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	3338      	adds	r3, #56	; 0x38
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	3304      	adds	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	705a      	strb	r2, [r3, #1]
 8003332:	e00f      	b.n	8003354 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_PCD_EP_Close+0x6e>
 800336a:	2302      	movs	r3, #2
 800336c:	e00e      	b.n	800338c <HAL_PCD_EP_Close+0x8c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	4618      	mov	r0, r3
 800337e:	f001 fb97 	bl	8004ab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	f001 fe72 	bl	80050f0 <USB_EP0StartXfer>
 800340c:	e008      	b.n	8003420 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	f001 fc24 	bl	8004c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	460b      	mov	r3, r1
 8003438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3338      	adds	r3, #56	; 0x38
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	b2da      	uxtb	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003484:	7afb      	ldrb	r3, [r7, #11]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6979      	ldr	r1, [r7, #20]
 800349c:	f001 fe28 	bl	80050f0 <USB_EP0StartXfer>
 80034a0:	e008      	b.n	80034b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	6979      	ldr	r1, [r7, #20]
 80034b0:	f001 fbda 	bl	8004c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d901      	bls.n	80034dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e050      	b.n	800357e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da0f      	bge.n	8003504 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3338      	adds	r3, #56	; 0x38
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	e00d      	b.n	8003520 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_PCD_EP_SetStall+0x82>
 800353c:	2302      	movs	r3, #2
 800353e:	e01e      	b.n	800357e <HAL_PCD_EP_SetStall+0xc0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	f001 ff7f 	bl	8005452 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	b2d9      	uxtb	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800356e:	461a      	mov	r2, r3
 8003570:	f002 f95e 	bl	8005830 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d901      	bls.n	80035a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e042      	b.n	800362a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da0f      	bge.n	80035cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	3338      	adds	r3, #56	; 0x38
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	705a      	strb	r2, [r3, #1]
 80035ca:	e00f      	b.n	80035ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_EP_ClrStall+0x86>
 8003608:	2302      	movs	r3, #2
 800360a:	e00e      	b.n	800362a <HAL_PCD_EP_ClrStall+0xa4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f001 ff87 	bl	800552e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b08a      	sub	sp, #40	; 0x28
 8003636:	af02      	add	r7, sp, #8
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	3338      	adds	r3, #56	; 0x38
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	429a      	cmp	r2, r3
 8003664:	d901      	bls.n	800366a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06c      	b.n	8003744 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	429a      	cmp	r2, r3
 800367e:	d902      	bls.n	8003686 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3303      	adds	r3, #3
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800368e:	e02b      	b.n	80036e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d902      	bls.n	80036ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3303      	adds	r3, #3
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68d9      	ldr	r1, [r3, #12]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f001 fe63 	bl	8005396 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	441a      	add	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d809      	bhi.n	8003712 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003706:	429a      	cmp	r2, r3
 8003708:	d203      	bcs.n	8003712 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1be      	bne.n	8003690 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	429a      	cmp	r2, r3
 800371c:	d811      	bhi.n	8003742 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	2201      	movs	r2, #1
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	43db      	mvns	r3, r3
 8003738:	6939      	ldr	r1, [r7, #16]
 800373a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800373e:	4013      	ands	r3, r2
 8003740:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	333c      	adds	r3, #60	; 0x3c
 8003764:	3304      	adds	r3, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	f040 80a0 	bne.w	80038c4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d015      	beq.n	80037ba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a72      	ldr	r2, [pc, #456]	; (800395c <PCD_EP_OutXfrComplete_int+0x210>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f240 80dd 	bls.w	8003952 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80d7 	beq.w	8003952 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	6093      	str	r3, [r2, #8]
 80037b8:	e0cb      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2320      	movs	r3, #32
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	e0bc      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 80b7 	bne.w	8003952 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a5d      	ldr	r2, [pc, #372]	; (800395c <PCD_EP_OutXfrComplete_int+0x210>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d90f      	bls.n	800380c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003802:	461a      	mov	r2, r3
 8003804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	e0a2      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800381e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	0159      	lsls	r1, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	440b      	add	r3, r1
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003832:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003846:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4403      	add	r3, r0
 800386a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4419      	add	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4403      	add	r3, r0
 8003880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003884:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d114      	bne.n	80038b6 <PCD_EP_OutXfrComplete_int+0x16a>
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d108      	bne.n	80038b6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038ae:	461a      	mov	r2, r3
 80038b0:	2101      	movs	r1, #1
 80038b2:	f001 ffbd 	bl	8005830 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f003 fd87 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
 80038c2:	e046      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a26      	ldr	r2, [pc, #152]	; (8003960 <PCD_EP_OutXfrComplete_int+0x214>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d124      	bne.n	8003916 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	e032      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003902:	461a      	mov	r2, r3
 8003904:	2320      	movs	r3, #32
 8003906:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f003 fd5e 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
 8003914:	e01d      	b.n	8003952 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d114      	bne.n	8003946 <PCD_EP_OutXfrComplete_int+0x1fa>
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800393e:	461a      	mov	r2, r3
 8003940:	2100      	movs	r1, #0
 8003942:	f001 ff75 	bl	8005830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f003 fd3f 	bl	80073d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	4f54300a 	.word	0x4f54300a
 8003960:	4f54310a 	.word	0x4f54310a

08003964 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	333c      	adds	r3, #60	; 0x3c
 800397c:	3304      	adds	r3, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d90e      	bls.n	80039b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f003 fcf7 	bl	80073ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <PCD_EP_OutSetupPacket_int+0x88>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d90c      	bls.n	80039e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d108      	bne.n	80039e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039d8:	461a      	mov	r2, r3
 80039da:	2101      	movs	r1, #1
 80039dc:	f001 ff28 	bl	8005830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	4f54300a 	.word	0x4f54300a

080039f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
 80039fc:	4613      	mov	r3, r2
 80039fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a0e:	883b      	ldrh	r3, [r7, #0]
 8003a10:	0419      	lsls	r1, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1c:	e028      	b.n	8003a70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4413      	add	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e00d      	b.n	8003a4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3340      	adds	r3, #64	; 0x40
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3ec      	bcc.n	8003a32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a58:	883b      	ldrh	r3, [r7, #0]
 8003a5a:	0418      	lsls	r0, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4302      	orrs	r2, r0
 8003a68:	3340      	adds	r3, #64	; 0x40
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e25b      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d075      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad6:	4ba3      	ldr	r3, [pc, #652]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d00c      	beq.n	8003afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae2:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d112      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4b9d      	ldr	r3, [pc, #628]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	4b99      	ldr	r3, [pc, #612]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05b      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x108>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d157      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e236      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCC_OscConfig+0x74>
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a90      	ldr	r2, [pc, #576]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x98>
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a8a      	ldr	r2, [pc, #552]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a87      	ldr	r2, [pc, #540]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xb0>
 8003b50:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a83      	ldr	r2, [pc, #524]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a80      	ldr	r2, [pc, #512]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fb2c 	bl	80021cc <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fb28 	bl	80021cc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1fb      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xc0>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fb18 	bl	80021cc <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fb14 	bl	80021cc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e1e7      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xe8>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d063      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bce:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bda:	4b62      	ldr	r3, [pc, #392]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d11c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x152>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e1bb      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4952      	ldr	r1, [pc, #328]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	e03a      	b.n	8003c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCC_OscConfig+0x2b0>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fe facd 	bl	80021cc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fe fac9 	bl	80021cc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e19c      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4940      	ldr	r1, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	e015      	b.n	8003c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HAL_RCC_OscConfig+0x2b0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe faac 	bl	80021cc <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe faa8 	bl	80021cc <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e17b      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d030      	beq.n	8003d04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x2b4>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fa8c 	bl	80021cc <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fe fa88 	bl	80021cc <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e15b      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x200>
 8003cd6:	e015      	b.n	8003d04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x2b4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fe fa75 	bl	80021cc <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fe fa71 	bl	80021cc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e144      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a0 	beq.w	8003e52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_OscConfig+0x2b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d121      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_RCC_OscConfig+0x2b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_RCC_OscConfig+0x2b8>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fa37 	bl	80021cc <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	e011      	b.n	8003d86 <HAL_RCC_OscConfig+0x2ce>
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470000 	.word	0x42470000
 8003d6c:	42470e80 	.word	0x42470e80
 8003d70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d74:	f7fe fa2a 	bl	80021cc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0fd      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d86:	4b81      	ldr	r3, [pc, #516]	; (8003f8c <HAL_RCC_OscConfig+0x4d4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d106      	bne.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a7c      	ldr	r2, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
 8003da6:	e01c      	b.n	8003de2 <HAL_RCC_OscConfig+0x32a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d10c      	bne.n	8003dca <HAL_RCC_OscConfig+0x312>
 8003db0:	4b77      	ldr	r3, [pc, #476]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a76      	ldr	r2, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a73      	ldr	r2, [pc, #460]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc8:	e00b      	b.n	8003de2 <HAL_RCC_OscConfig+0x32a>
 8003dca:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a70      	ldr	r2, [pc, #448]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	4b6e      	ldr	r3, [pc, #440]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a6d      	ldr	r2, [pc, #436]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d015      	beq.n	8003e16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe f9ef 	bl	80021cc <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe f9eb 	bl	80021cc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0bc      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ee      	beq.n	8003df2 <HAL_RCC_OscConfig+0x33a>
 8003e14:	e014      	b.n	8003e40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fe f9d9 	bl	80021cc <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f9d5 	bl	80021cc <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0a6      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e34:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ee      	bne.n	8003e1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e46:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a51      	ldr	r2, [pc, #324]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8092 	beq.w	8003f80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5c:	4b4c      	ldr	r3, [pc, #304]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d05c      	beq.n	8003f22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d141      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e70:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <HAL_RCC_OscConfig+0x4dc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe f9a9 	bl	80021cc <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe f9a5 	bl	80021cc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e078      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	019b      	lsls	r3, r3, #6
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	4933      	ldr	r1, [pc, #204]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec6:	4b33      	ldr	r3, [pc, #204]	; (8003f94 <HAL_RCC_OscConfig+0x4dc>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f97e 	bl	80021cc <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f97a 	bl	80021cc <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e04d      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
 8003ef2:	e045      	b.n	8003f80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x4dc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fe f967 	bl	80021cc <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fe f963 	bl	80021cc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e036      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x44a>
 8003f20:	e02e      	b.n	8003f80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e029      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCC_OscConfig+0x4d8>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d11c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d115      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	40023800 	.word	0x40023800
 8003f94:	42470060 	.word	0x42470060

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0cc      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b68      	ldr	r3, [pc, #416]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d90c      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b65      	ldr	r3, [pc, #404]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b8      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fec:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a52      	ldr	r2, [pc, #328]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	494d      	ldr	r1, [pc, #308]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d044      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d119      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	2b03      	cmp	r3, #3
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004066:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e067      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4934      	ldr	r1, [pc, #208]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004088:	f7fe f8a0 	bl	80021cc <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe f89c 	bl	80021cc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e04f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d20c      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e032      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4916      	ldr	r1, [pc, #88]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411e:	f000 f821 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004122:	4601      	mov	r1, r0
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	fa21 f303 	lsr.w	r3, r1, r3
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe f800 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023c00 	.word	0x40023c00
 8004154:	40023800 	.word	0x40023800
 8004158:	08007b48 	.word	0x08007b48
 800415c:	20000000 	.word	0x20000000
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d007      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x32>
 8004186:	2b08      	cmp	r3, #8
 8004188:	d008      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x38>
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 80b4 	bne.w	80042f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b5e      	ldr	r3, [pc, #376]	; (800430c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004192:	60bb      	str	r3, [r7, #8]
       break;
 8004194:	e0b3      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004196:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004198:	60bb      	str	r3, [r7, #8]
      break;
 800419a:	e0b0      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800419c:	4b5a      	ldr	r3, [pc, #360]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a6:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04a      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b55      	ldr	r3, [pc, #340]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	ea03 0501 	and.w	r5, r3, r1
 80041c8:	ea04 0602 	and.w	r6, r4, r2
 80041cc:	4629      	mov	r1, r5
 80041ce:	4632      	mov	r2, r6
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	0154      	lsls	r4, r2, #5
 80041da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041de:	014b      	lsls	r3, r1, #5
 80041e0:	4619      	mov	r1, r3
 80041e2:	4622      	mov	r2, r4
 80041e4:	1b49      	subs	r1, r1, r5
 80041e6:	eb62 0206 	sbc.w	r2, r2, r6
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	0194      	lsls	r4, r2, #6
 80041f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041f8:	018b      	lsls	r3, r1, #6
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	00e2      	lsls	r2, r4, #3
 800420a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800420e:	00d9      	lsls	r1, r3, #3
 8004210:	460b      	mov	r3, r1
 8004212:	4614      	mov	r4, r2
 8004214:	195b      	adds	r3, r3, r5
 8004216:	eb44 0406 	adc.w	r4, r4, r6
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	0262      	lsls	r2, r4, #9
 8004224:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004228:	0259      	lsls	r1, r3, #9
 800422a:	460b      	mov	r3, r1
 800422c:	4614      	mov	r4, r2
 800422e:	4618      	mov	r0, r3
 8004230:	4621      	mov	r1, r4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	f7fb ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e049      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004248:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	ea03 0501 	and.w	r5, r3, r1
 800425e:	ea04 0602 	and.w	r6, r4, r2
 8004262:	4629      	mov	r1, r5
 8004264:	4632      	mov	r2, r6
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	0154      	lsls	r4, r2, #5
 8004270:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004274:	014b      	lsls	r3, r1, #5
 8004276:	4619      	mov	r1, r3
 8004278:	4622      	mov	r2, r4
 800427a:	1b49      	subs	r1, r1, r5
 800427c:	eb62 0206 	sbc.w	r2, r2, r6
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	f04f 0400 	mov.w	r4, #0
 8004288:	0194      	lsls	r4, r2, #6
 800428a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800428e:	018b      	lsls	r3, r1, #6
 8004290:	1a5b      	subs	r3, r3, r1
 8004292:	eb64 0402 	sbc.w	r4, r4, r2
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	00e2      	lsls	r2, r4, #3
 80042a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042a4:	00d9      	lsls	r1, r3, #3
 80042a6:	460b      	mov	r3, r1
 80042a8:	4614      	mov	r4, r2
 80042aa:	195b      	adds	r3, r3, r5
 80042ac:	eb44 0406 	adc.w	r4, r4, r6
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	02a2      	lsls	r2, r4, #10
 80042ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042be:	0299      	lsls	r1, r3, #10
 80042c0:	460b      	mov	r3, r1
 80042c2:	4614      	mov	r4, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	4621      	mov	r1, r4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	f7fb ff79 	bl	80001c8 <__aeabi_uldivmod>
 80042d6:	4603      	mov	r3, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	60bb      	str	r3, [r7, #8]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042fa:	60bb      	str	r3, [r7, #8]
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	68bb      	ldr	r3, [r7, #8]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000000 	.word	0x20000000

0800432c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800432c:	b084      	sub	sp, #16
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	f107 001c 	add.w	r0, r7, #28
 800433a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	2b01      	cmp	r3, #1
 8004342:	d122      	bne.n	800438a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f001 fab4 	bl	80058ec <USB_CoreReset>
 8004384:	4603      	mov	r3, r0
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	e01a      	b.n	80043c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f001 faa8 	bl	80058ec <USB_CoreReset>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
 80043b2:	e005      	b.n	80043c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10b      	bne.n	80043de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f043 0206 	orr.w	r2, r3, #6
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ea:	b004      	add	sp, #16
 80043ec:	4770      	bx	lr
	...

080043f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d165      	bne.n	80044d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a41      	ldr	r2, [pc, #260]	; (800450c <USB_SetTurnaroundTime+0x11c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d906      	bls.n	800441a <USB_SetTurnaroundTime+0x2a>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <USB_SetTurnaroundTime+0x120>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d802      	bhi.n	800441a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004414:	230f      	movs	r3, #15
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e062      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <USB_SetTurnaroundTime+0x120>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d906      	bls.n	8004430 <USB_SetTurnaroundTime+0x40>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a3b      	ldr	r2, [pc, #236]	; (8004514 <USB_SetTurnaroundTime+0x124>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800442a:	230e      	movs	r3, #14
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e057      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a38      	ldr	r2, [pc, #224]	; (8004514 <USB_SetTurnaroundTime+0x124>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d906      	bls.n	8004446 <USB_SetTurnaroundTime+0x56>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a37      	ldr	r2, [pc, #220]	; (8004518 <USB_SetTurnaroundTime+0x128>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d802      	bhi.n	8004446 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004440:	230d      	movs	r3, #13
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e04c      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4a33      	ldr	r2, [pc, #204]	; (8004518 <USB_SetTurnaroundTime+0x128>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d906      	bls.n	800445c <USB_SetTurnaroundTime+0x6c>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4a32      	ldr	r2, [pc, #200]	; (800451c <USB_SetTurnaroundTime+0x12c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d802      	bhi.n	800445c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004456:	230c      	movs	r3, #12
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e041      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <USB_SetTurnaroundTime+0x12c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d906      	bls.n	8004472 <USB_SetTurnaroundTime+0x82>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <USB_SetTurnaroundTime+0x130>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d802      	bhi.n	8004472 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800446c:	230b      	movs	r3, #11
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e036      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <USB_SetTurnaroundTime+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d906      	bls.n	8004488 <USB_SetTurnaroundTime+0x98>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a29      	ldr	r2, [pc, #164]	; (8004524 <USB_SetTurnaroundTime+0x134>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d802      	bhi.n	8004488 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004482:	230a      	movs	r3, #10
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e02b      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a26      	ldr	r2, [pc, #152]	; (8004524 <USB_SetTurnaroundTime+0x134>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d906      	bls.n	800449e <USB_SetTurnaroundTime+0xae>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a25      	ldr	r2, [pc, #148]	; (8004528 <USB_SetTurnaroundTime+0x138>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d802      	bhi.n	800449e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004498:	2309      	movs	r3, #9
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e020      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a21      	ldr	r2, [pc, #132]	; (8004528 <USB_SetTurnaroundTime+0x138>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d906      	bls.n	80044b4 <USB_SetTurnaroundTime+0xc4>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <USB_SetTurnaroundTime+0x13c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d802      	bhi.n	80044b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ae:	2308      	movs	r3, #8
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e015      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <USB_SetTurnaroundTime+0x13c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d906      	bls.n	80044ca <USB_SetTurnaroundTime+0xda>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <USB_SetTurnaroundTime+0x140>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d802      	bhi.n	80044ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044c4:	2307      	movs	r3, #7
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e00a      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ca:	2306      	movs	r3, #6
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e007      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044d6:	2309      	movs	r3, #9
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e001      	b.n	80044e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044dc:	2309      	movs	r3, #9
 80044de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	00d8acbf 	.word	0x00d8acbf
 8004510:	00e4e1bf 	.word	0x00e4e1bf
 8004514:	00f423ff 	.word	0x00f423ff
 8004518:	0106737f 	.word	0x0106737f
 800451c:	011a499f 	.word	0x011a499f
 8004520:	01312cff 	.word	0x01312cff
 8004524:	014ca43f 	.word	0x014ca43f
 8004528:	016e35ff 	.word	0x016e35ff
 800452c:	01a6ab1f 	.word	0x01a6ab1f
 8004530:	01e847ff 	.word	0x01e847ff

08004534 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d106      	bne.n	80045a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e00b      	b.n	80045bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e001      	b.n	80045bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e003      	b.n	80045c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045bc:	2032      	movs	r0, #50	; 0x32
 80045be:	f7fd fe11 	bl	80021e4 <HAL_Delay>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045cc:	b084      	sub	sp, #16
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e009      	b.n	8004600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3340      	adds	r3, #64	; 0x40
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3301      	adds	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b0e      	cmp	r3, #14
 8004604:	d9f2      	bls.n	80045ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11c      	bne.n	8004646 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
 8004644:	e00b      	b.n	800465e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	4619      	mov	r1, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	461a      	mov	r2, r3
 800467a:	680b      	ldr	r3, [r1, #0]
 800467c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10c      	bne.n	800469e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800468a:	2100      	movs	r1, #0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f949 	bl	8004924 <USB_SetDevSpeed>
 8004692:	e008      	b.n	80046a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004694:	2101      	movs	r1, #1
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f944 	bl	8004924 <USB_SetDevSpeed>
 800469c:	e003      	b.n	80046a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800469e:	2103      	movs	r1, #3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f93f 	bl	8004924 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046a6:	2110      	movs	r1, #16
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8f3 	bl	8004894 <USB_FlushTxFifo>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f911 	bl	80048e0 <USB_FlushRxFifo>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	461a      	mov	r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	e043      	b.n	800477a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004708:	d118      	bne.n	800473c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	461a      	mov	r2, r3
 800471e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e013      	b.n	800474e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e008      	b.n	800474e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	461a      	mov	r2, r3
 800474a:	2300      	movs	r3, #0
 800474c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3301      	adds	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	d3b7      	bcc.n	80046f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004782:	2300      	movs	r3, #0
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e043      	b.n	8004810 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800479a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479e:	d118      	bne.n	80047d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e013      	b.n	80047e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	461a      	mov	r2, r3
 80047ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e008      	b.n	80047e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	461a      	mov	r2, r3
 8004804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d3b7      	bcc.n	8004788 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004838:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f043 0210 	orr.w	r2, r3, #16
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <USB_DevInit+0x2c4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800488c:	b004      	add	sp, #16
 800488e:	4770      	bx	lr
 8004890:	803c3800 	.word	0x803c3800

08004894 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <USB_FlushTxFifo+0x48>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e006      	b.n	80048ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d0f0      	beq.n	80048ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	00030d40 	.word	0x00030d40

080048e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2210      	movs	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a09      	ldr	r2, [pc, #36]	; (8004920 <USB_FlushRxFifo+0x40>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d901      	bls.n	8004904 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e006      	b.n	8004912 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	d0f0      	beq.n	80048f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	00030d40 	.word	0x00030d40

08004924 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004944:	4313      	orrs	r3, r2
 8004946:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0306 	and.w	r3, r3, #6
 800496e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
 800497a:	e00a      	b.n	8004992 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d002      	beq.n	8004988 <USB_GetDevSpeed+0x32>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d102      	bne.n	800498e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004988:	2302      	movs	r3, #2
 800498a:	75fb      	strb	r3, [r7, #23]
 800498c:	e001      	b.n	8004992 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800498e:	230f      	movs	r3, #15
 8004990:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d13a      	bne.n	8004a32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049da:	4313      	orrs	r3, r2
 80049dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d155      	bne.n	8004aa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	059b      	lsls	r3, r3, #22
 8004a16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e036      	b.n	8004aa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11a      	bne.n	8004aa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	78db      	ldrb	r3, [r3, #3]
 8004a84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a86:	430b      	orrs	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d161      	bne.n	8004b90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae2:	d11f      	bne.n	8004b24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	2101      	movs	r1, #1
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b44:	4013      	ands	r3, r2
 8004b46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	0159      	lsls	r1, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	4619      	mov	r1, r3
 8004b88:	4b35      	ldr	r3, [pc, #212]	; (8004c60 <USB_DeactivateEndpoint+0x1b0>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]
 8004b8e:	e060      	b.n	8004c52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba6:	d11f      	bne.n	8004be8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004be6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	43db      	mvns	r3, r3
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c08:	4013      	ands	r3, r2
 8004c0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	43db      	mvns	r3, r3
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	0159      	lsls	r1, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <USB_DeactivateEndpoint+0x1b4>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	ec337800 	.word	0xec337800
 8004c64:	eff37800 	.word	0xeff37800

08004c68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 815c 	bne.w	8004f42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d132      	bne.n	8004cf8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf0:	0cdb      	lsrs	r3, r3, #19
 8004cf2:	04db      	lsls	r3, r3, #19
 8004cf4:	6113      	str	r3, [r2, #16]
 8004cf6:	e074      	b.n	8004de2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d12:	0cdb      	lsrs	r3, r3, #19
 8004d14:	04db      	lsls	r3, r3, #19
 8004d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6959      	ldr	r1, [r3, #20]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	440b      	add	r3, r1
 8004d54:	1e59      	subs	r1, r3, #1
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d5e:	04d9      	lsls	r1, r3, #19
 8004d60:	4b9d      	ldr	r3, [pc, #628]	; (8004fd8 <USB_EPStartXfer+0x370>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	0148      	lsls	r0, r1, #5
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	4401      	add	r1, r0
 8004d6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	69b9      	ldr	r1, [r7, #24]
 8004d8c:	0148      	lsls	r0, r1, #5
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	4401      	add	r1, r0
 8004d92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	78db      	ldrb	r3, [r3, #3]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d11f      	bne.n	8004de2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004dc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d14b      	bne.n	8004e80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d128      	bne.n	8004e5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d110      	bne.n	8004e3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	e00f      	b.n	8004e5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e12f      	b.n	80050e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	78db      	ldrb	r3, [r3, #3]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d015      	beq.n	8004ed4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8117 	beq.w	80050e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	69f9      	ldr	r1, [r7, #28]
 8004eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	634b      	str	r3, [r1, #52]	; 0x34
 8004ed2:	e105      	b.n	80050e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d110      	bne.n	8004f06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e00f      	b.n	8004f26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	68d9      	ldr	r1, [r3, #12]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	b298      	uxth	r0, r3
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4603      	mov	r3, r0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fa2b 	bl	8005396 <USB_WritePacket>
 8004f40:	e0ce      	b.n	80050e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	0cdb      	lsrs	r3, r3, #19
 8004f5e:	04db      	lsls	r3, r3, #19
 8004f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d126      	bne.n	8004fdc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa4:	69b9      	ldr	r1, [r7, #24]
 8004fa6:	0148      	lsls	r0, r1, #5
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	4401      	add	r1, r0
 8004fac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd2:	6113      	str	r3, [r2, #16]
 8004fd4:	e036      	b.n	8005044 <USB_EPStartXfer+0x3dc>
 8004fd6:	bf00      	nop
 8004fd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	1e5a      	subs	r2, r3, #1
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	8afb      	ldrh	r3, [r7, #22]
 8005002:	04d9      	lsls	r1, r3, #19
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <USB_EPStartXfer+0x484>)
 8005006:	400b      	ands	r3, r1
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	0148      	lsls	r0, r1, #5
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	4401      	add	r1, r0
 8005010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	8af9      	ldrh	r1, [r7, #22]
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	0148      	lsls	r0, r1, #5
 8005038:	69f9      	ldr	r1, [r7, #28]
 800503a:	4401      	add	r1, r0
 800503c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10d      	bne.n	8005066 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	460a      	mov	r2, r1
 8005064:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d128      	bne.n	80050c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d110      	bne.n	80050a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e00f      	b.n	80050c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	1ff80000 	.word	0x1ff80000

080050f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 80cd 	bne.w	80052ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d132      	bne.n	8005180 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800513c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800515c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	0cdb      	lsrs	r3, r3, #19
 800517a:	04db      	lsls	r3, r3, #19
 800517c:	6113      	str	r3, [r2, #16]
 800517e:	e04e      	b.n	800521e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	0cdb      	lsrs	r3, r3, #19
 800519c:	04db      	lsls	r3, r3, #19
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d903      	bls.n	80051d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	0148      	lsls	r0, r1, #5
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	4401      	add	r1, r0
 8005216:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800521a:	4313      	orrs	r3, r2
 800521c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d11e      	bne.n	8005262 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e092      	b.n	8005388 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005280:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d07e      	beq.n	8005388 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	2101      	movs	r1, #1
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a6:	4313      	orrs	r3, r2
 80052a8:	634b      	str	r3, [r1, #52]	; 0x34
 80052aa:	e06d      	b.n	8005388 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c6:	0cdb      	lsrs	r3, r3, #19
 80052c8:	04db      	lsls	r3, r3, #19
 80052ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	0148      	lsls	r0, r1, #5
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	4401      	add	r1, r0
 800533e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005342:	4313      	orrs	r3, r2
 8005344:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10d      	bne.n	8005368 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68d9      	ldr	r1, [r3, #12]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	460a      	mov	r2, r1
 8005366:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005396:	b480      	push	{r7}
 8005398:	b089      	sub	sp, #36	; 0x24
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	4611      	mov	r1, r2
 80053a2:	461a      	mov	r2, r3
 80053a4:	460b      	mov	r3, r1
 80053a6:	71fb      	strb	r3, [r7, #7]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11a      	bne.n	80053f2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053bc:	88bb      	ldrh	r3, [r7, #4]
 80053be:	3303      	adds	r3, #3
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e00f      	b.n	80053ea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	031a      	lsls	r2, r3, #12
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d6:	461a      	mov	r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3304      	adds	r3, #4
 80053e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3eb      	bcc.n	80053ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3724      	adds	r7, #36	; 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	3303      	adds	r3, #3
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e00b      	b.n	800543c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3304      	adds	r3, #4
 8005434:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3301      	adds	r3, #1
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d3ef      	bcc.n	8005424 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005444:	69fb      	ldr	r3, [r7, #28]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3724      	adds	r7, #36	; 0x24
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d12c      	bne.n	80054c8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	db12      	blt.n	80054a6 <USB_EPSetStall+0x54>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e02b      	b.n	8005520 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	db12      	blt.n	8005500 <USB_EPSetStall+0xae>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00f      	beq.n	8005500 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800551e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d128      	bne.n	800559c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005568:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d003      	beq.n	800557a <USB_EPClearStall+0x4c>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	78db      	ldrb	r3, [r3, #3]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d138      	bne.n	80055ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e027      	b.n	80055ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d003      	beq.n	80055cc <USB_EPClearStall+0x9e>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	78db      	ldrb	r3, [r3, #3]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d10f      	bne.n	80055ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005618:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800561c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005660:	f023 0302 	bic.w	r3, r3, #2
 8005664:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005666:	2003      	movs	r0, #3
 8005668:	f7fc fdbc 	bl	80021e4 <HAL_Delay>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005696:	2003      	movs	r0, #3
 8005698:	f7fc fda4 	bl	80021e4 <HAL_Delay>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4013      	ands	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	0c1b      	lsrs	r3, r3, #16
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	b29b      	uxth	r3, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005762:	68bb      	ldr	r3, [r7, #8]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	01db      	lsls	r3, r3, #7
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057be:	68bb      	ldr	r3, [r7, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0301 	and.w	r3, r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800581a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	460b      	mov	r3, r1
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	333c      	adds	r3, #60	; 0x3c
 8005846:	3304      	adds	r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <USB_EP0_OutStart+0xb8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d90a      	bls.n	800586a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005864:	d101      	bne.n	800586a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e037      	b.n	80058da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f043 0318 	orr.w	r3, r3, #24
 800589c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10f      	bne.n	80058d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	4f54300a 	.word	0x4f54300a

080058ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <USB_CoreReset+0x64>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e01b      	b.n	8005942 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	daf2      	bge.n	80058f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f043 0201 	orr.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <USB_CoreReset+0x64>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e006      	b.n	8005942 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d0f0      	beq.n	8005922 <USB_CoreReset+0x36>

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	00030d40 	.word	0x00030d40

08005954 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005960:	2018      	movs	r0, #24
 8005962:	f001 ffe3 	bl	800792c <malloc>
 8005966:	4603      	mov	r3, r0
 8005968:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005978:	2302      	movs	r3, #2
 800597a:	e038      	b.n	80059ee <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7c1b      	ldrb	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2205      	movs	r2, #5
 8005990:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2205      	movs	r2, #5
 8005996:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800599a:	e006      	b.n	80059aa <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2205      	movs	r2, #5
 80059a0:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2205      	movs	r2, #5
 80059a6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80059aa:	2302      	movs	r3, #2
 80059ac:	2203      	movs	r2, #3
 80059ae:	2181      	movs	r1, #129	; 0x81
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fe54 	bl	800765e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80059bc:	2302      	movs	r3, #2
 80059be:	2203      	movs	r2, #3
 80059c0:	2101      	movs	r1, #1
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fe4b 	bl	800765e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	2302      	movs	r3, #2
 80059e4:	2101      	movs	r1, #1
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 ff28 	bl	800783c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005a02:	2181      	movs	r1, #129	; 0x81
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fe50 	bl	80076aa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005a16:	2101      	movs	r1, #1
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fe46 	bl	80076aa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 ff77 	bl	800793c <free>
    pdev->pClassData = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a70:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d051      	beq.n	8005b32 <USBD_CUSTOM_HID_Setup+0xd2>
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 80d9 	bne.w	8005c46 <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	3b02      	subs	r3, #2
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d841      	bhi.n	8005b22 <USBD_CUSTOM_HID_Setup+0xc2>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <USBD_CUSTOM_HID_Setup+0x44>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005adb 	.word	0x08005adb
 8005aac:	08005b23 	.word	0x08005b23
 8005ab0:	08005b23 	.word	0x08005b23
 8005ab4:	08005b23 	.word	0x08005b23
 8005ab8:	08005b23 	.word	0x08005b23
 8005abc:	08005b23 	.word	0x08005b23
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005acd 	.word	0x08005acd
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	885b      	ldrh	r3, [r3, #2]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	605a      	str	r2, [r3, #4]
      break;
 8005ad8:	e02a      	b.n	8005b30 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fa2d 	bl	8006f42 <USBD_CtlSendData>
      break;
 8005ae8:	e022      	b.n	8005b30 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	885b      	ldrh	r3, [r3, #2]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	609a      	str	r2, [r3, #8]
      break;
 8005afa:	e019      	b.n	8005b30 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	3308      	adds	r3, #8
 8005b00:	2201      	movs	r2, #1
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fa1c 	bl	8006f42 <USBD_CtlSendData>
      break;
 8005b0a:	e011      	b.n	8005b30 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005b12:	6939      	ldr	r1, [r7, #16]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 fa3d 	bl	8006f9a <USBD_CtlPrepareRx>
      break;
 8005b20:	e006      	b.n	8005b30 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 f99b 	bl	8006e60 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2e:	bf00      	nop
    }
    break;
 8005b30:	e090      	b.n	8005c54 <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b0b      	cmp	r3, #11
 8005b38:	d87c      	bhi.n	8005c34 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b71 	.word	0x08005b71
 8005b44:	08005c43 	.word	0x08005c43
 8005b48:	08005c35 	.word	0x08005c35
 8005b4c:	08005c35 	.word	0x08005c35
 8005b50:	08005c35 	.word	0x08005c35
 8005b54:	08005c35 	.word	0x08005c35
 8005b58:	08005b99 	.word	0x08005b99
 8005b5c:	08005c35 	.word	0x08005c35
 8005b60:	08005c35 	.word	0x08005c35
 8005b64:	08005c35 	.word	0x08005c35
 8005b68:	08005be7 	.word	0x08005be7
 8005b6c:	08005c0f 	.word	0x08005c0f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d107      	bne.n	8005b8a <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b7a:	f107 030e 	add.w	r3, r7, #14
 8005b7e:	2202      	movs	r2, #2
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f9dd 	bl	8006f42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b88:	e05c      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f967 	bl	8006e60 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b92:	2303      	movs	r3, #3
 8005b94:	75fb      	strb	r3, [r7, #23]
      break;
 8005b96:	e055      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	885b      	ldrh	r3, [r3, #2]
 8005b9c:	0a1b      	lsrs	r3, r3, #8
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b22      	cmp	r3, #34	; 0x22
 8005ba2:	d10b      	bne.n	8005bbc <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	88db      	ldrh	r3, [r3, #6]
 8005ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8005baa:	bf28      	it	cs
 8005bac:	232e      	movcs	r3, #46	; 0x2e
 8005bae:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e00d      	b.n	8005bd8 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	885b      	ldrh	r3, [r3, #2]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d107      	bne.n	8005bd8 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <USBD_CUSTOM_HID_Setup+0x200>)
 8005bca:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	88db      	ldrh	r3, [r3, #6]
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	bf28      	it	cs
 8005bd4:	2309      	movcs	r3, #9
 8005bd6:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f9af 	bl	8006f42 <USBD_CtlSendData>
      break;
 8005be4:	e02e      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d107      	bne.n	8005c00 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f9a2 	bl	8006f42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bfe:	e021      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f92c 	bl	8006e60 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e01a      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d106      	bne.n	8005c26 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c24:	e00e      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f919 	bl	8006e60 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	75fb      	strb	r3, [r7, #23]
      break;
 8005c32:	e007      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 f912 	bl	8006e60 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c40:	e000      	b.n	8005c44 <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 8005c42:	bf00      	nop
    }
    break;
 8005c44:	e006      	b.n	8005c54 <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f909 	bl	8006e60 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	75fb      	strb	r3, [r7, #23]
    break;
 8005c52:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200000c8 	.word	0x200000c8

08005c64 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e019      	b.n	8005cb4 <USBD_CUSTOM_HID_SendReport+0x50>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c86:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d10f      	bne.n	8005cb2 <USBD_CUSTOM_HID_SendReport+0x4e>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	7d1b      	ldrb	r3, [r3, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <USBD_CUSTOM_HID_SendReport+0x4a>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	2181      	movs	r1, #129	; 0x81
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f001 fda7 	bl	80077fa <USBD_LL_Transmit>
 8005cac:	e001      	b.n	8005cb2 <USBD_CUSTOM_HID_SendReport+0x4e>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <USBD_CUSTOM_HID_SendReport+0x50>
    }
  }
  return (uint8_t)USBD_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2229      	movs	r2, #41	; 0x29
 8005cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005cca:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	20000044 	.word	0x20000044

08005cdc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2229      	movs	r2, #41	; 0x29
 8005ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000070 	.word	0x20000070

08005cfc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2229      	movs	r2, #41	; 0x29
 8005d08:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	2000009c 	.word	0x2000009c

08005d1c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2e:	2200      	movs	r2, #0
 8005d30:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e00e      	b.n	8005d78 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d60:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	7810      	ldrb	r0, [r2, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	7852      	ldrb	r2, [r2, #1]
 8005d72:	4611      	mov	r1, r2
 8005d74:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e00a      	b.n	8005dac <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	2302      	movs	r3, #2
 8005da2:	2101      	movs	r1, #1
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fd49 	bl	800783c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10c      	bne.n	8005de6 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	7810      	ldrb	r0, [r2, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	7852      	ldrb	r2, [r2, #1]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	200000d4 	.word	0x200000d4

08005e10 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e004      	b.n	8005e2e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e025      	b.n	8005e9e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	79fa      	ldrb	r2, [r7, #7]
 8005e90:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f001 fb7c 	bl	8007590 <USBD_LL_Init>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e010      	b.n	8005ee0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f107 020e 	add.w	r2, r7, #14
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4798      	blx	r3
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fb99 	bl	8007628 <USBD_LL_Start>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f22:	2303      	movs	r3, #3
 8005f24:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
  }

  return USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 ff2b 	bl	8006dec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d00e      	beq.n	8005fd8 <USBD_LL_SetupStage+0x5a>
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d302      	bcc.n	8005fc4 <USBD_LL_SetupStage+0x46>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d014      	beq.n	8005fec <USBD_LL_SetupStage+0x6e>
 8005fc2:	e01d      	b.n	8006000 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fa17 	bl	8006400 <USBD_StdDevReq>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd6:	e020      	b.n	800601a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa7b 	bl	80064dc <USBD_StdItfReq>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fea:	e016      	b.n	800601a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fab7 	bl	8006568 <USBD_StdEPReq>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffe:	e00c      	b.n	800601a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006006:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fb6a 	bl	80076e8 <USBD_LL_StallEP>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	bf00      	nop
  }

  return ret;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	460b      	mov	r3, r1
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d137      	bne.n	80060a8 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800603e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006046:	2b03      	cmp	r3, #3
 8006048:	d14a      	bne.n	80060e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	429a      	cmp	r2, r3
 8006054:	d913      	bls.n	800607e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4293      	cmp	r3, r2
 800606e:	bf28      	it	cs
 8006070:	4613      	movcs	r3, r2
 8006072:	461a      	mov	r2, r3
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 ffac 	bl	8006fd4 <USBD_CtlContinueRx>
 800607c:	e030      	b.n	80060e0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006090:	2b03      	cmp	r3, #3
 8006092:	d105      	bne.n	80060a0 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 ffa8 	bl	8006ff6 <USBD_CtlSendStatus>
 80060a6:	e01b      	b.n	80060e0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d013      	beq.n	80060dc <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d10e      	bne.n	80060dc <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	7afa      	ldrb	r2, [r7, #11]
 80060c8:	4611      	mov	r1, r2
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	4798      	blx	r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	e002      	b.n	80060e2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	e000      	b.n	80060e2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	460b      	mov	r3, r1
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060f8:	7afb      	ldrb	r3, [r7, #11]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d16a      	bne.n	80061d4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3314      	adds	r3, #20
 8006102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800610a:	2b02      	cmp	r3, #2
 800610c:	d155      	bne.n	80061ba <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	429a      	cmp	r2, r3
 8006118:	d914      	bls.n	8006144 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	461a      	mov	r2, r3
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 ff21 	bl	8006f78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006136:	2300      	movs	r3, #0
 8006138:	2200      	movs	r2, #0
 800613a:	2100      	movs	r1, #0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f001 fb7d 	bl	800783c <USBD_LL_PrepareReceive>
 8006142:	e03a      	b.n	80061ba <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	d11c      	bne.n	800618a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006158:	429a      	cmp	r2, r3
 800615a:	d316      	bcc.n	800618a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006166:	429a      	cmp	r2, r3
 8006168:	d20f      	bcs.n	800618a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 ff02 	bl	8006f78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800617c:	2300      	movs	r3, #0
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 fb5a 	bl	800783c <USBD_LL_PrepareReceive>
 8006188:	e017      	b.n	80061ba <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800619c:	2b03      	cmp	r3, #3
 800619e:	d105      	bne.n	80061ac <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fa9a 	bl	80076e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 ff31 	bl	800701c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d123      	bne.n	800620c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fe9b 	bl	8005f00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061d2:	e01b      	b.n	800620c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d013      	beq.n	8006208 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d10e      	bne.n	8006208 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	7afa      	ldrb	r2, [r7, #11]
 80061f4:	4611      	mov	r1, r2
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	4798      	blx	r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	e002      	b.n	800620e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006208:	2303      	movs	r3, #3
 800620a:	e000      	b.n	800620e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6852      	ldr	r2, [r2, #4]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	4611      	mov	r1, r2
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800625a:	2340      	movs	r3, #64	; 0x40
 800625c:	2200      	movs	r2, #0
 800625e:	2100      	movs	r1, #0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f9fc 	bl	800765e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2240      	movs	r2, #64	; 0x40
 8006272:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	2200      	movs	r2, #0
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f9ee 	bl	800765e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2204      	movs	r2, #4
 80062d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d105      	bne.n	8006300 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	2b03      	cmp	r3, #3
 800631e:	d10b      	bne.n	8006338 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6852      	ldr	r2, [r2, #4]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	4611      	mov	r1, r2
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
  }

  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	3301      	adds	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063e2:	8a3b      	ldrh	r3, [r7, #16]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	b21a      	sxth	r2, r3
 80063e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063f2:	89fb      	ldrh	r3, [r7, #14]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006416:	2b20      	cmp	r3, #32
 8006418:	d004      	beq.n	8006424 <USBD_StdDevReq+0x24>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d002      	beq.n	8006424 <USBD_StdDevReq+0x24>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <USBD_StdDevReq+0x38>
 8006422:	e050      	b.n	80064c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
    break;
 8006436:	e04b      	b.n	80064d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b09      	cmp	r3, #9
 800643e:	d83c      	bhi.n	80064ba <USBD_StdDevReq+0xba>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USBD_StdDevReq+0x48>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800649d 	.word	0x0800649d
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064bb 	.word	0x080064bb
 8006454:	080064a7 	.word	0x080064a7
 8006458:	080064bb 	.word	0x080064bb
 800645c:	0800647b 	.word	0x0800647b
 8006460:	08006471 	.word	0x08006471
 8006464:	080064bb 	.word	0x080064bb
 8006468:	08006493 	.word	0x08006493
 800646c:	08006485 	.word	0x08006485
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9ce 	bl	8006814 <USBD_GetDescriptor>
      break;
 8006478:	e024      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fb33 	bl	8006ae8 <USBD_SetAddress>
      break;
 8006482:	e01f      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb70 	bl	8006b6c <USBD_SetConfig>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e018      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc0d 	bl	8006cb4 <USBD_GetConfig>
      break;
 800649a:	e013      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fc3c 	bl	8006d1c <USBD_GetStatus>
      break;
 80064a4:	e00e      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fc6a 	bl	8006d82 <USBD_SetFeature>
      break;
 80064ae:	e009      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fc79 	bl	8006daa <USBD_ClrFeature>
      break;
 80064b8:	e004      	b.n	80064c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fccf 	bl	8006e60 <USBD_CtlError>
      break;
 80064c2:	bf00      	nop
    }
    break;
 80064c4:	e004      	b.n	80064d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fcc9 	bl	8006e60 <USBD_CtlError>
    break;
 80064ce:	bf00      	nop
  }

  return ret;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop

080064dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d003      	beq.n	80064fe <USBD_StdItfReq+0x22>
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d001      	beq.n	80064fe <USBD_StdItfReq+0x22>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d12a      	bne.n	8006554 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006504:	3b01      	subs	r3, #1
 8006506:	2b02      	cmp	r3, #2
 8006508:	d81d      	bhi.n	8006546 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d813      	bhi.n	800653c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	88db      	ldrh	r3, [r3, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d110      	bne.n	8006550 <USBD_StdItfReq+0x74>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10d      	bne.n	8006550 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd5e 	bl	8006ff6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800653a:	e009      	b.n	8006550 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fc8e 	bl	8006e60 <USBD_CtlError>
      break;
 8006544:	e004      	b.n	8006550 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc89 	bl	8006e60 <USBD_CtlError>
      break;
 800654e:	e000      	b.n	8006552 <USBD_StdItfReq+0x76>
      break;
 8006550:	bf00      	nop
    }
    break;
 8006552:	e004      	b.n	800655e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc82 	bl	8006e60 <USBD_CtlError>
    break;
 800655c:	bf00      	nop
  }

  return ret;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006584:	2b20      	cmp	r3, #32
 8006586:	d004      	beq.n	8006592 <USBD_StdEPReq+0x2a>
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d002      	beq.n	8006592 <USBD_StdEPReq+0x2a>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <USBD_StdEPReq+0x3e>
 8006590:	e135      	b.n	80067fe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
    break;
 80065a4:	e130      	b.n	8006808 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d03e      	beq.n	800662c <USBD_StdEPReq+0xc4>
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d002      	beq.n	80065b8 <USBD_StdEPReq+0x50>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d077      	beq.n	80066a6 <USBD_StdEPReq+0x13e>
 80065b6:	e11c      	b.n	80067f2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d002      	beq.n	80065c8 <USBD_StdEPReq+0x60>
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d015      	beq.n	80065f2 <USBD_StdEPReq+0x8a>
 80065c6:	e02b      	b.n	8006620 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <USBD_StdEPReq+0x80>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d009      	beq.n	80065e8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f885 	bl	80076e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f881 	bl	80076e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80065e6:	e020      	b.n	800662a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fc38 	bl	8006e60 <USBD_CtlError>
        break;
 80065f0:	e01b      	b.n	800662a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10e      	bne.n	8006618 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_StdEPReq+0xb0>
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d008      	beq.n	8006618 <USBD_StdEPReq+0xb0>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	88db      	ldrh	r3, [r3, #6]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 f868 	bl	80076e8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fcec 	bl	8006ff6 <USBD_CtlSendStatus>

        break;
 800661e:	e004      	b.n	800662a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fc1c 	bl	8006e60 <USBD_CtlError>
        break;
 8006628:	bf00      	nop
      }
      break;
 800662a:	e0e7      	b.n	80067fc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006632:	2b02      	cmp	r3, #2
 8006634:	d002      	beq.n	800663c <USBD_StdEPReq+0xd4>
 8006636:	2b03      	cmp	r3, #3
 8006638:	d015      	beq.n	8006666 <USBD_StdEPReq+0xfe>
 800663a:	e02d      	b.n	8006698 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <USBD_StdEPReq+0xf4>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d009      	beq.n	800665c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f84b 	bl	80076e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f847 	bl	80076e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800665a:	e023      	b.n	80066a4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fbfe 	bl	8006e60 <USBD_CtlError>
        break;
 8006664:	e01e      	b.n	80066a4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d119      	bne.n	80066a2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 f852 	bl	8007726 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fcb7 	bl	8006ff6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
        }
        break;
 8006696:	e004      	b.n	80066a2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fbe0 	bl	8006e60 <USBD_CtlError>
        break;
 80066a0:	e000      	b.n	80066a4 <USBD_StdEPReq+0x13c>
        break;
 80066a2:	bf00      	nop
      }
      break;
 80066a4:	e0aa      	b.n	80067fc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d002      	beq.n	80066b6 <USBD_StdEPReq+0x14e>
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d032      	beq.n	800671a <USBD_StdEPReq+0x1b2>
 80066b4:	e097      	b.n	80067e6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <USBD_StdEPReq+0x164>
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d004      	beq.n	80066cc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fbcb 	bl	8006e60 <USBD_CtlError>
          break;
 80066ca:	e091      	b.n	80067f0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da0b      	bge.n	80066ec <USBD_StdEPReq+0x184>
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	3310      	adds	r3, #16
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	3304      	adds	r3, #4
 80066ea:	e00b      	b.n	8006704 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	3304      	adds	r3, #4
 8006704:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2202      	movs	r2, #2
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fc15 	bl	8006f42 <USBD_CtlSendData>
        break;
 8006718:	e06a      	b.n	80067f0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800671a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800671e:	2b00      	cmp	r3, #0
 8006720:	da11      	bge.n	8006746 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	f003 020f 	and.w	r2, r3, #15
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3324      	adds	r3, #36	; 0x24
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d117      	bne.n	800676c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb8e 	bl	8006e60 <USBD_CtlError>
            break;
 8006744:	e054      	b.n	80067f0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb7b 	bl	8006e60 <USBD_CtlError>
            break;
 800676a:	e041      	b.n	80067f0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006770:	2b00      	cmp	r3, #0
 8006772:	da0b      	bge.n	800678c <USBD_StdEPReq+0x224>
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	3310      	adds	r3, #16
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	3304      	adds	r3, #4
 800678a:	e00b      	b.n	80067a4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	3304      	adds	r3, #4
 80067a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <USBD_StdEPReq+0x24a>
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d103      	bne.n	80067ba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e00e      	b.n	80067d8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 ffd0 	bl	8007764 <USBD_LL_IsStallEP>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e002      	b.n	80067d8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2202      	movs	r2, #2
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fbaf 	bl	8006f42 <USBD_CtlSendData>
          break;
 80067e4:	e004      	b.n	80067f0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fb39 	bl	8006e60 <USBD_CtlError>
        break;
 80067ee:	bf00      	nop
      }
      break;
 80067f0:	e004      	b.n	80067fc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb33 	bl	8006e60 <USBD_CtlError>
      break;
 80067fa:	bf00      	nop
    }
    break;
 80067fc:	e004      	b.n	8006808 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb2d 	bl	8006e60 <USBD_CtlError>
    break;
 8006806:	bf00      	nop
  }

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	885b      	ldrh	r3, [r3, #2]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	2b06      	cmp	r3, #6
 8006836:	f200 8128 	bhi.w	8006a8a <USBD_GetDescriptor+0x276>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <USBD_GetDescriptor+0x2c>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	0800685d 	.word	0x0800685d
 8006844:	08006875 	.word	0x08006875
 8006848:	080068b5 	.word	0x080068b5
 800684c:	08006a8b 	.word	0x08006a8b
 8006850:	08006a8b 	.word	0x08006a8b
 8006854:	08006a2b 	.word	0x08006a2b
 8006858:	08006a57 	.word	0x08006a57
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
    break;
 8006872:	e112      	b.n	8006a9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10d      	bne.n	8006898 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	f107 0208 	add.w	r2, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	2202      	movs	r2, #2
 8006894:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006896:	e100      	b.n	8006a9a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f107 0208 	add.w	r2, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
    break;
 80068b2:	e0f2      	b.n	8006a9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	f200 80ac 	bhi.w	8006a18 <USBD_GetDescriptor+0x204>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <USBD_GetDescriptor+0xb4>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006949 	.word	0x08006949
 80068d4:	0800697d 	.word	0x0800697d
 80068d8:	080069b1 	.word	0x080069b1
 80068dc:	080069e5 	.word	0x080069e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006902:	e091      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 faaa 	bl	8006e60 <USBD_CtlError>
        err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
      break;
 8006912:	e089      	b.n	8006a28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006936:	e077      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa90 	bl	8006e60 <USBD_CtlError>
        err++;
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	3301      	adds	r3, #1
 8006944:	72fb      	strb	r3, [r7, #11]
      break;
 8006946:	e06f      	b.n	8006a28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800696a:	e05d      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa76 	bl	8006e60 <USBD_CtlError>
        err++;
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	3301      	adds	r3, #1
 8006978:	72fb      	strb	r3, [r7, #11]
      break;
 800697a:	e055      	b.n	8006a28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 0108 	add.w	r1, r7, #8
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800699e:	e043      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa5c 	bl	8006e60 <USBD_CtlError>
        err++;
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	3301      	adds	r3, #1
 80069ac:	72fb      	strb	r3, [r7, #11]
      break;
 80069ae:	e03b      	b.n	8006a28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	f107 0108 	add.w	r1, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d2:	e029      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa42 	bl	8006e60 <USBD_CtlError>
        err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
      break;
 80069e2:	e021      	b.n	8006a28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7c12      	ldrb	r2, [r2, #16]
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a06:	e00f      	b.n	8006a28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa28 	bl	8006e60 <USBD_CtlError>
        err++;
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	3301      	adds	r3, #1
 8006a14:	72fb      	strb	r3, [r7, #11]
      break;
 8006a16:	e007      	b.n	8006a28 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa20 	bl	8006e60 <USBD_CtlError>
      err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a26:	bf00      	nop
    }
    break;
 8006a28:	e037      	b.n	8006a9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7c1b      	ldrb	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	f107 0208 	add.w	r2, r7, #8
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4798      	blx	r3
 8006a42:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a44:	e029      	b.n	8006a9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa09 	bl	8006e60 <USBD_CtlError>
      err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
    break;
 8006a54:	e021      	b.n	8006a9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7c1b      	ldrb	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f107 0208 	add.w	r2, r7, #8
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4798      	blx	r3
 8006a6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	2207      	movs	r2, #7
 8006a76:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a78:	e00f      	b.n	8006a9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f9ef 	bl	8006e60 <USBD_CtlError>
      err++;
 8006a82:	7afb      	ldrb	r3, [r7, #11]
 8006a84:	3301      	adds	r3, #1
 8006a86:	72fb      	strb	r3, [r7, #11]
    break;
 8006a88:	e007      	b.n	8006a9a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9e7 	bl	8006e60 <USBD_CtlError>
    err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
    break;
 8006a98:	bf00      	nop
  }

  if (err != 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11e      	bne.n	8006ade <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	88db      	ldrh	r3, [r3, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d016      	beq.n	8006ad6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	88da      	ldrh	r2, [r3, #6]
 8006ab2:	893b      	ldrh	r3, [r7, #8]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bf28      	it	cs
 8006ab8:	4613      	movcs	r3, r2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006abe:	893b      	ldrh	r3, [r7, #8]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa3c 	bl	8006f42 <USBD_CtlSendData>
 8006aca:	e009      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9c6 	bl	8006e60 <USBD_CtlError>
 8006ad4:	e004      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa8d 	bl	8006ff6 <USBD_CtlSendStatus>
 8006adc:	e000      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
    return;
 8006ade:	bf00      	nop
    }
  }
}
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	889b      	ldrh	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d130      	bne.n	8006b5c <USBD_SetAddress+0x74>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d12c      	bne.n	8006b5c <USBD_SetAddress+0x74>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	2b7f      	cmp	r3, #127	; 0x7f
 8006b08:	d828      	bhi.n	8006b5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d104      	bne.n	8006b2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f99c 	bl	8006e60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	e01c      	b.n	8006b64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7bfa      	ldrb	r2, [r7, #15]
 8006b2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fe40 	bl	80077bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa5a 	bl	8006ff6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	e008      	b.n	8006b64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	e003      	b.n	8006b64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f97e 	bl	8006e60 <USBD_CtlError>
  }
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	885b      	ldrh	r3, [r3, #2]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	4b4b      	ldr	r3, [pc, #300]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006b82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b84:	4b4a      	ldr	r3, [pc, #296]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d905      	bls.n	8006b98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f966 	bl	8006e60 <USBD_CtlError>
    return USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e087      	b.n	8006ca8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d002      	beq.n	8006ba8 <USBD_SetConfig+0x3c>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d025      	beq.n	8006bf2 <USBD_SetConfig+0x86>
 8006ba6:	e071      	b.n	8006c8c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006ba8:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01c      	beq.n	8006bea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006bb0:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bba:	4b3d      	ldr	r3, [pc, #244]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff f9a8 	bl	8005f16 <USBD_SetClassConfig>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f944 	bl	8006e60 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006bd8:	e065      	b.n	8006ca6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa0b 	bl	8006ff6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2203      	movs	r2, #3
 8006be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006be8:	e05d      	b.n	8006ca6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa03 	bl	8006ff6 <USBD_CtlSendStatus>
    break;
 8006bf0:	e059      	b.n	8006ca6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006bf2:	4b2f      	ldr	r3, [pc, #188]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d112      	bne.n	8006c20 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c02:	4b2b      	ldr	r3, [pc, #172]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c0c:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff f99b 	bl	8005f4e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9ec 	bl	8006ff6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c1e:	e042      	b.n	8006ca6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d02a      	beq.n	8006c84 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff f989 	bl	8005f4e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c3c:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c46:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff f962 	bl	8005f16 <USBD_SetClassConfig>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00f      	beq.n	8006c7c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8fe 	bl	8006e60 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f96e 	bl	8005f4e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c7a:	e014      	b.n	8006ca6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9ba 	bl	8006ff6 <USBD_CtlSendStatus>
    break;
 8006c82:	e010      	b.n	8006ca6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f9b6 	bl	8006ff6 <USBD_CtlSendStatus>
    break;
 8006c8a:	e00c      	b.n	8006ca6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8e6 	bl	8006e60 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <USBD_SetConfig+0x144>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff f957 	bl	8005f4e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca4:	bf00      	nop
  }

  return ret;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	200001f8 	.word	0x200001f8

08006cb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88db      	ldrh	r3, [r3, #6]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d004      	beq.n	8006cd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8c9 	bl	8006e60 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006cce:	e021      	b.n	8006d14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	db17      	blt.n	8006d0a <USBD_GetConfig+0x56>
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	dd02      	ble.n	8006ce4 <USBD_GetConfig+0x30>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d00b      	beq.n	8006cfa <USBD_GetConfig+0x46>
 8006ce2:	e012      	b.n	8006d0a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3308      	adds	r3, #8
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f925 	bl	8006f42 <USBD_CtlSendData>
      break;
 8006cf8:	e00c      	b.n	8006d14 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f91d 	bl	8006f42 <USBD_CtlSendData>
      break;
 8006d08:	e004      	b.n	8006d14 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8a7 	bl	8006e60 <USBD_CtlError>
      break;
 8006d12:	bf00      	nop
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d81e      	bhi.n	8006d70 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	88db      	ldrh	r3, [r3, #6]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d004      	beq.n	8006d44 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f88f 	bl	8006e60 <USBD_CtlError>
      break;
 8006d42:	e01a      	b.n	8006d7a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f043 0202 	orr.w	r2, r3, #2
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	330c      	adds	r3, #12
 8006d64:	2202      	movs	r2, #2
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f8ea 	bl	8006f42 <USBD_CtlSendData>
    break;
 8006d6e:	e004      	b.n	8006d7a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f874 	bl	8006e60 <USBD_CtlError>
    break;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d106      	bne.n	8006da2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f92a 	bl	8006ff6 <USBD_CtlSendStatus>
  }
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d80b      	bhi.n	8006dd8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10c      	bne.n	8006de2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f910 	bl	8006ff6 <USBD_CtlSendStatus>
      }
      break;
 8006dd6:	e004      	b.n	8006de2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f840 	bl	8006e60 <USBD_CtlError>
      break;
 8006de0:	e000      	b.n	8006de4 <USBD_ClrFeature+0x3a>
      break;
 8006de2:	bf00      	nop
  }
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fad4 	bl	80063c4 <SWAPBYTE>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fac7 	bl	80063c4 <SWAPBYTE>
 8006e36:	4603      	mov	r3, r0
 8006e38:	461a      	mov	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff faba 	bl	80063c4 <SWAPBYTE>
 8006e50:	4603      	mov	r3, r0
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	80da      	strh	r2, [r3, #6]
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e6a:	2180      	movs	r1, #128	; 0x80
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fc3b 	bl	80076e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc37 	bl	80076e8 <USBD_LL_StallEP>
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d036      	beq.n	8006f06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e9c:	6938      	ldr	r0, [r7, #16]
 8006e9e:	f000 f836 	bl	8006f0e <USBD_GetLen>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	2203      	movs	r2, #3
 8006eca:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ed2:	e013      	b.n	8006efc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	613b      	str	r3, [r7, #16]
    idx++;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e7      	bne.n	8006ed4 <USBD_GetString+0x52>
 8006f04:	e000      	b.n	8006f08 <USBD_GetString+0x86>
    return;
 8006f06:	bf00      	nop
  }
}
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f1e:	e005      	b.n	8006f2c <USBD_GetLen+0x1e>
  {
    len++;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	3301      	adds	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f5      	bne.n	8006f20 <USBD_GetLen+0x12>
  }

  return len;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	2100      	movs	r1, #0
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fc46 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fc35 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fc39 	bl	800783c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fc28 	bl	800783c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007006:	2300      	movs	r3, #0
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fbf4 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2205      	movs	r2, #5
 8007028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800702c:	2300      	movs	r3, #0
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fc02 	bl	800783c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007048:	2200      	movs	r2, #0
 800704a:	4912      	ldr	r1, [pc, #72]	; (8007094 <MX_USB_DEVICE_Init+0x50>)
 800704c:	4812      	ldr	r0, [pc, #72]	; (8007098 <MX_USB_DEVICE_Init+0x54>)
 800704e:	f7fe fef4 	bl	8005e3a <USBD_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007058:	f7fa ff7e 	bl	8001f58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800705c:	490f      	ldr	r1, [pc, #60]	; (800709c <MX_USB_DEVICE_Init+0x58>)
 800705e:	480e      	ldr	r0, [pc, #56]	; (8007098 <MX_USB_DEVICE_Init+0x54>)
 8007060:	f7fe ff21 	bl	8005ea6 <USBD_RegisterClass>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800706a:	f7fa ff75 	bl	8001f58 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800706e:	490c      	ldr	r1, [pc, #48]	; (80070a0 <MX_USB_DEVICE_Init+0x5c>)
 8007070:	4809      	ldr	r0, [pc, #36]	; (8007098 <MX_USB_DEVICE_Init+0x54>)
 8007072:	f7fe fecd 	bl	8005e10 <USBD_CUSTOM_HID_RegisterInterface>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800707c:	f7fa ff6c 	bl	8001f58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007080:	4805      	ldr	r0, [pc, #20]	; (8007098 <MX_USB_DEVICE_Init+0x54>)
 8007082:	f7fe ff31 	bl	8005ee8 <USBD_Start>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800708c:	f7fa ff64 	bl	8001f58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007090:	bf00      	nop
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000120 	.word	0x20000120
 8007098:	20000218 	.word	0x20000218
 800709c:	2000000c 	.word	0x2000000c
 80070a0:	20000110 	.word	0x20000110

080070a4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80070b8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	460a      	mov	r2, r1
 80070ce:	71fb      	strb	r3, [r7, #7]
 80070d0:	4613      	mov	r3, r2
 80070d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80070d4:	4803      	ldr	r0, [pc, #12]	; (80070e4 <CUSTOM_HID_OutEvent_FS+0x20>)
 80070d6:	f7fe fe53 	bl	8005d80 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80070da:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000218 	.word	0x20000218

080070e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2212      	movs	r2, #18
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	2000013c 	.word	0x2000013c

0800710c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2204      	movs	r2, #4
 800711c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800711e:	4b03      	ldr	r3, [pc, #12]	; (800712c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	20000150 	.word	0x20000150

08007130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4907      	ldr	r1, [pc, #28]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007146:	4808      	ldr	r0, [pc, #32]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007148:	f7ff fe9b 	bl	8006e82 <USBD_GetString>
 800714c:	e004      	b.n	8007158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
 8007152:	4805      	ldr	r0, [pc, #20]	; (8007168 <USBD_FS_ProductStrDescriptor+0x38>)
 8007154:	f7ff fe95 	bl	8006e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200004e8 	.word	0x200004e8
 8007168:	08007ae8 	.word	0x08007ae8

0800716c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4904      	ldr	r1, [pc, #16]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800717c:	4804      	ldr	r0, [pc, #16]	; (8007190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800717e:	f7ff fe80 	bl	8006e82 <USBD_GetString>
  return USBD_StrDesc;
 8007182:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200004e8 	.word	0x200004e8
 8007190:	08007b08 	.word	0x08007b08

08007194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	221a      	movs	r2, #26
 80071a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071a6:	f000 f843 	bl	8007230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071aa:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000154 	.word	0x20000154

080071b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4907      	ldr	r1, [pc, #28]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ce:	4808      	ldr	r0, [pc, #32]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071d0:	f7ff fe57 	bl	8006e82 <USBD_GetString>
 80071d4:	e004      	b.n	80071e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4904      	ldr	r1, [pc, #16]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80071da:	4805      	ldr	r0, [pc, #20]	; (80071f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071dc:	f7ff fe51 	bl	8006e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200004e8 	.word	0x200004e8
 80071f0:	08007b1c 	.word	0x08007b1c

080071f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4907      	ldr	r1, [pc, #28]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800720a:	4808      	ldr	r0, [pc, #32]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800720c:	f7ff fe39 	bl	8006e82 <USBD_GetString>
 8007210:	e004      	b.n	800721c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007218:	f7ff fe33 	bl	8006e82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	200004e8 	.word	0x200004e8
 800722c:	08007b30 	.word	0x08007b30

08007230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <Get_SerialNum+0x44>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <Get_SerialNum+0x48>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <Get_SerialNum+0x4c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007256:	2208      	movs	r2, #8
 8007258:	4909      	ldr	r1, [pc, #36]	; (8007280 <Get_SerialNum+0x50>)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f814 	bl	8007288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007260:	2204      	movs	r2, #4
 8007262:	4908      	ldr	r1, [pc, #32]	; (8007284 <Get_SerialNum+0x54>)
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f000 f80f 	bl	8007288 <IntToUnicode>
  }
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	1fff7a10 	.word	0x1fff7a10
 8007278:	1fff7a14 	.word	0x1fff7a14
 800727c:	1fff7a18 	.word	0x1fff7a18
 8007280:	20000156 	.word	0x20000156
 8007284:	20000166 	.word	0x20000166

08007288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e027      	b.n	80072f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	0f1b      	lsrs	r3, r3, #28
 80072a4:	2b09      	cmp	r3, #9
 80072a6:	d80b      	bhi.n	80072c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	0f1b      	lsrs	r3, r3, #28
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	440b      	add	r3, r1
 80072b8:	3230      	adds	r2, #48	; 0x30
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e00a      	b.n	80072d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	0f1b      	lsrs	r3, r3, #28
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4619      	mov	r1, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	440b      	add	r3, r1
 80072d0:	3237      	adds	r2, #55	; 0x37
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	3301      	adds	r3, #1
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	4413      	add	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	3301      	adds	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
 80072f0:	7dfa      	ldrb	r2, [r7, #23]
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d3d3      	bcc.n	80072a0 <IntToUnicode+0x18>
  }
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007324:	d13a      	bne.n	800739c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6313      	str	r3, [r2, #48]	; 0x30
 8007336:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007342:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007348:	2302      	movs	r3, #2
 800734a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007350:	2303      	movs	r3, #3
 8007352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007354:	230a      	movs	r3, #10
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007358:	f107 0314 	add.w	r3, r7, #20
 800735c:	4619      	mov	r1, r3
 800735e:	4812      	ldr	r0, [pc, #72]	; (80073a8 <HAL_PCD_MspInit+0xa4>)
 8007360:	f7fb f874 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 800736a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736e:	6353      	str	r3, [r2, #52]	; 0x34
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	4a0a      	ldr	r2, [pc, #40]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 800737a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800737e:	6453      	str	r3, [r2, #68]	; 0x44
 8007380:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <HAL_PCD_MspInit+0xa0>)
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	2043      	movs	r0, #67	; 0x43
 8007392:	f7fb f824 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007396:	2043      	movs	r0, #67	; 0x43
 8007398:	f7fb f83d 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800739c:	bf00      	nop
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40020000 	.word	0x40020000

080073ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fe fddb 	bl	8005f7e <USBD_LL_SetupStage>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe fe13 	bl	8006024 <USBD_LL_DataOutStage>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	3348      	adds	r3, #72	; 0x48
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	4619      	mov	r1, r3
 800742e:	f7fe fe5c 	bl	80060ea <USBD_LL_DataInStage>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe ff60 	bl	800630e <USBD_LL_SOF>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800745e:	2301      	movs	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e008      	b.n	8007482 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d102      	bne.n	800747e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
 800747c:	e001      	b.n	8007482 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800747e:	f7fa fd6b 	bl	8001f58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007488:	7bfa      	ldrb	r2, [r7, #15]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe ff03 	bl	8006298 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe febc 	bl	8006216 <USBD_LL_Reset>
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fefe 	bl	80062b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <HAL_PCD_SuspendCallback+0x48>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <HAL_PCD_SuspendCallback+0x48>)
 80074e2:	f043 0306 	orr.w	r3, r3, #6
 80074e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	e000ed00 	.word	0xe000ed00

080074f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe feed 	bl	80062e2 <USBD_LL_Resume>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe ff18 	bl	800635c <USBD_LL_IsoOUTIncomplete>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fef9 	bl	8006342 <USBD_LL_IsoINIncomplete>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe ff05 	bl	8006376 <USBD_LL_DevConnected>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe ff02 	bl	800638c <USBD_LL_DevDisconnected>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d13c      	bne.n	800761a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075a0:	4a20      	ldr	r2, [pc, #128]	; (8007624 <USBD_LL_Init+0x94>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <USBD_LL_Init+0x94>)
 80075ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <USBD_LL_Init+0x94>)
 80075b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075b8:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <USBD_LL_Init+0x94>)
 80075ba:	2204      	movs	r2, #4
 80075bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <USBD_LL_Init+0x94>)
 80075c0:	2202      	movs	r2, #2
 80075c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <USBD_LL_Init+0x94>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ca:	4b16      	ldr	r3, [pc, #88]	; (8007624 <USBD_LL_Init+0x94>)
 80075cc:	2202      	movs	r2, #2
 80075ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075d0:	4b14      	ldr	r3, [pc, #80]	; (8007624 <USBD_LL_Init+0x94>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <USBD_LL_Init+0x94>)
 80075d8:	2200      	movs	r2, #0
 80075da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <USBD_LL_Init+0x94>)
 80075de:	2200      	movs	r2, #0
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <USBD_LL_Init+0x94>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <USBD_LL_Init+0x94>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075ee:	480d      	ldr	r0, [pc, #52]	; (8007624 <USBD_LL_Init+0x94>)
 80075f0:	f7fb f8f7 	bl	80027e2 <HAL_PCD_Init>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075fa:	f7fa fcad 	bl	8001f58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075fe:	2180      	movs	r1, #128	; 0x80
 8007600:	4808      	ldr	r0, [pc, #32]	; (8007624 <USBD_LL_Init+0x94>)
 8007602:	f7fc fa3c 	bl	8003a7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007606:	2240      	movs	r2, #64	; 0x40
 8007608:	2100      	movs	r1, #0
 800760a:	4806      	ldr	r0, [pc, #24]	; (8007624 <USBD_LL_Init+0x94>)
 800760c:	f7fc f9f0 	bl	80039f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007610:	2280      	movs	r2, #128	; 0x80
 8007612:	2101      	movs	r1, #1
 8007614:	4803      	ldr	r0, [pc, #12]	; (8007624 <USBD_LL_Init+0x94>)
 8007616:	f7fc f9eb 	bl	80039f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200006e8 	.word	0x200006e8

08007628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fb f9ec 	bl	8002a1c <HAL_PCD_Start>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f918 	bl	8007880 <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	4608      	mov	r0, r1
 8007668:	4611      	mov	r1, r2
 800766a:	461a      	mov	r2, r3
 800766c:	4603      	mov	r3, r0
 800766e:	70fb      	strb	r3, [r7, #3]
 8007670:	460b      	mov	r3, r1
 8007672:	70bb      	strb	r3, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007686:	78bb      	ldrb	r3, [r7, #2]
 8007688:	883a      	ldrh	r2, [r7, #0]
 800768a:	78f9      	ldrb	r1, [r7, #3]
 800768c:	f7fb fdd0 	bl	8003230 <HAL_PCD_EP_Open>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f8f2 	bl	8007880 <USBD_Get_USB_Status>
 800769c:	4603      	mov	r3, r0
 800769e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fb fe19 	bl	8003300 <HAL_PCD_EP_Close>
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f8d3 	bl	8007880 <USBD_Get_USB_Status>
 80076da:	4603      	mov	r3, r0
 80076dc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80076de:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fb fed9 	bl	80034be <HAL_PCD_EP_SetStall>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f8b4 	bl	8007880 <USBD_Get_USB_Status>
 8007718:	4603      	mov	r3, r0
 800771a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800771c:	7bbb      	ldrb	r3, [r7, #14]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fb ff1e 	bl	8003586 <HAL_PCD_EP_ClrStall>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f895 	bl	8007880 <USBD_Get_USB_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800775a:	7bbb      	ldrb	r3, [r7, #14]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007776:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da0b      	bge.n	8007798 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	333e      	adds	r3, #62	; 0x3e
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	e00b      	b.n	80077b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fb fd03 	bl	80031e6 <HAL_PCD_SetAddress>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f84a 	bl	8007880 <USBD_Get_USB_Status>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	460b      	mov	r3, r1
 8007808:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007818:	7af9      	ldrb	r1, [r7, #11]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	f7fb fe04 	bl	800342a <HAL_PCD_EP_Transmit>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f829 	bl	8007880 <USBD_Get_USB_Status>
 800782e:	4603      	mov	r3, r0
 8007830:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007832:	7dbb      	ldrb	r3, [r7, #22]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	460b      	mov	r3, r1
 800784a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800785a:	7af9      	ldrb	r1, [r7, #11]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	f7fb fd98 	bl	8003394 <HAL_PCD_EP_Receive>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f808 	bl	8007880 <USBD_Get_USB_Status>
 8007870:	4603      	mov	r3, r0
 8007872:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007874:	7dbb      	ldrb	r3, [r7, #22]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d817      	bhi.n	80078c4 <USBD_Get_USB_Status+0x44>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USBD_Get_USB_Status+0x1c>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078b3 	.word	0x080078b3
 80078a4:	080078b9 	.word	0x080078b9
 80078a8:	080078bf 	.word	0x080078bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
    break;
 80078b0:	e00b      	b.n	80078ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078b2:	2303      	movs	r3, #3
 80078b4:	73fb      	strb	r3, [r7, #15]
    break;
 80078b6:	e008      	b.n	80078ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
    break;
 80078bc:	e005      	b.n	80078ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078be:	2303      	movs	r3, #3
 80078c0:	73fb      	strb	r3, [r7, #15]
    break;
 80078c2:	e002      	b.n	80078ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
    break;
 80078c8:	bf00      	nop
  }
  return usb_status;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <__errno>:
 80078d8:	4b01      	ldr	r3, [pc, #4]	; (80078e0 <__errno+0x8>)
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20000170 	.word	0x20000170

080078e4 <__libc_init_array>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0d      	ldr	r6, [pc, #52]	; (800791c <__libc_init_array+0x38>)
 80078e8:	4c0d      	ldr	r4, [pc, #52]	; (8007920 <__libc_init_array+0x3c>)
 80078ea:	1ba4      	subs	r4, r4, r6
 80078ec:	10a4      	asrs	r4, r4, #2
 80078ee:	2500      	movs	r5, #0
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d109      	bne.n	8007908 <__libc_init_array+0x24>
 80078f4:	4e0b      	ldr	r6, [pc, #44]	; (8007924 <__libc_init_array+0x40>)
 80078f6:	4c0c      	ldr	r4, [pc, #48]	; (8007928 <__libc_init_array+0x44>)
 80078f8:	f000 f8ea 	bl	8007ad0 <_init>
 80078fc:	1ba4      	subs	r4, r4, r6
 80078fe:	10a4      	asrs	r4, r4, #2
 8007900:	2500      	movs	r5, #0
 8007902:	42a5      	cmp	r5, r4
 8007904:	d105      	bne.n	8007912 <__libc_init_array+0x2e>
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800790c:	4798      	blx	r3
 800790e:	3501      	adds	r5, #1
 8007910:	e7ee      	b.n	80078f0 <__libc_init_array+0xc>
 8007912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007916:	4798      	blx	r3
 8007918:	3501      	adds	r5, #1
 800791a:	e7f2      	b.n	8007902 <__libc_init_array+0x1e>
 800791c:	08007bc0 	.word	0x08007bc0
 8007920:	08007bc0 	.word	0x08007bc0
 8007924:	08007bc0 	.word	0x08007bc0
 8007928:	08007bc4 	.word	0x08007bc4

0800792c <malloc>:
 800792c:	4b02      	ldr	r3, [pc, #8]	; (8007938 <malloc+0xc>)
 800792e:	4601      	mov	r1, r0
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	f000 b861 	b.w	80079f8 <_malloc_r>
 8007936:	bf00      	nop
 8007938:	20000170 	.word	0x20000170

0800793c <free>:
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <free+0xc>)
 800793e:	4601      	mov	r1, r0
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	f000 b80b 	b.w	800795c <_free_r>
 8007946:	bf00      	nop
 8007948:	20000170 	.word	0x20000170

0800794c <memset>:
 800794c:	4402      	add	r2, r0
 800794e:	4603      	mov	r3, r0
 8007950:	4293      	cmp	r3, r2
 8007952:	d100      	bne.n	8007956 <memset+0xa>
 8007954:	4770      	bx	lr
 8007956:	f803 1b01 	strb.w	r1, [r3], #1
 800795a:	e7f9      	b.n	8007950 <memset+0x4>

0800795c <_free_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4605      	mov	r5, r0
 8007960:	2900      	cmp	r1, #0
 8007962:	d045      	beq.n	80079f0 <_free_r+0x94>
 8007964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007968:	1f0c      	subs	r4, r1, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfb8      	it	lt
 800796e:	18e4      	addlt	r4, r4, r3
 8007970:	f000 f8ac 	bl	8007acc <__malloc_lock>
 8007974:	4a1f      	ldr	r2, [pc, #124]	; (80079f4 <_free_r+0x98>)
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	4610      	mov	r0, r2
 800797a:	b933      	cbnz	r3, 800798a <_free_r+0x2e>
 800797c:	6063      	str	r3, [r4, #4]
 800797e:	6014      	str	r4, [r2, #0]
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007986:	f000 b8a2 	b.w	8007ace <__malloc_unlock>
 800798a:	42a3      	cmp	r3, r4
 800798c:	d90c      	bls.n	80079a8 <_free_r+0x4c>
 800798e:	6821      	ldr	r1, [r4, #0]
 8007990:	1862      	adds	r2, r4, r1
 8007992:	4293      	cmp	r3, r2
 8007994:	bf04      	itt	eq
 8007996:	681a      	ldreq	r2, [r3, #0]
 8007998:	685b      	ldreq	r3, [r3, #4]
 800799a:	6063      	str	r3, [r4, #4]
 800799c:	bf04      	itt	eq
 800799e:	1852      	addeq	r2, r2, r1
 80079a0:	6022      	streq	r2, [r4, #0]
 80079a2:	6004      	str	r4, [r0, #0]
 80079a4:	e7ec      	b.n	8007980 <_free_r+0x24>
 80079a6:	4613      	mov	r3, r2
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	b10a      	cbz	r2, 80079b0 <_free_r+0x54>
 80079ac:	42a2      	cmp	r2, r4
 80079ae:	d9fa      	bls.n	80079a6 <_free_r+0x4a>
 80079b0:	6819      	ldr	r1, [r3, #0]
 80079b2:	1858      	adds	r0, r3, r1
 80079b4:	42a0      	cmp	r0, r4
 80079b6:	d10b      	bne.n	80079d0 <_free_r+0x74>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	4401      	add	r1, r0
 80079bc:	1858      	adds	r0, r3, r1
 80079be:	4282      	cmp	r2, r0
 80079c0:	6019      	str	r1, [r3, #0]
 80079c2:	d1dd      	bne.n	8007980 <_free_r+0x24>
 80079c4:	6810      	ldr	r0, [r2, #0]
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	4401      	add	r1, r0
 80079cc:	6019      	str	r1, [r3, #0]
 80079ce:	e7d7      	b.n	8007980 <_free_r+0x24>
 80079d0:	d902      	bls.n	80079d8 <_free_r+0x7c>
 80079d2:	230c      	movs	r3, #12
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	e7d3      	b.n	8007980 <_free_r+0x24>
 80079d8:	6820      	ldr	r0, [r4, #0]
 80079da:	1821      	adds	r1, r4, r0
 80079dc:	428a      	cmp	r2, r1
 80079de:	bf04      	itt	eq
 80079e0:	6811      	ldreq	r1, [r2, #0]
 80079e2:	6852      	ldreq	r2, [r2, #4]
 80079e4:	6062      	str	r2, [r4, #4]
 80079e6:	bf04      	itt	eq
 80079e8:	1809      	addeq	r1, r1, r0
 80079ea:	6021      	streq	r1, [r4, #0]
 80079ec:	605c      	str	r4, [r3, #4]
 80079ee:	e7c7      	b.n	8007980 <_free_r+0x24>
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	200001fc 	.word	0x200001fc

080079f8 <_malloc_r>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	1ccd      	adds	r5, r1, #3
 80079fc:	f025 0503 	bic.w	r5, r5, #3
 8007a00:	3508      	adds	r5, #8
 8007a02:	2d0c      	cmp	r5, #12
 8007a04:	bf38      	it	cc
 8007a06:	250c      	movcc	r5, #12
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	db01      	blt.n	8007a12 <_malloc_r+0x1a>
 8007a0e:	42a9      	cmp	r1, r5
 8007a10:	d903      	bls.n	8007a1a <_malloc_r+0x22>
 8007a12:	230c      	movs	r3, #12
 8007a14:	6033      	str	r3, [r6, #0]
 8007a16:	2000      	movs	r0, #0
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	f000 f857 	bl	8007acc <__malloc_lock>
 8007a1e:	4a21      	ldr	r2, [pc, #132]	; (8007aa4 <_malloc_r+0xac>)
 8007a20:	6814      	ldr	r4, [r2, #0]
 8007a22:	4621      	mov	r1, r4
 8007a24:	b991      	cbnz	r1, 8007a4c <_malloc_r+0x54>
 8007a26:	4c20      	ldr	r4, [pc, #128]	; (8007aa8 <_malloc_r+0xb0>)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	b91b      	cbnz	r3, 8007a34 <_malloc_r+0x3c>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 f83d 	bl	8007aac <_sbrk_r>
 8007a32:	6020      	str	r0, [r4, #0]
 8007a34:	4629      	mov	r1, r5
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 f838 	bl	8007aac <_sbrk_r>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d124      	bne.n	8007a8a <_malloc_r+0x92>
 8007a40:	230c      	movs	r3, #12
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	4630      	mov	r0, r6
 8007a46:	f000 f842 	bl	8007ace <__malloc_unlock>
 8007a4a:	e7e4      	b.n	8007a16 <_malloc_r+0x1e>
 8007a4c:	680b      	ldr	r3, [r1, #0]
 8007a4e:	1b5b      	subs	r3, r3, r5
 8007a50:	d418      	bmi.n	8007a84 <_malloc_r+0x8c>
 8007a52:	2b0b      	cmp	r3, #11
 8007a54:	d90f      	bls.n	8007a76 <_malloc_r+0x7e>
 8007a56:	600b      	str	r3, [r1, #0]
 8007a58:	50cd      	str	r5, [r1, r3]
 8007a5a:	18cc      	adds	r4, r1, r3
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f000 f836 	bl	8007ace <__malloc_unlock>
 8007a62:	f104 000b 	add.w	r0, r4, #11
 8007a66:	1d23      	adds	r3, r4, #4
 8007a68:	f020 0007 	bic.w	r0, r0, #7
 8007a6c:	1ac3      	subs	r3, r0, r3
 8007a6e:	d0d3      	beq.n	8007a18 <_malloc_r+0x20>
 8007a70:	425a      	negs	r2, r3
 8007a72:	50e2      	str	r2, [r4, r3]
 8007a74:	e7d0      	b.n	8007a18 <_malloc_r+0x20>
 8007a76:	428c      	cmp	r4, r1
 8007a78:	684b      	ldr	r3, [r1, #4]
 8007a7a:	bf16      	itet	ne
 8007a7c:	6063      	strne	r3, [r4, #4]
 8007a7e:	6013      	streq	r3, [r2, #0]
 8007a80:	460c      	movne	r4, r1
 8007a82:	e7eb      	b.n	8007a5c <_malloc_r+0x64>
 8007a84:	460c      	mov	r4, r1
 8007a86:	6849      	ldr	r1, [r1, #4]
 8007a88:	e7cc      	b.n	8007a24 <_malloc_r+0x2c>
 8007a8a:	1cc4      	adds	r4, r0, #3
 8007a8c:	f024 0403 	bic.w	r4, r4, #3
 8007a90:	42a0      	cmp	r0, r4
 8007a92:	d005      	beq.n	8007aa0 <_malloc_r+0xa8>
 8007a94:	1a21      	subs	r1, r4, r0
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f808 	bl	8007aac <_sbrk_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d0cf      	beq.n	8007a40 <_malloc_r+0x48>
 8007aa0:	6025      	str	r5, [r4, #0]
 8007aa2:	e7db      	b.n	8007a5c <_malloc_r+0x64>
 8007aa4:	200001fc 	.word	0x200001fc
 8007aa8:	20000200 	.word	0x20000200

08007aac <_sbrk_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4c06      	ldr	r4, [pc, #24]	; (8007ac8 <_sbrk_r+0x1c>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	f7fa fab6 	bl	8002028 <_sbrk>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_sbrk_r+0x1a>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_sbrk_r+0x1a>
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	20000af0 	.word	0x20000af0

08007acc <__malloc_lock>:
 8007acc:	4770      	bx	lr

08007ace <__malloc_unlock>:
 8007ace:	4770      	bx	lr

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
