
game_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b0  080062b0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062b8  080062b8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b8  080062b8  000162b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080062c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  200001d8  08006498  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  08006498  00020ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001172a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029eb  00000000  00000000  00031932  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  00034320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000998  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c6f  00000000  00000000  00035798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2c8  00000000  00000000  00058407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c347f  00000000  00000000  000646cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127b4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  00127bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006228 	.word	0x08006228

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	08006228 	.word	0x08006228

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9c4 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f824 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f88c 	bl	80005f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f005 f960 	bl	800579c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  dataSendBuffer[0] = 0;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <main+0x48>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
  dataSendBuffer[1] = 0;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x48>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	705a      	strb	r2, [r3, #1]
  dataSendBuffer[2] = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x48>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dataSendBuffer[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80004ee:	2101      	movs	r1, #1
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x4c>)
 80004f2:	f000 fcf1 	bl	8000ed8 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <main+0x48>)
 80004fc:	701a      	strb	r2, [r3, #0]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, 3);
 80004fe:	2203      	movs	r2, #3
 8000500:	4903      	ldr	r1, [pc, #12]	; (8000510 <main+0x48>)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x50>)
 8000504:	f003 ff5a 	bl	80043bc <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fa17 	bl	800093c <HAL_Delay>
	  dataSendBuffer[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800050e:	e7ee      	b.n	80004ee <main+0x26>
 8000510:	20000204 	.word	0x20000204
 8000514:	40020000 	.word	0x40020000
 8000518:	2000020c 	.word	0x2000020c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fdba 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fe35 	bl	8002210 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f880 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f88e 	bl	80026f0 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f869 	bl	80006b0 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_GPIO_Init+0xb4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_GPIO_Init+0xb4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_GPIO_Init+0xb4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000660:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_GPIO_Init+0xb8>)
 8000662:	f000 fc51 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_GPIO_Init+0xbc>)
 800067a:	f000 fa93 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800067e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0xb8>)
 8000698:	f000 fa84 	bl	8000ba4 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8ca 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <OTG_FS_IRQHandler+0x10>)
 8000772:	f000 fd32 	bl	80011da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200006dc 	.word	0x200006dc

08000780 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x50>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x16>
		heap_end = &end;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <_sbrk+0x50>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <_sbrk+0x54>)
 8000794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <_sbrk+0x50>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <_sbrk+0x50>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	466a      	mov	r2, sp
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d907      	bls.n	80007ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007aa:	f005 fc41 	bl	8006030 <__errno>
 80007ae:	4602      	mov	r2, r0
 80007b0:	230c      	movs	r3, #12
 80007b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	e006      	b.n	80007c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <_sbrk+0x50>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <_sbrk+0x50>)
 80007c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200001f4 	.word	0x200001f4
 80007d4:	20000ae8 	.word	0x20000ae8

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <SystemInit+0x28>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <SystemInit+0x28>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SystemInit+0x28>)
 80007ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f2:	609a      	str	r2, [r3, #8]
#endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000808:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800080a:	e003      	b.n	8000814 <LoopCopyDataInit>

0800080c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800080e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000810:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000812:	3104      	adds	r1, #4

08000814 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000818:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800081c:	d3f6      	bcc.n	800080c <CopyDataInit>
  ldr  r2, =_sbss
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000820:	e002      	b.n	8000828 <LoopFillZerobss>

08000822 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000822:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000824:	f842 3b04 	str.w	r3, [r2], #4

08000828 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800082c:	d3f9      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800082e:	f7ff ffd3 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f005 fc03 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000836:	f7ff fe47 	bl	80004c8 <main>
  bx  lr    
 800083a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000840:	080062c0 	.word	0x080062c0
  ldr  r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000848:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 800084c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8000850:	20000ae8 	.word	0x20000ae8

08000854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <HAL_Init+0x40>)
 8000862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_Init+0x40>)
 800086e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x40>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x40>)
 800087a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f94d 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	2000      	movs	r0, #0
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff ff18 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023c00 	.word	0x40023c00

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f965 	bl	8000b8a <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f92d 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	20000208 	.word	0x20000208

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000208 	.word	0x20000208

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff ffee 	bl	8000924 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_Delay+0x40>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffde 	bl	8000924 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000008 	.word	0x20000008

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff29 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff3e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff31 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffa2 	bl	8000adc <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e16b      	b.n	8000e98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 815a 	bne.w	8000e92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d00b      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf2:	2b11      	cmp	r3, #17
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0xfc>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b12      	cmp	r3, #18
 8000c9e:	d123      	bne.n	8000ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	69b9      	ldr	r1, [r7, #24]
 8000ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0203 	and.w	r2, r3, #3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80b4 	beq.w	8000e92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <HAL_GPIO_Init+0x308>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a5e      	ldr	r2, [pc, #376]	; (8000eac <HAL_GPIO_Init+0x308>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_GPIO_Init+0x308>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d46:	4a5a      	ldr	r2, [pc, #360]	; (8000eb0 <HAL_GPIO_Init+0x30c>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x310>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d02b      	beq.n	8000dca <HAL_GPIO_Init+0x226>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_GPIO_Init+0x314>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d025      	beq.n	8000dc6 <HAL_GPIO_Init+0x222>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x318>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01f      	beq.n	8000dc2 <HAL_GPIO_Init+0x21e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x31c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x21a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4d      	ldr	r2, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x320>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x216>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x212>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <HAL_GPIO_Init+0x328>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x20e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <HAL_GPIO_Init+0x32c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x20a>
 8000daa:	2307      	movs	r3, #7
 8000dac:	e00e      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dae:	2308      	movs	r3, #8
 8000db0:	e00c      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000db2:	2306      	movs	r3, #6
 8000db4:	e00a      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e008      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e004      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_Init+0x228>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	f002 0203 	and.w	r2, r2, #3
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ddc:	4934      	ldr	r1, [pc, #208]	; (8000eb0 <HAL_GPIO_Init+0x30c>)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0e:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e38:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3301      	adds	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	f67f ae90 	bls.w	8000bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3724      	adds	r7, #36	; 0x24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40021c00 	.word	0x40021c00
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3c:	b08f      	sub	sp, #60	; 0x3c
 8000f3e:	af0a      	add	r7, sp, #40	; 0x28
 8000f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e10f      	b.n	800116c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d106      	bne.n	8000f6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 fd78 	bl	8005a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fe8f 	bl	8002cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	687e      	ldr	r6, [r7, #4]
 8000f98:	466d      	mov	r5, sp
 8000f9a:	f106 0410 	add.w	r4, r6, #16
 8000f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000faa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fae:	1d33      	adds	r3, r6, #4
 8000fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f001 fd66 	bl	8002a84 <USB_CoreInit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e0d0      	b.n	800116c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fe7d 	bl	8002cd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e04a      	b.n	8001072 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	333d      	adds	r3, #61	; 0x3d
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	333c      	adds	r3, #60	; 0x3c
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b298      	uxth	r0, r3
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3342      	adds	r3, #66	; 0x42
 8001018:	4602      	mov	r2, r0
 800101a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	333f      	adds	r3, #63	; 0x3f
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3344      	adds	r3, #68	; 0x44
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3348      	adds	r3, #72	; 0x48
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3350      	adds	r3, #80	; 0x50
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3af      	bcc.n	8000fdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e044      	b.n	800110c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3b5      	bcc.n	8001082 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	687e      	ldr	r6, [r7, #4]
 800111e:	466d      	mov	r5, sp
 8001120:	f106 0410 	add.w	r4, r6, #16
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001130:	e885 0003 	stmia.w	r5, {r0, r1}
 8001134:	1d33      	adds	r3, r6, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f001 fdf3 	bl	8002d24 <USB_DevInit>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00d      	b.n	800116c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fe32 	bl	8003dce <USB_DevDisconnect>

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001174 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_PCD_Start+0x1c>
 800118c:	2302      	movs	r3, #2
 800118e:	e020      	b.n	80011d2 <HAL_PCD_Start+0x5e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	2b01      	cmp	r3, #1
 800119e:	d109      	bne.n	80011b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fdf0 	bl	8003d9e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fd62 	bl	8002c8c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b08d      	sub	sp, #52	; 0x34
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fe97 	bl	8003f24 <USB_GetMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f040 839d 	bne.w	8001938 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f002 fdfb 	bl	8003dfe <USB_ReadInterrupts>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8393 	beq.w	8001936 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fdf2 	bl	8003dfe <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b02      	cmp	r3, #2
 8001222:	d107      	bne.n	8001234 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f002 0202 	and.w	r2, r2, #2
 8001232:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fde0 	bl	8003dfe <USB_ReadInterrupts>
 800123e:	4603      	mov	r3, r0
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b10      	cmp	r3, #16
 8001246:	d161      	bne.n	800130c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0210 	bic.w	r2, r2, #16
 8001256:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f003 020f 	and.w	r2, r3, #15
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	3304      	adds	r3, #4
 8001276:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	0c5b      	lsrs	r3, r3, #17
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	2b02      	cmp	r3, #2
 8001282:	d124      	bne.n	80012ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d035      	beq.n	80012fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800129a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	6a38      	ldr	r0, [r7, #32]
 80012a4:	f002 fc58 	bl	8003b58 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b4:	441a      	add	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c6:	441a      	add	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	e016      	b.n	80012fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	0c5b      	lsrs	r3, r3, #17
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d110      	bne.n	80012fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012e0:	2208      	movs	r2, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f002 fc37 	bl	8003b58 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f6:	441a      	add	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0210 	orr.w	r2, r2, #16
 800130a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fd74 	bl	8003dfe <USB_ReadInterrupts>
 8001316:	4603      	mov	r3, r0
 8001318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001320:	d16e      	bne.n	8001400 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fd7a 	bl	8003e24 <USB_ReadDevAllOutEpInterrupt>
 8001330:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001332:	e062      	b.n	80013fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d057      	beq.n	80013ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fd9f 	bl	8003e8c <USB_ReadDevOutEPInterrupt>
 800134e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	015a      	lsls	r2, r3, #5
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4413      	add	r3, r2
 8001362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001366:	461a      	mov	r2, r3
 8001368:	2301      	movs	r3, #1
 800136a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800136c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fd98 	bl	8001ea4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	2308      	movs	r3, #8
 800138e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fe92 	bl	80020bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	015a      	lsls	r2, r3, #5
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ae:	461a      	mov	r2, r3
 80013b0:	2310      	movs	r3, #16
 80013b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ca:	461a      	mov	r2, r3
 80013cc:	2320      	movs	r3, #32
 80013ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	015a      	lsls	r2, r3, #5
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e6:	461a      	mov	r2, r3
 80013e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d199      	bne.n	8001334 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fcfa 	bl	8003dfe <USB_ReadInterrupts>
 800140a:	4603      	mov	r3, r0
 800140c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001414:	f040 80c0 	bne.w	8001598 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fd1b 	bl	8003e58 <USB_ReadDevAllInEpInterrupt>
 8001422:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001428:	e0b2      	b.n	8001590 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a7 	beq.w	8001584 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fd41 	bl	8003ec8 <USB_ReadDevInEPInterrupt>
 8001446:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d057      	beq.n	8001502 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	2201      	movs	r2, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	69f9      	ldr	r1, [r7, #28]
 800146e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001472:	4013      	ands	r3, r2
 8001474:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001482:	461a      	mov	r2, r3
 8001484:	2301      	movs	r3, #1
 8001486:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d132      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	3344      	adds	r3, #68	; 0x44
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4419      	add	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4403      	add	r3, r0
 80014c4:	3348      	adds	r3, #72	; 0x48
 80014c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d113      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x31c>
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3350      	adds	r3, #80	; 0x50
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d108      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014ee:	461a      	mov	r2, r3
 80014f0:	2101      	movs	r1, #1
 80014f2:	f002 fd49 	bl	8003f88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f004 fb2e 	bl	8005b5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001518:	461a      	mov	r2, r3
 800151a:	2308      	movs	r3, #8
 800151c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001534:	461a      	mov	r2, r3
 8001536:	2310      	movs	r3, #16
 8001538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001550:	461a      	mov	r2, r3
 8001552:	2340      	movs	r3, #64	; 0x40
 8001554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156c:	461a      	mov	r2, r3
 800156e:	2302      	movs	r3, #2
 8001570:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800157c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fc03 	bl	8001d8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3301      	adds	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f af49 	bne.w	800142a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fc2e 	bl	8003dfe <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ac:	d122      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fe0e 	bl	80021f8 <HAL_PCDEx_LPM_Callback>
 80015dc:	e002      	b.n	80015e4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f004 fb34 	bl	8005c4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fc00 	bl	8003dfe <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001608:	d112      	bne.n	8001630 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f004 faf0 	bl	8005c00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fbe2 	bl	8003dfe <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001644:	f040 80c7 	bne.w	80017d6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2110      	movs	r1, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fcc2 	bl	8002fec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166c:	e056      	b.n	800171c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001680:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001692:	0151      	lsls	r1, r2, #5
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	440a      	add	r2, r1
 8001698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800169c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b2:	0151      	lsls	r1, r2, #5
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	440a      	add	r2, r1
 80016b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ce:	461a      	mov	r2, r3
 80016d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e6:	0151      	lsls	r1, r2, #5
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	440a      	add	r2, r1
 80016ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	0151      	lsls	r1, r2, #5
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	440a      	add	r2, r1
 800170c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001714:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	3301      	adds	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001722:	429a      	cmp	r2, r3
 8001724:	d3a3      	bcc.n	800166e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001734:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001738:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	2b00      	cmp	r3, #0
 8001740:	d016      	beq.n	8001770 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001752:	f043 030b 	orr.w	r3, r3, #11
 8001756:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001768:	f043 030b 	orr.w	r3, r3, #11
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	e015      	b.n	800179c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001782:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001786:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001796:	f043 030b 	orr.w	r3, r3, #11
 800179a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c0:	461a      	mov	r2, r3
 80017c2:	f002 fbe1 	bl	8003f88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fb0f 	bl	8003dfe <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ea:	d124      	bne.n	8001836 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fba5 	bl	8003f40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fc57 	bl	80030ae <USB_GetDevSpeed>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681c      	ldr	r4, [r3, #0]
 800180c:	f001 f92e 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8001810:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4620      	mov	r0, r4
 800181c:	f001 f994 	bl	8002b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f004 f9c4 	bl	8005bae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001834:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fadf 	bl	8003dfe <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b08      	cmp	r3, #8
 8001848:	d10a      	bne.n	8001860 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f004 f9a1 	bl	8005b92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f002 0208 	and.w	r2, r2, #8
 800185e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f002 faca 	bl	8003dfe <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001874:	d10f      	bne.n	8001896 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f004 fa03 	bl	8005c8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 faaf 	bl	8003dfe <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018aa:	d10f      	bne.n	80018cc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f004 f9d6 	bl	8005c68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fa94 	bl	8003dfe <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e0:	d10a      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f004 f9e4 	bl	8005cb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80018f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fa7e 	bl	8003dfe <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d115      	bne.n	8001938 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f004 f9d4 	bl	8005ccc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	e000      	b.n	8001938 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001936:	bf00      	nop
    }
  }
}
 8001938:	3734      	adds	r7, #52	; 0x34
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}

0800193e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_PCD_SetAddress+0x1a>
 8001954:	2302      	movs	r3, #2
 8001956:	e013      	b.n	8001980 <HAL_PCD_SetAddress+0x42>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f002 f9ee 	bl	8003d52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	70fb      	strb	r3, [r7, #3]
 800199a:	460b      	mov	r3, r1
 800199c:	803b      	strh	r3, [r7, #0]
 800199e:	4613      	mov	r3, r2
 80019a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da0f      	bge.n	80019ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 020f 	and.w	r2, r3, #15
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	3338      	adds	r3, #56	; 0x38
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	3304      	adds	r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	705a      	strb	r2, [r3, #1]
 80019cc:	e00f      	b.n	80019ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 020f 	and.w	r2, r3, #15
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	3304      	adds	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019fa:	883a      	ldrh	r2, [r7, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	78ba      	ldrb	r2, [r7, #2]
 8001a04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d102      	bne.n	8001a24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_PCD_EP_Open+0xaa>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e00e      	b.n	8001a50 <HAL_PCD_EP_Open+0xc8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fb59 	bl	80030f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da0f      	bge.n	8001a8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3338      	adds	r3, #56	; 0x38
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	705a      	strb	r2, [r3, #1]
 8001a8a:	e00f      	b.n	8001aac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_PCD_EP_Close+0x6e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e00e      	b.n	8001ae4 <HAL_PCD_EP_Close+0x8c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fb97 	bl	8003208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	460b      	mov	r3, r1
 8001afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	f003 020f 	and.w	r2, r3, #15
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6979      	ldr	r1, [r7, #20]
 8001b60:	f001 fe72 	bl	8003848 <USB_EP0StartXfer>
 8001b64:	e008      	b.n	8001b78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6979      	ldr	r1, [r7, #20]
 8001b74:	f001 fc24 	bl	80033c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	3338      	adds	r3, #56	; 0x38
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6979      	ldr	r1, [r7, #20]
 8001bf4:	f001 fe28 	bl	8003848 <USB_EP0StartXfer>
 8001bf8:	e008      	b.n	8001c0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	f001 fbda 	bl	80033c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d901      	bls.n	8001c34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e050      	b.n	8001cd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da0f      	bge.n	8001c5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	e00d      	b.n	8001c78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_EP_SetStall+0x82>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e01e      	b.n	8001cd6 <HAL_PCD_EP_SetStall+0xc0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 ff7f 	bl	8003baa <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	b2d9      	uxtb	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f002 f95e 	bl	8003f88 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d901      	bls.n	8001cfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e042      	b.n	8001d82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da0f      	bge.n	8001d24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3338      	adds	r3, #56	; 0x38
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	e00f      	b.n	8001d44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_PCD_EP_ClrStall+0x86>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e00e      	b.n	8001d82 <HAL_PCD_EP_ClrStall+0xa4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 ff87 	bl	8003c86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b08a      	sub	sp, #40	; 0x28
 8001d8e:	af02      	add	r7, sp, #8
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3338      	adds	r3, #56	; 0x38
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d901      	bls.n	8001dc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06c      	b.n	8001e9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d902      	bls.n	8001dde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3303      	adds	r3, #3
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001de6:	e02b      	b.n	8001e40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d902      	bls.n	8001e04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3303      	adds	r3, #3
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68d9      	ldr	r1, [r3, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f001 fe63 	bl	8003aee <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	441a      	add	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	441a      	add	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d809      	bhi.n	8001e6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d203      	bcs.n	8001e6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1be      	bne.n	8001de8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d811      	bhi.n	8001e9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	6939      	ldr	r1, [r7, #16]
 8001e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e96:	4013      	ands	r3, r2
 8001e98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	333c      	adds	r3, #60	; 0x3c
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f040 80a0 	bne.w	800201c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a72      	ldr	r2, [pc, #456]	; (80020b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	f240 80dd 	bls.w	80020aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80d7 	beq.w	80020aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0e:	6093      	str	r3, [r2, #8]
 8001f10:	e0cb      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	6093      	str	r3, [r2, #8]
 8001f2e:	e0bc      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 80b7 	bne.w	80020aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a5d      	ldr	r2, [pc, #372]	; (80020b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d90f      	bls.n	8001f64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f60:	6093      	str	r3, [r2, #8]
 8001f62:	e0a2      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	0159      	lsls	r1, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4403      	add	r3, r0
 8001f9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4419      	add	r1, r3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4403      	add	r3, r0
 8001fd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fdc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d114      	bne.n	800200e <PCD_EP_OutXfrComplete_int+0x16a>
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d108      	bne.n	800200e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002006:	461a      	mov	r2, r3
 8002008:	2101      	movs	r1, #1
 800200a:	f001 ffbd 	bl	8003f88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f003 fd87 	bl	8005b28 <HAL_PCD_DataOutStageCallback>
 800201a:	e046      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d124      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002040:	6093      	str	r3, [r2, #8]
 8002042:	e032      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	2320      	movs	r3, #32
 800205e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f003 fd5e 	bl	8005b28 <HAL_PCD_DataOutStageCallback>
 800206c:	e01d      	b.n	80020aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002096:	461a      	mov	r2, r3
 8002098:	2100      	movs	r1, #0
 800209a:	f001 ff75 	bl	8003f88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f003 fd3f 	bl	8005b28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	4f54300a 	.word	0x4f54300a
 80020b8:	4f54310a 	.word	0x4f54310a

080020bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	333c      	adds	r3, #60	; 0x3c
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <PCD_EP_OutSetupPacket_int+0x88>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d90e      	bls.n	8002110 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f003 fcf7 	bl	8005b04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <PCD_EP_OutSetupPacket_int+0x88>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d90c      	bls.n	8002138 <PCD_EP_OutSetupPacket_int+0x7c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002130:	461a      	mov	r2, r3
 8002132:	2101      	movs	r1, #1
 8002134:	f001 ff28 	bl	8003f88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	4f54300a 	.word	0x4f54300a

08002148 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
 8002154:	4613      	mov	r3, r2
 8002156:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002166:	883b      	ldrh	r3, [r7, #0]
 8002168:	0419      	lsls	r1, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	430a      	orrs	r2, r1
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
 8002174:	e028      	b.n	80021c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	4413      	add	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e00d      	b.n	80021a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3340      	adds	r3, #64	; 0x40
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3ec      	bcc.n	800218a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021b0:	883b      	ldrh	r3, [r7, #0]
 80021b2:	0418      	lsls	r0, r3, #16
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6819      	ldr	r1, [r3, #0]
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	4302      	orrs	r2, r0
 80021c0:	3340      	adds	r3, #64	; 0x40
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e25b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d075      	beq.n	800231a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800222e:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b9d      	ldr	r3, [pc, #628]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002252:	d10b      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	4b99      	ldr	r3, [pc, #612]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0x108>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d157      	bne.n	8002318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e236      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x74>
 8002276:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a90      	ldr	r2, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fb2c 	bl	8000924 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fb28 	bl	8000924 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1fb      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xc0>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe fb18 	bl	8000924 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fb14 	bl	8000924 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1e7      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0xe8>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1bb      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4952      	ldr	r1, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe facd 	bl	8000924 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fac9 	bl	8000924 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e19c      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4940      	ldr	r1, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe faac 	bl	8000924 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe faa8 	bl	8000924 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e17b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fa8c 	bl	8000924 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fa88 	bl	8000924 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e15b      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x200>
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fa75 	bl	8000924 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7fe fa71 	bl	8000924 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e144      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a0 	beq.w	80025aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d121      	bne.n	80024ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7fe fa37 	bl	8000924 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e011      	b.n	80024de <HAL_RCC_OscConfig+0x2ce>
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470000 	.word	0x42470000
 80024c4:	42470e80 	.word	0x42470e80
 80024c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe fa2a 	bl	8000924 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0fd      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x4d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_OscConfig+0x2f0>
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a7c      	ldr	r2, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002508:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a76      	ldr	r2, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a73      	ldr	r2, [pc, #460]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002522:	4b71      	ldr	r3, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a70      	ldr	r2, [pc, #448]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe f9ef 	bl	8000924 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe f9eb 	bl	8000924 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0bc      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x33a>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe f9d9 	bl	8000924 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe f9d5 	bl	8000924 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0a6      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8092 	beq.w	80026d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d05c      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d141      	bne.n	800264c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe f9a9 	bl	8000924 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7fe f9a5 	bl	8000924 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e078      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4933      	ldr	r1, [pc, #204]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261e:	4b33      	ldr	r3, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe f97e 	bl	8000924 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe f97a 	bl	8000924 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04d      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x41c>
 800264a:	e045      	b.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x4dc>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7fe f967 	bl	8000924 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe f963 	bl	8000924 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e036      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x44a>
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e029      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_OscConfig+0x4d8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d115      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470060 	.word	0x42470060

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe f8a0 	bl	8000924 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe f89c 	bl	8000924 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	fa21 f303 	lsr.w	r3, r1, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe f800 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080062a0 	.word	0x080062a0
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d007      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x32>
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d008      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x38>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 80b4 	bne.w	8002a50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028ea:	60bb      	str	r3, [r7, #8]
       break;
 80028ec:	e0b3      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ee:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028f0:	60bb      	str	r3, [r7, #8]
      break;
 80028f2:	e0b0      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f4:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fe:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04a      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	f04f 0400 	mov.w	r4, #0
 8002914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	ea03 0501 	and.w	r5, r3, r1
 8002920:	ea04 0602 	and.w	r6, r4, r2
 8002924:	4629      	mov	r1, r5
 8002926:	4632      	mov	r2, r6
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	0154      	lsls	r4, r2, #5
 8002932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002936:	014b      	lsls	r3, r1, #5
 8002938:	4619      	mov	r1, r3
 800293a:	4622      	mov	r2, r4
 800293c:	1b49      	subs	r1, r1, r5
 800293e:	eb62 0206 	sbc.w	r2, r2, r6
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f04f 0400 	mov.w	r4, #0
 800294a:	0194      	lsls	r4, r2, #6
 800294c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002950:	018b      	lsls	r3, r1, #6
 8002952:	1a5b      	subs	r3, r3, r1
 8002954:	eb64 0402 	sbc.w	r4, r4, r2
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	00e2      	lsls	r2, r4, #3
 8002962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002966:	00d9      	lsls	r1, r3, #3
 8002968:	460b      	mov	r3, r1
 800296a:	4614      	mov	r4, r2
 800296c:	195b      	adds	r3, r3, r5
 800296e:	eb44 0406 	adc.w	r4, r4, r6
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	0262      	lsls	r2, r4, #9
 800297c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002980:	0259      	lsls	r1, r3, #9
 8002982:	460b      	mov	r3, r1
 8002984:	4614      	mov	r4, r2
 8002986:	4618      	mov	r0, r3
 8002988:	4621      	mov	r1, r4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f04f 0400 	mov.w	r4, #0
 8002990:	461a      	mov	r2, r3
 8002992:	4623      	mov	r3, r4
 8002994:	f7fd fc18 	bl	80001c8 <__aeabi_uldivmod>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e049      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	f04f 0400 	mov.w	r4, #0
 80029aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	ea03 0501 	and.w	r5, r3, r1
 80029b6:	ea04 0602 	and.w	r6, r4, r2
 80029ba:	4629      	mov	r1, r5
 80029bc:	4632      	mov	r2, r6
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	0154      	lsls	r4, r2, #5
 80029c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029cc:	014b      	lsls	r3, r1, #5
 80029ce:	4619      	mov	r1, r3
 80029d0:	4622      	mov	r2, r4
 80029d2:	1b49      	subs	r1, r1, r5
 80029d4:	eb62 0206 	sbc.w	r2, r2, r6
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	f04f 0400 	mov.w	r4, #0
 80029e0:	0194      	lsls	r4, r2, #6
 80029e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029e6:	018b      	lsls	r3, r1, #6
 80029e8:	1a5b      	subs	r3, r3, r1
 80029ea:	eb64 0402 	sbc.w	r4, r4, r2
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	00e2      	lsls	r2, r4, #3
 80029f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029fc:	00d9      	lsls	r1, r3, #3
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	195b      	adds	r3, r3, r5
 8002a04:	eb44 0406 	adc.w	r4, r4, r6
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	02a2      	lsls	r2, r4, #10
 8002a12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a16:	0299      	lsls	r1, r3, #10
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4621      	mov	r1, r4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4623      	mov	r3, r4
 8002a2a:	f7fd fbcd 	bl	80001c8 <__aeabi_uldivmod>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	460c      	mov	r4, r1
 8002a32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	60bb      	str	r3, [r7, #8]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a52:	60bb      	str	r3, [r7, #8]
      break;
 8002a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a56:	68bb      	ldr	r3, [r7, #8]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000

08002a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a84:	b084      	sub	sp, #16
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	f107 001c 	add.w	r0, r7, #28
 8002a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d122      	bne.n	8002ae2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 fab4 	bl	8004044 <USB_CoreReset>
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e01a      	b.n	8002b18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 faa8 	bl	8004044 <USB_CoreReset>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
 8002b0a:	e005      	b.n	8002b18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10b      	bne.n	8002b36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f043 0206 	orr.w	r2, r3, #6
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b42:	b004      	add	sp, #16
 8002b44:	4770      	bx	lr
	...

08002b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d165      	bne.n	8002c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <USB_SetTurnaroundTime+0x11c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d906      	bls.n	8002b72 <USB_SetTurnaroundTime+0x2a>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <USB_SetTurnaroundTime+0x120>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d802      	bhi.n	8002b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e062      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <USB_SetTurnaroundTime+0x120>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d906      	bls.n	8002b88 <USB_SetTurnaroundTime+0x40>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <USB_SetTurnaroundTime+0x124>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002b82:	230e      	movs	r3, #14
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e057      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <USB_SetTurnaroundTime+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d906      	bls.n	8002b9e <USB_SetTurnaroundTime+0x56>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <USB_SetTurnaroundTime+0x128>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d802      	bhi.n	8002b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b98:	230d      	movs	r3, #13
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e04c      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <USB_SetTurnaroundTime+0x128>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d906      	bls.n	8002bb4 <USB_SetTurnaroundTime+0x6c>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <USB_SetTurnaroundTime+0x12c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d802      	bhi.n	8002bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002bae:	230c      	movs	r3, #12
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e041      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <USB_SetTurnaroundTime+0x12c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d906      	bls.n	8002bca <USB_SetTurnaroundTime+0x82>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <USB_SetTurnaroundTime+0x130>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d802      	bhi.n	8002bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e036      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <USB_SetTurnaroundTime+0x130>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d906      	bls.n	8002be0 <USB_SetTurnaroundTime+0x98>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <USB_SetTurnaroundTime+0x134>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d802      	bhi.n	8002be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002bda:	230a      	movs	r3, #10
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e02b      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <USB_SetTurnaroundTime+0x134>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d906      	bls.n	8002bf6 <USB_SetTurnaroundTime+0xae>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <USB_SetTurnaroundTime+0x138>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d802      	bhi.n	8002bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e020      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <USB_SetTurnaroundTime+0x138>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d906      	bls.n	8002c0c <USB_SetTurnaroundTime+0xc4>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <USB_SetTurnaroundTime+0x13c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d802      	bhi.n	8002c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c06:	2308      	movs	r3, #8
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e015      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <USB_SetTurnaroundTime+0x13c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d906      	bls.n	8002c22 <USB_SetTurnaroundTime+0xda>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <USB_SetTurnaroundTime+0x140>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d802      	bhi.n	8002c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c22:	2306      	movs	r3, #6
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e007      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c2e:	2309      	movs	r3, #9
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e001      	b.n	8002c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c34:	2309      	movs	r3, #9
 8002c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	00d8acbf 	.word	0x00d8acbf
 8002c68:	00e4e1bf 	.word	0x00e4e1bf
 8002c6c:	00f423ff 	.word	0x00f423ff
 8002c70:	0106737f 	.word	0x0106737f
 8002c74:	011a499f 	.word	0x011a499f
 8002c78:	01312cff 	.word	0x01312cff
 8002c7c:	014ca43f 	.word	0x014ca43f
 8002c80:	016e35ff 	.word	0x016e35ff
 8002c84:	01a6ab1f 	.word	0x01a6ab1f
 8002c88:	01e847ff 	.word	0x01e847ff

08002c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d106      	bne.n	8002cfc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e00b      	b.n	8002d14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	e001      	b.n	8002d14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e003      	b.n	8002d1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002d14:	2032      	movs	r0, #50	; 0x32
 8002d16:	f7fd fe11 	bl	800093c <HAL_Delay>

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d24:	b084      	sub	sp, #16
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e009      	b.n	8002d58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3340      	adds	r3, #64	; 0x40
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3301      	adds	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b0e      	cmp	r3, #14
 8002d5c:	d9f2      	bls.n	8002d44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11c      	bne.n	8002d9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9c:	e00b      	b.n	8002db6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc8:	4619      	mov	r1, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	680b      	ldr	r3, [r1, #0]
 8002dd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10c      	bne.n	8002df6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002de2:	2100      	movs	r1, #0
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f949 	bl	800307c <USB_SetDevSpeed>
 8002dea:	e008      	b.n	8002dfe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dec:	2101      	movs	r1, #1
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f944 	bl	800307c <USB_SetDevSpeed>
 8002df4:	e003      	b.n	8002dfe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002df6:	2103      	movs	r1, #3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f93f 	bl	800307c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dfe:	2110      	movs	r1, #16
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8f3 	bl	8002fec <USB_FlushTxFifo>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f911 	bl	8003038 <USB_FlushRxFifo>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e32:	461a      	mov	r2, r3
 8002e34:	2300      	movs	r3, #0
 8002e36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e043      	b.n	8002ed2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e60:	d118      	bne.n	8002e94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e013      	b.n	8002ea6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e008      	b.n	8002ea6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3b7      	bcc.n	8002e4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e043      	b.n	8002f68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef6:	d118      	bne.n	8002f2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e013      	b.n	8002f3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e008      	b.n	8002f3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f36:	461a      	mov	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3301      	adds	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3b7      	bcc.n	8002ee0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f043 0210 	orr.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <USB_DevInit+0x2c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f043 0208 	orr.w	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe4:	b004      	add	sp, #16
 8002fe6:	4770      	bx	lr
 8002fe8:	803c3800 	.word	0x803c3800

08002fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3301      	adds	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <USB_FlushTxFifo+0x48>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d0f0      	beq.n	8003006 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	00030d40 	.word	0x00030d40

08003038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2210      	movs	r2, #16
 8003048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <USB_FlushRxFifo+0x40>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e006      	b.n	800306a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d0f0      	beq.n	800304a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	00030d40 	.word	0x00030d40

0800307c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0306 	and.w	r3, r3, #6
 80030c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
 80030d2:	e00a      	b.n	80030ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d002      	beq.n	80030e0 <USB_GetDevSpeed+0x32>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d102      	bne.n	80030e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80030e0:	2302      	movs	r3, #2
 80030e2:	75fb      	strb	r3, [r7, #23]
 80030e4:	e001      	b.n	80030ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80030e6:	230f      	movs	r3, #15
 80030e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	785b      	ldrb	r3, [r3, #1]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d13a      	bne.n	800318a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003132:	4313      	orrs	r3, r2
 8003134:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d155      	bne.n	80031f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003168:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	059b      	lsls	r3, r3, #22
 800316e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003170:	4313      	orrs	r3, r2
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	440a      	add	r2, r1
 800317a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e036      	b.n	80031f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11a      	bne.n	80031f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	78db      	ldrb	r3, [r3, #3]
 80031dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031de:	430b      	orrs	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d161      	bne.n	80032e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323a:	d11f      	bne.n	800327c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	440a      	add	r2, r1
 8003252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800325a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800327a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329c:	4013      	ands	r3, r2
 800329e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c0:	4013      	ands	r3, r2
 80032c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0159      	lsls	r1, r3, #5
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	440b      	add	r3, r1
 80032da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032de:	4619      	mov	r1, r3
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <USB_DeactivateEndpoint+0x1b0>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
 80032e6:	e060      	b.n	80033aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fe:	d11f      	bne.n	8003340 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800331a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800331e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	440a      	add	r2, r1
 8003336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800333a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800333e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	43db      	mvns	r3, r3
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003360:	4013      	ands	r3, r2
 8003362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	43db      	mvns	r3, r3
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003384:	4013      	ands	r3, r2
 8003386:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	0159      	lsls	r1, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	440b      	add	r3, r1
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	4619      	mov	r1, r3
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <USB_DeactivateEndpoint+0x1b4>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	ec337800 	.word	0xec337800
 80033bc:	eff37800 	.word	0xeff37800

080033c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 815c 	bne.w	800369a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d132      	bne.n	8003450 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	0151      	lsls	r1, r2, #5
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	440a      	add	r2, r1
 8003400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003404:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003408:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800340c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800342c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003448:	0cdb      	lsrs	r3, r3, #19
 800344a:	04db      	lsls	r3, r3, #19
 800344c:	6113      	str	r3, [r2, #16]
 800344e:	e074      	b.n	800353a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346a:	0cdb      	lsrs	r3, r3, #19
 800346c:	04db      	lsls	r3, r3, #19
 800346e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	0151      	lsls	r1, r2, #5
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	440a      	add	r2, r1
 8003486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800348a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800348e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	440b      	add	r3, r1
 80034ac:	1e59      	subs	r1, r3, #1
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b6:	04d9      	lsls	r1, r3, #19
 80034b8:	4b9d      	ldr	r3, [pc, #628]	; (8003730 <USB_EPStartXfer+0x370>)
 80034ba:	400b      	ands	r3, r1
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	0148      	lsls	r0, r1, #5
 80034c0:	69f9      	ldr	r1, [r7, #28]
 80034c2:	4401      	add	r1, r0
 80034c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034c8:	4313      	orrs	r3, r2
 80034ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	0148      	lsls	r0, r1, #5
 80034e6:	69f9      	ldr	r1, [r7, #28]
 80034e8:	4401      	add	r1, r0
 80034ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034ee:	4313      	orrs	r3, r2
 80034f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d11f      	bne.n	800353a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	0151      	lsls	r1, r2, #5
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	440a      	add	r2, r1
 8003510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003514:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003518:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	0151      	lsls	r1, r2, #5
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	440a      	add	r2, r1
 8003530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003534:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003538:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d14b      	bne.n	80035d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d128      	bne.n	80035b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	440a      	add	r2, r1
 800358a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800358e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e00f      	b.n	80035b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e12f      	b.n	8003838 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	0151      	lsls	r1, r2, #5
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	440a      	add	r2, r1
 80035ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	78db      	ldrb	r3, [r3, #3]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d015      	beq.n	800362c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8117 	beq.w	8003838 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003626:	4313      	orrs	r3, r2
 8003628:	634b      	str	r3, [r1, #52]	; 0x34
 800362a:	e105      	b.n	8003838 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d110      	bne.n	800365e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e00f      	b.n	800367e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	0151      	lsls	r1, r2, #5
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	440a      	add	r2, r1
 8003674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68d9      	ldr	r1, [r3, #12]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	b298      	uxth	r0, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4603      	mov	r3, r0
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fa2b 	bl	8003aee <USB_WritePacket>
 8003698:	e0ce      	b.n	8003838 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	0151      	lsls	r1, r2, #5
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	440a      	add	r2, r1
 80036b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036b4:	0cdb      	lsrs	r3, r3, #19
 80036b6:	04db      	lsls	r3, r3, #19
 80036b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d126      	bne.n	8003734 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	0148      	lsls	r0, r1, #5
 8003700:	69f9      	ldr	r1, [r7, #28]
 8003702:	4401      	add	r1, r0
 8003704:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800372a:	6113      	str	r3, [r2, #16]
 800372c:	e036      	b.n	800379c <USB_EPStartXfer+0x3dc>
 800372e:	bf00      	nop
 8003730:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4413      	add	r3, r2
 800373e:	1e5a      	subs	r2, r3, #1
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	04d9      	lsls	r1, r3, #19
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <USB_EPStartXfer+0x484>)
 800375e:	400b      	ands	r3, r1
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	0148      	lsls	r0, r1, #5
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	4401      	add	r1, r0
 8003768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800376c:	4313      	orrs	r3, r2
 800376e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	8af9      	ldrh	r1, [r7, #22]
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	69b9      	ldr	r1, [r7, #24]
 800378e:	0148      	lsls	r0, r1, #5
 8003790:	69f9      	ldr	r1, [r7, #28]
 8003792:	4401      	add	r1, r0
 8003794:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003798:	4313      	orrs	r3, r2
 800379a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10d      	bne.n	80037be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68d9      	ldr	r1, [r3, #12]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	460a      	mov	r2, r1
 80037bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	78db      	ldrb	r3, [r3, #3]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d128      	bne.n	8003818 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d110      	bne.n	80037f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00f      	b.n	8003818 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	440a      	add	r2, r1
 800380e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	440a      	add	r2, r1
 800382e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	1ff80000 	.word	0x1ff80000

08003848 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 80cd 	bne.w	8003a04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d132      	bne.n	80038d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003890:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d0:	0cdb      	lsrs	r3, r3, #19
 80038d2:	04db      	lsls	r3, r3, #19
 80038d4:	6113      	str	r3, [r2, #16]
 80038d6:	e04e      	b.n	8003976 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f2:	0cdb      	lsrs	r3, r3, #19
 80038f4:	04db      	lsls	r3, r3, #19
 80038f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003912:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003916:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800391a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d903      	bls.n	8003930 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800394e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	0148      	lsls	r0, r1, #5
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	4401      	add	r1, r0
 800396e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003972:	4313      	orrs	r3, r2
 8003974:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11e      	bne.n	80039ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e092      	b.n	8003ae0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d07e      	beq.n	8003ae0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	6979      	ldr	r1, [r7, #20]
 80039fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fe:	4313      	orrs	r3, r2
 8003a00:	634b      	str	r3, [r1, #52]	; 0x34
 8003a02:	e06d      	b.n	8003ae0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1e:	0cdb      	lsrs	r3, r3, #19
 8003a20:	04db      	lsls	r3, r3, #19
 8003a22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	0151      	lsls	r1, r2, #5
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	440a      	add	r2, r1
 8003a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	0148      	lsls	r0, r1, #5
 8003a92:	6979      	ldr	r1, [r7, #20]
 8003a94:	4401      	add	r1, r0
 8003a96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10d      	bne.n	8003ac0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	68d9      	ldr	r1, [r3, #12]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	460a      	mov	r2, r1
 8003abe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b089      	sub	sp, #36	; 0x24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	4611      	mov	r1, r2
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	71fb      	strb	r3, [r7, #7]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11a      	bne.n	8003b4a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b14:	88bb      	ldrh	r3, [r7, #4]
 8003b16:	3303      	adds	r3, #3
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e00f      	b.n	8003b42 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	031a      	lsls	r2, r3, #12
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2e:	461a      	mov	r2, r3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3eb      	bcc.n	8003b22 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3724      	adds	r7, #36	; 0x24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	3303      	adds	r3, #3
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e00b      	b.n	8003b94 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d3ef      	bcc.n	8003b7c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d12c      	bne.n	8003c20 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db12      	blt.n	8003bfe <USB_EPSetStall+0x54>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00f      	beq.n	8003bfe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e02b      	b.n	8003c78 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db12      	blt.n	8003c58 <USB_EPSetStall+0xae>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00f      	beq.n	8003c58 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c56:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d128      	bne.n	8003cf4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d003      	beq.n	8003cd2 <USB_EPClearStall+0x4c>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	78db      	ldrb	r3, [r3, #3]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d138      	bne.n	8003d44 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e027      	b.n	8003d44 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d003      	beq.n	8003d24 <USB_EPClearStall+0x9e>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	78db      	ldrb	r3, [r3, #3]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d10f      	bne.n	8003d44 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d74:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	f7fc fdbc 	bl	800093c <HAL_Delay>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003dee:	2003      	movs	r0, #3
 8003df0:	f7fc fda4 	bl	800093c <HAL_Delay>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	b29b      	uxth	r3, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003eba:	68bb      	ldr	r3, [r7, #8]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	01db      	lsls	r3, r3, #7
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f16:	68bb      	ldr	r3, [r7, #8]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0301 	and.w	r3, r3, #1
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	460b      	mov	r3, r1
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	333c      	adds	r3, #60	; 0x3c
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <USB_EP0_OutStart+0xb8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d90a      	bls.n	8003fc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fbc:	d101      	bne.n	8003fc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e037      	b.n	8004032 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff0:	f043 0318 	orr.w	r3, r3, #24
 8003ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004004:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004008:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10f      	bne.n	8004030 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800402e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	4f54300a 	.word	0x4f54300a

08004044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <USB_CoreReset+0x64>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e01b      	b.n	800409a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	daf2      	bge.n	8004050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <USB_CoreReset+0x64>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e006      	b.n	800409a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d0f0      	beq.n	800407a <USB_CoreReset+0x36>

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	00030d40 	.word	0x00030d40

080040ac <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80040b8:	2018      	movs	r0, #24
 80040ba:	f001 ffe3 	bl	8006084 <malloc>
 80040be:	4603      	mov	r3, r0
 80040c0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040d0:	2302      	movs	r3, #2
 80040d2:	e038      	b.n	8004146 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7c1b      	ldrb	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2205      	movs	r2, #5
 80040e8:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2205      	movs	r2, #5
 80040ee:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80040f2:	e006      	b.n	8004102 <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2205      	movs	r2, #5
 80040f8:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2205      	movs	r2, #5
 80040fe:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004102:	2302      	movs	r3, #2
 8004104:	2203      	movs	r2, #3
 8004106:	2181      	movs	r1, #129	; 0x81
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 fe54 	bl	8005db6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004114:	2302      	movs	r3, #2
 8004116:	2203      	movs	r2, #3
 8004118:	2101      	movs	r1, #1
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f001 fe4b 	bl	8005db6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	2302      	movs	r3, #2
 800413c:	2101      	movs	r1, #1
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f001 ff28 	bl	8005f94 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800415a:	2181      	movs	r1, #129	; 0x81
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f001 fe50 	bl	8005e02 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800416e:	2101      	movs	r1, #1
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f001 fe46 	bl	8005e02 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 ff77 	bl	8006094 <free>
    pdev->pClassData = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d051      	beq.n	800428a <USBD_CUSTOM_HID_Setup+0xd2>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	f040 80d9 	bne.w	800439e <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	3b02      	subs	r3, #2
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	d841      	bhi.n	800427a <USBD_CUSTOM_HID_Setup+0xc2>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <USBD_CUSTOM_HID_Setup+0x44>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004233 	.word	0x08004233
 8004204:	0800427b 	.word	0x0800427b
 8004208:	0800427b 	.word	0x0800427b
 800420c:	0800427b 	.word	0x0800427b
 8004210:	0800427b 	.word	0x0800427b
 8004214:	0800427b 	.word	0x0800427b
 8004218:	08004265 	.word	0x08004265
 800421c:	08004243 	.word	0x08004243
 8004220:	08004225 	.word	0x08004225
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	885b      	ldrh	r3, [r3, #2]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]
      break;
 8004230:	e02a      	b.n	8004288 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	2201      	movs	r2, #1
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fa2d 	bl	800569a <USBD_CtlSendData>
      break;
 8004240:	e022      	b.n	8004288 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	885b      	ldrh	r3, [r3, #2]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	b29b      	uxth	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]
      break;
 8004252:	e019      	b.n	8004288 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3308      	adds	r3, #8
 8004258:	2201      	movs	r2, #1
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f001 fa1c 	bl	800569a <USBD_CtlSendData>
      break;
 8004262:	e011      	b.n	8004288 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2201      	movs	r2, #1
 8004268:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800426a:	6939      	ldr	r1, [r7, #16]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	461a      	mov	r2, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f001 fa3d 	bl	80056f2 <USBD_CtlPrepareRx>
      break;
 8004278:	e006      	b.n	8004288 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 f99b 	bl	80055b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004282:	2303      	movs	r3, #3
 8004284:	75fb      	strb	r3, [r7, #23]
      break;
 8004286:	bf00      	nop
    }
    break;
 8004288:	e090      	b.n	80043ac <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b0b      	cmp	r3, #11
 8004290:	d87c      	bhi.n	800438c <USBD_CUSTOM_HID_Setup+0x1d4>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042c9 	.word	0x080042c9
 800429c:	0800439b 	.word	0x0800439b
 80042a0:	0800438d 	.word	0x0800438d
 80042a4:	0800438d 	.word	0x0800438d
 80042a8:	0800438d 	.word	0x0800438d
 80042ac:	0800438d 	.word	0x0800438d
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	0800438d 	.word	0x0800438d
 80042b8:	0800438d 	.word	0x0800438d
 80042bc:	0800438d 	.word	0x0800438d
 80042c0:	0800433f 	.word	0x0800433f
 80042c4:	08004367 	.word	0x08004367
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042d2:	f107 030e 	add.w	r3, r7, #14
 80042d6:	2202      	movs	r2, #2
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 f9dd 	bl	800569a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80042e0:	e05c      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80042e2:	6839      	ldr	r1, [r7, #0]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f001 f967 	bl	80055b8 <USBD_CtlError>
        ret = USBD_FAIL;
 80042ea:	2303      	movs	r3, #3
 80042ec:	75fb      	strb	r3, [r7, #23]
      break;
 80042ee:	e055      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	885b      	ldrh	r3, [r3, #2]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d10b      	bne.n	8004314 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	88db      	ldrh	r3, [r3, #6]
 8004300:	2b32      	cmp	r3, #50	; 0x32
 8004302:	bf28      	it	cs
 8004304:	2332      	movcs	r3, #50	; 0x32
 8004306:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e00d      	b.n	8004330 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	885b      	ldrh	r3, [r3, #2]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b21      	cmp	r3, #33	; 0x21
 800431e:	d107      	bne.n	8004330 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8004320:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <USBD_CUSTOM_HID_Setup+0x200>)
 8004322:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	88db      	ldrh	r3, [r3, #6]
 8004328:	2b09      	cmp	r3, #9
 800432a:	bf28      	it	cs
 800432c:	2309      	movcs	r3, #9
 800432e:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	461a      	mov	r2, r3
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 f9af 	bl	800569a <USBD_CtlSendData>
      break;
 800433c:	e02e      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004344:	2b03      	cmp	r3, #3
 8004346:	d107      	bne.n	8004358 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	330c      	adds	r3, #12
 800434c:	2201      	movs	r2, #1
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f001 f9a2 	bl	800569a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004356:	e021      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 f92c 	bl	80055b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004360:	2303      	movs	r3, #3
 8004362:	75fb      	strb	r3, [r7, #23]
      break;
 8004364:	e01a      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800436c:	2b03      	cmp	r3, #3
 800436e:	d106      	bne.n	800437e <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	885b      	ldrh	r3, [r3, #2]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800437c:	e00e      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f001 f919 	bl	80055b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004386:	2303      	movs	r3, #3
 8004388:	75fb      	strb	r3, [r7, #23]
      break;
 800438a:	e007      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 f912 	bl	80055b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8004394:	2303      	movs	r3, #3
 8004396:	75fb      	strb	r3, [r7, #23]
      break;
 8004398:	e000      	b.n	800439c <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 800439a:	bf00      	nop
    }
    break;
 800439c:	e006      	b.n	80043ac <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 f909 	bl	80055b8 <USBD_CtlError>
    ret = USBD_FAIL;
 80043a6:	2303      	movs	r3, #3
 80043a8:	75fb      	strb	r3, [r7, #23]
    break;
 80043aa:	bf00      	nop
  }
  return (uint8_t)ret;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200000c8 	.word	0x200000c8

080043bc <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e019      	b.n	800440c <USBD_CUSTOM_HID_SendReport+0x50>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043de:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d10f      	bne.n	800440a <USBD_CUSTOM_HID_SendReport+0x4e>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	7d1b      	ldrb	r3, [r3, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <USBD_CUSTOM_HID_SendReport+0x4a>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2201      	movs	r2, #1
 80043f6:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	2181      	movs	r1, #129	; 0x81
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f001 fda7 	bl	8005f52 <USBD_LL_Transmit>
 8004404:	e001      	b.n	800440a <USBD_CUSTOM_HID_SendReport+0x4e>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <USBD_CUSTOM_HID_SendReport+0x50>
    }
  }
  return (uint8_t)USBD_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2229      	movs	r2, #41	; 0x29
 8004420:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8004422:	4b03      	ldr	r3, [pc, #12]	; (8004430 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000044 	.word	0x20000044

08004434 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2229      	movs	r2, #41	; 0x29
 8004440:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000070 	.word	0x20000070

08004454 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2229      	movs	r2, #41	; 0x29
 8004460:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004462:	4b03      	ldr	r3, [pc, #12]	; (8004470 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	2000009c 	.word	0x2000009c

08004474 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004486:	2200      	movs	r2, #0
 8004488:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e00e      	b.n	80044d0 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044b8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	7810      	ldrb	r0, [r2, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	7852      	ldrb	r2, [r2, #1]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00a      	b.n	8004504 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	2302      	movs	r3, #2
 80044fa:	2101      	movs	r1, #1
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 fd49 	bl	8005f94 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800451a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10c      	bne.n	800453e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	7810      	ldrb	r0, [r2, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	7852      	ldrb	r2, [r2, #1]
 8004534:	4611      	mov	r1, r2
 8004536:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	220a      	movs	r2, #10
 8004554:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004556:	4b03      	ldr	r3, [pc, #12]	; (8004564 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	200000d4 	.word	0x200000d4

08004568 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004578:	2303      	movs	r3, #3
 800457a:	e004      	b.n	8004586 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e025      	b.n	80045f6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	79fa      	ldrb	r2, [r7, #7]
 80045e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 fb7c 	bl	8005ce8 <USBD_LL_Init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004612:	2303      	movs	r3, #3
 8004614:	e010      	b.n	8004638 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f107 020e 	add.w	r2, r7, #14
 800462a:	4610      	mov	r0, r2
 800462c:	4798      	blx	r3
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fb99 	bl	8005d80 <USBD_LL_Start>
 800464e:	4603      	mov	r3, r0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800467a:	2303      	movs	r3, #3
 800467c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4611      	mov	r1, r2
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4611      	mov	r1, r2
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
  }

  return USBD_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 ff2b 	bl	8005544 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2b01      	cmp	r3, #1
 8004710:	d00e      	beq.n	8004730 <USBD_LL_SetupStage+0x5a>
 8004712:	2b01      	cmp	r3, #1
 8004714:	d302      	bcc.n	800471c <USBD_LL_SetupStage+0x46>
 8004716:	2b02      	cmp	r3, #2
 8004718:	d014      	beq.n	8004744 <USBD_LL_SetupStage+0x6e>
 800471a:	e01d      	b.n	8004758 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa17 	bl	8004b58 <USBD_StdDevReq>
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]
      break;
 800472e:	e020      	b.n	8004772 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fa7b 	bl	8004c34 <USBD_StdItfReq>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]
      break;
 8004742:	e016      	b.n	8004772 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fab7 	bl	8004cc0 <USBD_StdEPReq>
 8004752:	4603      	mov	r3, r0
 8004754:	73fb      	strb	r3, [r7, #15]
      break;
 8004756:	e00c      	b.n	8004772 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800475e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 fb6a 	bl	8005e40 <USBD_LL_StallEP>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	bf00      	nop
  }

  return ret;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	460b      	mov	r3, r1
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d137      	bne.n	8004800 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d14a      	bne.n	8004838 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d913      	bls.n	80047d6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	1ad2      	subs	r2, r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf28      	it	cs
 80047c8:	4613      	movcs	r3, r2
 80047ca:	461a      	mov	r2, r3
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 ffac 	bl	800572c <USBD_CtlContinueRx>
 80047d4:	e030      	b.n	8004838 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d105      	bne.n	80047f8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 ffa8 	bl	800574e <USBD_CtlSendStatus>
 80047fe:	e01b      	b.n	8004838 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004812:	2b03      	cmp	r3, #3
 8004814:	d10e      	bne.n	8004834 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	7afa      	ldrb	r2, [r7, #11]
 8004820:	4611      	mov	r1, r2
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	4798      	blx	r3
 8004826:	4603      	mov	r3, r0
 8004828:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	e002      	b.n	800483a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004834:	2303      	movs	r3, #3
 8004836:	e000      	b.n	800483a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	460b      	mov	r3, r1
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004850:	7afb      	ldrb	r3, [r7, #11]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d16a      	bne.n	800492c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3314      	adds	r3, #20
 800485a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004862:	2b02      	cmp	r3, #2
 8004864:	d155      	bne.n	8004912 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	429a      	cmp	r2, r3
 8004870:	d914      	bls.n	800489c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	461a      	mov	r2, r3
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 ff21 	bl	80056d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800488e:	2300      	movs	r3, #0
 8004890:	2200      	movs	r2, #0
 8004892:	2100      	movs	r1, #0
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f001 fb7d 	bl	8005f94 <USBD_LL_PrepareReceive>
 800489a:	e03a      	b.n	8004912 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d11c      	bne.n	80048e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d316      	bcc.n	80048e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20f      	bcs.n	80048e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 ff02 	bl	80056d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048d4:	2300      	movs	r3, #0
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f001 fb5a 	bl	8005f94 <USBD_LL_PrepareReceive>
 80048e0:	e017      	b.n	8004912 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d105      	bne.n	8004904 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f001 fa9a 	bl	8005e40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 ff31 	bl	8005774 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d123      	bne.n	8004964 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff fe9b 	bl	8004658 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800492a:	e01b      	b.n	8004964 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800493e:	2b03      	cmp	r3, #3
 8004940:	d10e      	bne.n	8004960 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	7afa      	ldrb	r2, [r7, #11]
 800494c:	4611      	mov	r1, r2
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	4798      	blx	r3
 8004952:	4603      	mov	r3, r0
 8004954:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	e002      	b.n	8004966 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004960:	2303      	movs	r3, #3
 8004962:	e000      	b.n	8004966 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049b2:	2340      	movs	r3, #64	; 0x40
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 f9fc 	bl	8005db6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2240      	movs	r2, #64	; 0x40
 80049ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 f9ee 	bl	8005db6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2204      	movs	r2, #4
 8004a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d105      	bne.n	8004a58 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d10b      	bne.n	8004a90 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6852      	ldr	r2, [r2, #4]
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
  }

  return USBD_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004b3a:	8a3b      	ldrh	r3, [r7, #16]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	b21a      	sxth	r2, r3
 8004b40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004b4a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d004      	beq.n	8004b7c <USBD_StdDevReq+0x24>
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d002      	beq.n	8004b7c <USBD_StdDevReq+0x24>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <USBD_StdDevReq+0x38>
 8004b7a:	e050      	b.n	8004c1e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8004b8e:	e04b      	b.n	8004c28 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	d83c      	bhi.n	8004c12 <USBD_StdDevReq+0xba>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <USBD_StdDevReq+0x48>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004c13 	.word	0x08004c13
 8004bac:	08004bff 	.word	0x08004bff
 8004bb0:	08004c13 	.word	0x08004c13
 8004bb4:	08004bd3 	.word	0x08004bd3
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004c13 	.word	0x08004c13
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bdd 	.word	0x08004bdd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9ce 	bl	8004f6c <USBD_GetDescriptor>
      break;
 8004bd0:	e024      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fb33 	bl	8005240 <USBD_SetAddress>
      break;
 8004bda:	e01f      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fb70 	bl	80052c4 <USBD_SetConfig>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]
      break;
 8004be8:	e018      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc0d 	bl	800540c <USBD_GetConfig>
      break;
 8004bf2:	e013      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fc3c 	bl	8005474 <USBD_GetStatus>
      break;
 8004bfc:	e00e      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fc6a 	bl	80054da <USBD_SetFeature>
      break;
 8004c06:	e009      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fc79 	bl	8005502 <USBD_ClrFeature>
      break;
 8004c10:	e004      	b.n	8004c1c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fccf 	bl	80055b8 <USBD_CtlError>
      break;
 8004c1a:	bf00      	nop
    }
    break;
 8004c1c:	e004      	b.n	8004c28 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fcc9 	bl	80055b8 <USBD_CtlError>
    break;
 8004c26:	bf00      	nop
  }

  return ret;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop

08004c34 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d003      	beq.n	8004c56 <USBD_StdItfReq+0x22>
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d001      	beq.n	8004c56 <USBD_StdItfReq+0x22>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d12a      	bne.n	8004cac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d81d      	bhi.n	8004c9e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	889b      	ldrh	r3, [r3, #4]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d813      	bhi.n	8004c94 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	88db      	ldrh	r3, [r3, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d110      	bne.n	8004ca8 <USBD_StdItfReq+0x74>
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10d      	bne.n	8004ca8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fd5e 	bl	800574e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004c92:	e009      	b.n	8004ca8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fc8e 	bl	80055b8 <USBD_CtlError>
      break;
 8004c9c:	e004      	b.n	8004ca8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fc89 	bl	80055b8 <USBD_CtlError>
      break;
 8004ca6:	e000      	b.n	8004caa <USBD_StdItfReq+0x76>
      break;
 8004ca8:	bf00      	nop
    }
    break;
 8004caa:	e004      	b.n	8004cb6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fc82 	bl	80055b8 <USBD_CtlError>
    break;
 8004cb4:	bf00      	nop
  }

  return ret;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	889b      	ldrh	r3, [r3, #4]
 8004cd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d004      	beq.n	8004cea <USBD_StdEPReq+0x2a>
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d002      	beq.n	8004cea <USBD_StdEPReq+0x2a>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <USBD_StdEPReq+0x3e>
 8004ce8:	e135      	b.n	8004f56 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8004cfc:	e130      	b.n	8004f60 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d03e      	beq.n	8004d84 <USBD_StdEPReq+0xc4>
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d002      	beq.n	8004d10 <USBD_StdEPReq+0x50>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d077      	beq.n	8004dfe <USBD_StdEPReq+0x13e>
 8004d0e:	e11c      	b.n	8004f4a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d002      	beq.n	8004d20 <USBD_StdEPReq+0x60>
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d015      	beq.n	8004d4a <USBD_StdEPReq+0x8a>
 8004d1e:	e02b      	b.n	8004d78 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <USBD_StdEPReq+0x80>
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d009      	beq.n	8004d40 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f885 	bl	8005e40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 f881 	bl	8005e40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004d3e:	e020      	b.n	8004d82 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fc38 	bl	80055b8 <USBD_CtlError>
        break;
 8004d48:	e01b      	b.n	8004d82 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10e      	bne.n	8004d70 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d52:	7bbb      	ldrb	r3, [r7, #14]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00b      	beq.n	8004d70 <USBD_StdEPReq+0xb0>
 8004d58:	7bbb      	ldrb	r3, [r7, #14]
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d008      	beq.n	8004d70 <USBD_StdEPReq+0xb0>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	88db      	ldrh	r3, [r3, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 f868 	bl	8005e40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fcec 	bl	800574e <USBD_CtlSendStatus>

        break;
 8004d76:	e004      	b.n	8004d82 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fc1c 	bl	80055b8 <USBD_CtlError>
        break;
 8004d80:	bf00      	nop
      }
      break;
 8004d82:	e0e7      	b.n	8004f54 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d002      	beq.n	8004d94 <USBD_StdEPReq+0xd4>
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d015      	beq.n	8004dbe <USBD_StdEPReq+0xfe>
 8004d92:	e02d      	b.n	8004df0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <USBD_StdEPReq+0xf4>
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d009      	beq.n	8004db4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 f84b 	bl	8005e40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004daa:	2180      	movs	r1, #128	; 0x80
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f847 	bl	8005e40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004db2:	e023      	b.n	8004dfc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fbfe 	bl	80055b8 <USBD_CtlError>
        break;
 8004dbc:	e01e      	b.n	8004dfc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	885b      	ldrh	r3, [r3, #2]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d119      	bne.n	8004dfa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 f852 	bl	8005e7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fcb7 	bl	800574e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
        }
        break;
 8004dee:	e004      	b.n	8004dfa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fbe0 	bl	80055b8 <USBD_CtlError>
        break;
 8004df8:	e000      	b.n	8004dfc <USBD_StdEPReq+0x13c>
        break;
 8004dfa:	bf00      	nop
      }
      break;
 8004dfc:	e0aa      	b.n	8004f54 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d002      	beq.n	8004e0e <USBD_StdEPReq+0x14e>
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d032      	beq.n	8004e72 <USBD_StdEPReq+0x1b2>
 8004e0c:	e097      	b.n	8004f3e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <USBD_StdEPReq+0x164>
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d004      	beq.n	8004e24 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fbcb 	bl	80055b8 <USBD_CtlError>
          break;
 8004e22:	e091      	b.n	8004f48 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da0b      	bge.n	8004e44 <USBD_StdEPReq+0x184>
 8004e2c:	7bbb      	ldrb	r3, [r7, #14]
 8004e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	3310      	adds	r3, #16
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3304      	adds	r3, #4
 8004e42:	e00b      	b.n	8004e5c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2202      	movs	r2, #2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fc15 	bl	800569a <USBD_CtlSendData>
        break;
 8004e70:	e06a      	b.n	8004f48 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da11      	bge.n	8004e9e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	f003 020f 	and.w	r2, r3, #15
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d117      	bne.n	8004ec4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb8e 	bl	80055b8 <USBD_CtlError>
            break;
 8004e9c:	e054      	b.n	8004f48 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004e9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb7b 	bl	80055b8 <USBD_CtlError>
            break;
 8004ec2:	e041      	b.n	8004f48 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	da0b      	bge.n	8004ee4 <USBD_StdEPReq+0x224>
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	3310      	adds	r3, #16
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	e00b      	b.n	8004efc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	3304      	adds	r3, #4
 8004efc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004efe:	7bbb      	ldrb	r3, [r7, #14]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <USBD_StdEPReq+0x24a>
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d103      	bne.n	8004f12 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e00e      	b.n	8004f30 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004f12:	7bbb      	ldrb	r3, [r7, #14]
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 ffd0 	bl	8005ebc <USBD_LL_IsStallEP>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e002      	b.n	8004f30 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2202      	movs	r2, #2
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fbaf 	bl	800569a <USBD_CtlSendData>
          break;
 8004f3c:	e004      	b.n	8004f48 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb39 	bl	80055b8 <USBD_CtlError>
        break;
 8004f46:	bf00      	nop
      }
      break;
 8004f48:	e004      	b.n	8004f54 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb33 	bl	80055b8 <USBD_CtlError>
      break;
 8004f52:	bf00      	nop
    }
    break;
 8004f54:	e004      	b.n	8004f60 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb2d 	bl	80055b8 <USBD_CtlError>
    break;
 8004f5e:	bf00      	nop
  }

  return ret;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	885b      	ldrh	r3, [r3, #2]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	f200 8128 	bhi.w	80051e2 <USBD_GetDescriptor+0x276>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <USBD_GetDescriptor+0x2c>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fcd 	.word	0x08004fcd
 8004fa0:	0800500d 	.word	0x0800500d
 8004fa4:	080051e3 	.word	0x080051e3
 8004fa8:	080051e3 	.word	0x080051e3
 8004fac:	08005183 	.word	0x08005183
 8004fb0:	080051af 	.word	0x080051af
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	7c12      	ldrb	r2, [r2, #16]
 8004fc0:	f107 0108 	add.w	r1, r7, #8
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
 8004fc8:	60f8      	str	r0, [r7, #12]
    break;
 8004fca:	e112      	b.n	80051f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7c1b      	ldrb	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10d      	bne.n	8004ff0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f107 0208 	add.w	r2, r7, #8
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4798      	blx	r3
 8004fe4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004fee:	e100      	b.n	80051f2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f107 0208 	add.w	r2, r7, #8
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4798      	blx	r3
 8005000:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	2202      	movs	r2, #2
 8005008:	701a      	strb	r2, [r3, #0]
    break;
 800500a:	e0f2      	b.n	80051f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	885b      	ldrh	r3, [r3, #2]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b05      	cmp	r3, #5
 8005014:	f200 80ac 	bhi.w	8005170 <USBD_GetDescriptor+0x204>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <USBD_GetDescriptor+0xb4>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005039 	.word	0x08005039
 8005024:	0800506d 	.word	0x0800506d
 8005028:	080050a1 	.word	0x080050a1
 800502c:	080050d5 	.word	0x080050d5
 8005030:	08005109 	.word	0x08005109
 8005034:	0800513d 	.word	0x0800513d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	7c12      	ldrb	r2, [r2, #16]
 8005050:	f107 0108 	add.w	r1, r7, #8
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
 8005058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800505a:	e091      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 faaa 	bl	80055b8 <USBD_CtlError>
        err++;
 8005064:	7afb      	ldrb	r3, [r7, #11]
 8005066:	3301      	adds	r3, #1
 8005068:	72fb      	strb	r3, [r7, #11]
      break;
 800506a:	e089      	b.n	8005180 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	7c12      	ldrb	r2, [r2, #16]
 8005084:	f107 0108 	add.w	r1, r7, #8
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
 800508c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800508e:	e077      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa90 	bl	80055b8 <USBD_CtlError>
        err++;
 8005098:	7afb      	ldrb	r3, [r7, #11]
 800509a:	3301      	adds	r3, #1
 800509c:	72fb      	strb	r3, [r7, #11]
      break;
 800509e:	e06f      	b.n	8005180 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	7c12      	ldrb	r2, [r2, #16]
 80050b8:	f107 0108 	add.w	r1, r7, #8
 80050bc:	4610      	mov	r0, r2
 80050be:	4798      	blx	r3
 80050c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80050c2:	e05d      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa76 	bl	80055b8 <USBD_CtlError>
        err++;
 80050cc:	7afb      	ldrb	r3, [r7, #11]
 80050ce:	3301      	adds	r3, #1
 80050d0:	72fb      	strb	r3, [r7, #11]
      break;
 80050d2:	e055      	b.n	8005180 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	7c12      	ldrb	r2, [r2, #16]
 80050ec:	f107 0108 	add.w	r1, r7, #8
 80050f0:	4610      	mov	r0, r2
 80050f2:	4798      	blx	r3
 80050f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80050f6:	e043      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa5c 	bl	80055b8 <USBD_CtlError>
        err++;
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	3301      	adds	r3, #1
 8005104:	72fb      	strb	r3, [r7, #11]
      break;
 8005106:	e03b      	b.n	8005180 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	7c12      	ldrb	r2, [r2, #16]
 8005120:	f107 0108 	add.w	r1, r7, #8
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
 8005128:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800512a:	e029      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa42 	bl	80055b8 <USBD_CtlError>
        err++;
 8005134:	7afb      	ldrb	r3, [r7, #11]
 8005136:	3301      	adds	r3, #1
 8005138:	72fb      	strb	r3, [r7, #11]
      break;
 800513a:	e021      	b.n	8005180 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	7c12      	ldrb	r2, [r2, #16]
 8005154:	f107 0108 	add.w	r1, r7, #8
 8005158:	4610      	mov	r0, r2
 800515a:	4798      	blx	r3
 800515c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800515e:	e00f      	b.n	8005180 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa28 	bl	80055b8 <USBD_CtlError>
        err++;
 8005168:	7afb      	ldrb	r3, [r7, #11]
 800516a:	3301      	adds	r3, #1
 800516c:	72fb      	strb	r3, [r7, #11]
      break;
 800516e:	e007      	b.n	8005180 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa20 	bl	80055b8 <USBD_CtlError>
      err++;
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	3301      	adds	r3, #1
 800517c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800517e:	bf00      	nop
    }
    break;
 8005180:	e037      	b.n	80051f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7c1b      	ldrb	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	f107 0208 	add.w	r2, r7, #8
 8005196:	4610      	mov	r0, r2
 8005198:	4798      	blx	r3
 800519a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800519c:	e029      	b.n	80051f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa09 	bl	80055b8 <USBD_CtlError>
      err++;
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	3301      	adds	r3, #1
 80051aa:	72fb      	strb	r3, [r7, #11]
    break;
 80051ac:	e021      	b.n	80051f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7c1b      	ldrb	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f107 0208 	add.w	r2, r7, #8
 80051c2:	4610      	mov	r0, r2
 80051c4:	4798      	blx	r3
 80051c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	2207      	movs	r2, #7
 80051ce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80051d0:	e00f      	b.n	80051f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9ef 	bl	80055b8 <USBD_CtlError>
      err++;
 80051da:	7afb      	ldrb	r3, [r7, #11]
 80051dc:	3301      	adds	r3, #1
 80051de:	72fb      	strb	r3, [r7, #11]
    break;
 80051e0:	e007      	b.n	80051f2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f9e7 	bl	80055b8 <USBD_CtlError>
    err++;
 80051ea:	7afb      	ldrb	r3, [r7, #11]
 80051ec:	3301      	adds	r3, #1
 80051ee:	72fb      	strb	r3, [r7, #11]
    break;
 80051f0:	bf00      	nop
  }

  if (err != 0U)
 80051f2:	7afb      	ldrb	r3, [r7, #11]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11e      	bne.n	8005236 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	88db      	ldrh	r3, [r3, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00e      	beq.n	8005224 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	88da      	ldrh	r2, [r3, #6]
 800520a:	893b      	ldrh	r3, [r7, #8]
 800520c:	4293      	cmp	r3, r2
 800520e:	bf28      	it	cs
 8005210:	4613      	movcs	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005216:	893b      	ldrh	r3, [r7, #8]
 8005218:	461a      	mov	r2, r3
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa3c 	bl	800569a <USBD_CtlSendData>
 8005222:	e009      	b.n	8005238 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9c6 	bl	80055b8 <USBD_CtlError>
 800522c:	e004      	b.n	8005238 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa8d 	bl	800574e <USBD_CtlSendStatus>
 8005234:	e000      	b.n	8005238 <USBD_GetDescriptor+0x2cc>
    return;
 8005236:	bf00      	nop
    }
  }
}
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop

08005240 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	889b      	ldrh	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d130      	bne.n	80052b4 <USBD_SetAddress+0x74>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	88db      	ldrh	r3, [r3, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d12c      	bne.n	80052b4 <USBD_SetAddress+0x74>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	885b      	ldrh	r3, [r3, #2]
 800525e:	2b7f      	cmp	r3, #127	; 0x7f
 8005260:	d828      	bhi.n	80052b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	885b      	ldrh	r3, [r3, #2]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005274:	2b03      	cmp	r3, #3
 8005276:	d104      	bne.n	8005282 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f99c 	bl	80055b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005280:	e01c      	b.n	80052bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fe40 	bl	8005f14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fa5a 	bl	800574e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052a8:	e008      	b.n	80052bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b2:	e003      	b.n	80052bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f97e 	bl	80055b8 <USBD_CtlError>
  }
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	885b      	ldrh	r3, [r3, #2]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <USBD_SetConfig+0x144>)
 80052da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80052dc:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <USBD_SetConfig+0x144>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d905      	bls.n	80052f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f966 	bl	80055b8 <USBD_CtlError>
    return USBD_FAIL;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e087      	b.n	8005400 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d002      	beq.n	8005300 <USBD_SetConfig+0x3c>
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d025      	beq.n	800534a <USBD_SetConfig+0x86>
 80052fe:	e071      	b.n	80053e4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005300:	4b41      	ldr	r3, [pc, #260]	; (8005408 <USBD_SetConfig+0x144>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01c      	beq.n	8005342 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005308:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <USBD_SetConfig+0x144>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005312:	4b3d      	ldr	r3, [pc, #244]	; (8005408 <USBD_SetConfig+0x144>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff f9a8 	bl	800466e <USBD_SetClassConfig>
 800531e:	4603      	mov	r3, r0
 8005320:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f944 	bl	80055b8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005330:	e065      	b.n	80053fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa0b 	bl	800574e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2203      	movs	r2, #3
 800533c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005340:	e05d      	b.n	80053fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa03 	bl	800574e <USBD_CtlSendStatus>
    break;
 8005348:	e059      	b.n	80053fe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <USBD_SetConfig+0x144>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d112      	bne.n	8005378 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <USBD_SetConfig+0x144>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005364:	4b28      	ldr	r3, [pc, #160]	; (8005408 <USBD_SetConfig+0x144>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff f99b 	bl	80046a6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f9ec 	bl	800574e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005376:	e042      	b.n	80053fe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <USBD_SetConfig+0x144>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d02a      	beq.n	80053dc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff f989 	bl	80046a6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005394:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <USBD_SetConfig+0x144>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <USBD_SetConfig+0x144>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff f962 	bl	800466e <USBD_SetClassConfig>
 80053aa:	4603      	mov	r3, r0
 80053ac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00f      	beq.n	80053d4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f8fe 	bl	80055b8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff f96e 	bl	80046a6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80053d2:	e014      	b.n	80053fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f9ba 	bl	800574e <USBD_CtlSendStatus>
    break;
 80053da:	e010      	b.n	80053fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9b6 	bl	800574e <USBD_CtlSendStatus>
    break;
 80053e2:	e00c      	b.n	80053fe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8e6 	bl	80055b8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <USBD_SetConfig+0x144>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff f957 	bl	80046a6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80053f8:	2303      	movs	r3, #3
 80053fa:	73fb      	strb	r3, [r7, #15]
    break;
 80053fc:	bf00      	nop
  }

  return ret;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200001f8 	.word	0x200001f8

0800540c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	88db      	ldrh	r3, [r3, #6]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d004      	beq.n	8005428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8c9 	bl	80055b8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005426:	e021      	b.n	800546c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542e:	2b01      	cmp	r3, #1
 8005430:	db17      	blt.n	8005462 <USBD_GetConfig+0x56>
 8005432:	2b02      	cmp	r3, #2
 8005434:	dd02      	ble.n	800543c <USBD_GetConfig+0x30>
 8005436:	2b03      	cmp	r3, #3
 8005438:	d00b      	beq.n	8005452 <USBD_GetConfig+0x46>
 800543a:	e012      	b.n	8005462 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3308      	adds	r3, #8
 8005446:	2201      	movs	r2, #1
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f925 	bl	800569a <USBD_CtlSendData>
      break;
 8005450:	e00c      	b.n	800546c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	2201      	movs	r2, #1
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f91d 	bl	800569a <USBD_CtlSendData>
      break;
 8005460:	e004      	b.n	800546c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8a7 	bl	80055b8 <USBD_CtlError>
      break;
 800546a:	bf00      	nop
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005484:	3b01      	subs	r3, #1
 8005486:	2b02      	cmp	r3, #2
 8005488:	d81e      	bhi.n	80054c8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d004      	beq.n	800549c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f88f 	bl	80055b8 <USBD_CtlError>
      break;
 800549a:	e01a      	b.n	80054d2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	330c      	adds	r3, #12
 80054bc:	2202      	movs	r2, #2
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8ea 	bl	800569a <USBD_CtlSendData>
    break;
 80054c6:	e004      	b.n	80054d2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f874 	bl	80055b8 <USBD_CtlError>
    break;
 80054d0:	bf00      	nop
  }
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	885b      	ldrh	r3, [r3, #2]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f92a 	bl	800574e <USBD_CtlSendStatus>
  }
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	3b01      	subs	r3, #1
 8005514:	2b02      	cmp	r3, #2
 8005516:	d80b      	bhi.n	8005530 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	885b      	ldrh	r3, [r3, #2]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10c      	bne.n	800553a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f910 	bl	800574e <USBD_CtlSendStatus>
      }
      break;
 800552e:	e004      	b.n	800553a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f840 	bl	80055b8 <USBD_CtlError>
      break;
 8005538:	e000      	b.n	800553c <USBD_ClrFeature+0x3a>
      break;
 800553a:	bf00      	nop
  }
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fad4 	bl	8004b1c <SWAPBYTE>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fac7 	bl	8004b1c <SWAPBYTE>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff faba 	bl	8004b1c <SWAPBYTE>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	80da      	strh	r2, [r3, #6]
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fc3b 	bl	8005e40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80055ca:	2100      	movs	r1, #0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fc37 	bl	8005e40 <USBD_LL_StallEP>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d036      	beq.n	800565e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80055f4:	6938      	ldr	r0, [r7, #16]
 80055f6:	f000 f836 	bl	8005666 <USBD_GetLen>
 80055fa:	4603      	mov	r3, r0
 80055fc:	3301      	adds	r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4413      	add	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	701a      	strb	r2, [r3, #0]
  idx++;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	3301      	adds	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	4413      	add	r3, r2
 8005620:	2203      	movs	r2, #3
 8005622:	701a      	strb	r2, [r3, #0]
  idx++;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	3301      	adds	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800562a:	e013      	b.n	8005654 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3301      	adds	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
    idx++;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	3301      	adds	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
    idx++;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	3301      	adds	r3, #1
 8005652:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e7      	bne.n	800562c <USBD_GetString+0x52>
 800565c:	e000      	b.n	8005660 <USBD_GetString+0x86>
    return;
 800565e:	bf00      	nop
  }
}
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005676:	e005      	b.n	8005684 <USBD_GetLen+0x1e>
  {
    len++;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	3301      	adds	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f5      	bne.n	8005678 <USBD_GetLen+0x12>
  }

  return len;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	2100      	movs	r1, #0
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fc46 	bl	8005f52 <USBD_LL_Transmit>

  return USBD_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	2100      	movs	r1, #0
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fc35 	bl	8005f52 <USBD_LL_Transmit>

  return USBD_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2203      	movs	r2, #3
 8005702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	2100      	movs	r1, #0
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fc39 	bl	8005f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	2100      	movs	r1, #0
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fc28 	bl	8005f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2204      	movs	r2, #4
 800575a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800575e:	2300      	movs	r3, #0
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fbf4 	bl	8005f52 <USBD_LL_Transmit>

  return USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2205      	movs	r2, #5
 8005780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005784:	2300      	movs	r3, #0
 8005786:	2200      	movs	r2, #0
 8005788:	2100      	movs	r1, #0
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fc02 	bl	8005f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80057a0:	2200      	movs	r2, #0
 80057a2:	4912      	ldr	r1, [pc, #72]	; (80057ec <MX_USB_DEVICE_Init+0x50>)
 80057a4:	4812      	ldr	r0, [pc, #72]	; (80057f0 <MX_USB_DEVICE_Init+0x54>)
 80057a6:	f7fe fef4 	bl	8004592 <USBD_Init>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80057b0:	f7fa ff7e 	bl	80006b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80057b4:	490f      	ldr	r1, [pc, #60]	; (80057f4 <MX_USB_DEVICE_Init+0x58>)
 80057b6:	480e      	ldr	r0, [pc, #56]	; (80057f0 <MX_USB_DEVICE_Init+0x54>)
 80057b8:	f7fe ff21 	bl	80045fe <USBD_RegisterClass>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80057c2:	f7fa ff75 	bl	80006b0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80057c6:	490c      	ldr	r1, [pc, #48]	; (80057f8 <MX_USB_DEVICE_Init+0x5c>)
 80057c8:	4809      	ldr	r0, [pc, #36]	; (80057f0 <MX_USB_DEVICE_Init+0x54>)
 80057ca:	f7fe fecd 	bl	8004568 <USBD_CUSTOM_HID_RegisterInterface>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80057d4:	f7fa ff6c 	bl	80006b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80057d8:	4805      	ldr	r0, [pc, #20]	; (80057f0 <MX_USB_DEVICE_Init+0x54>)
 80057da:	f7fe ff31 	bl	8004640 <USBD_Start>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80057e4:	f7fa ff64 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000124 	.word	0x20000124
 80057f0:	2000020c 	.word	0x2000020c
 80057f4:	2000000c 	.word	0x2000000c
 80057f8:	20000114 	.word	0x20000114

080057fc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005800:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005810:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	460a      	mov	r2, r1
 8005826:	71fb      	strb	r3, [r7, #7]
 8005828:	4613      	mov	r3, r2
 800582a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800582c:	4803      	ldr	r0, [pc, #12]	; (800583c <CUSTOM_HID_OutEvent_FS+0x20>)
 800582e:	f7fe fe53 	bl	80044d8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8005832:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	2000020c 	.word	0x2000020c

08005840 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2212      	movs	r2, #18
 8005850:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000140 	.word	0x20000140

08005864 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	6039      	str	r1, [r7, #0]
 800586e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2204      	movs	r2, #4
 8005874:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005876:	4b03      	ldr	r3, [pc, #12]	; (8005884 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000154 	.word	0x20000154

08005888 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d105      	bne.n	80058a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	4907      	ldr	r1, [pc, #28]	; (80058bc <USBD_FS_ProductStrDescriptor+0x34>)
 800589e:	4808      	ldr	r0, [pc, #32]	; (80058c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80058a0:	f7ff fe9b 	bl	80055da <USBD_GetString>
 80058a4:	e004      	b.n	80058b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	4904      	ldr	r1, [pc, #16]	; (80058bc <USBD_FS_ProductStrDescriptor+0x34>)
 80058aa:	4805      	ldr	r0, [pc, #20]	; (80058c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80058ac:	f7ff fe95 	bl	80055da <USBD_GetString>
  }
  return USBD_StrDesc;
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200004dc 	.word	0x200004dc
 80058c0:	08006240 	.word	0x08006240

080058c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	6039      	str	r1, [r7, #0]
 80058ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	4904      	ldr	r1, [pc, #16]	; (80058e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80058d4:	4804      	ldr	r0, [pc, #16]	; (80058e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80058d6:	f7ff fe80 	bl	80055da <USBD_GetString>
  return USBD_StrDesc;
 80058da:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200004dc 	.word	0x200004dc
 80058e8:	08006260 	.word	0x08006260

080058ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	221a      	movs	r2, #26
 80058fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80058fe:	f000 f843 	bl	8005988 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005902:	4b02      	ldr	r3, [pc, #8]	; (800590c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000158 	.word	0x20000158

08005910 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	4907      	ldr	r1, [pc, #28]	; (8005944 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005926:	4808      	ldr	r0, [pc, #32]	; (8005948 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005928:	f7ff fe57 	bl	80055da <USBD_GetString>
 800592c:	e004      	b.n	8005938 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	4904      	ldr	r1, [pc, #16]	; (8005944 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005932:	4805      	ldr	r0, [pc, #20]	; (8005948 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005934:	f7ff fe51 	bl	80055da <USBD_GetString>
  }
  return USBD_StrDesc;
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200004dc 	.word	0x200004dc
 8005948:	08006274 	.word	0x08006274

0800594c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	6039      	str	r1, [r7, #0]
 8005956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	4907      	ldr	r1, [pc, #28]	; (8005980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005962:	4808      	ldr	r0, [pc, #32]	; (8005984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005964:	f7ff fe39 	bl	80055da <USBD_GetString>
 8005968:	e004      	b.n	8005974 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800596e:	4805      	ldr	r0, [pc, #20]	; (8005984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005970:	f7ff fe33 	bl	80055da <USBD_GetString>
  }
  return USBD_StrDesc;
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200004dc 	.word	0x200004dc
 8005984:	08006288 	.word	0x08006288

08005988 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <Get_SerialNum+0x44>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005994:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <Get_SerialNum+0x48>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <Get_SerialNum+0x4c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80059ae:	2208      	movs	r2, #8
 80059b0:	4909      	ldr	r1, [pc, #36]	; (80059d8 <Get_SerialNum+0x50>)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f814 	bl	80059e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80059b8:	2204      	movs	r2, #4
 80059ba:	4908      	ldr	r1, [pc, #32]	; (80059dc <Get_SerialNum+0x54>)
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f000 f80f 	bl	80059e0 <IntToUnicode>
  }
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	1fff7a10 	.word	0x1fff7a10
 80059d0:	1fff7a14 	.word	0x1fff7a14
 80059d4:	1fff7a18 	.word	0x1fff7a18
 80059d8:	2000015a 	.word	0x2000015a
 80059dc:	2000016a 	.word	0x2000016a

080059e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
 80059f6:	e027      	b.n	8005a48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	0f1b      	lsrs	r3, r3, #28
 80059fc:	2b09      	cmp	r3, #9
 80059fe:	d80b      	bhi.n	8005a18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	0f1b      	lsrs	r3, r3, #28
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	440b      	add	r3, r1
 8005a10:	3230      	adds	r2, #48	; 0x30
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e00a      	b.n	8005a2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	0f1b      	lsrs	r3, r3, #28
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4619      	mov	r1, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	440b      	add	r3, r1
 8005a28:	3237      	adds	r2, #55	; 0x37
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	3301      	adds	r3, #1
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	3301      	adds	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
 8005a48:	7dfa      	ldrb	r2, [r7, #23]
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3d3      	bcc.n	80059f8 <IntToUnicode+0x18>
  }
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a7c:	d13a      	bne.n	8005af4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005aac:	230a      	movs	r3, #10
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab0:	f107 0314 	add.w	r3, r7, #20
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4812      	ldr	r0, [pc, #72]	; (8005b00 <HAL_PCD_MspInit+0xa4>)
 8005ab8:	f7fb f874 	bl	8000ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	6353      	str	r3, [r2, #52]	; 0x34
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_PCD_MspInit+0xa0>)
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	2043      	movs	r0, #67	; 0x43
 8005aea:	f7fb f824 	bl	8000b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005aee:	2043      	movs	r0, #67	; 0x43
 8005af0:	f7fb f83d 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005af4:	bf00      	nop
 8005af6:	3728      	adds	r7, #40	; 0x28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40020000 	.word	0x40020000

08005b04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f7fe fddb 	bl	80046d6 <USBD_LL_SetupStage>
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fe fe13 	bl	800477c <USBD_LL_DataOutStage>
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3348      	adds	r3, #72	; 0x48
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	4619      	mov	r1, r3
 8005b86:	f7fe fe5c 	bl	8004842 <USBD_LL_DataInStage>
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe ff60 	bl	8004a66 <USBD_LL_SOF>
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
 8005bc6:	e008      	b.n	8005bda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d102      	bne.n	8005bd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	e001      	b.n	8005bda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005bd6:	f7fa fd6b 	bl	80006b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe ff03 	bl	80049f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe febc 	bl	800496e <USBD_LL_Reset>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fefe 	bl	8004a10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_PCD_SuspendCallback+0x48>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <HAL_PCD_SuspendCallback+0x48>)
 8005c3a:	f043 0306 	orr.w	r3, r3, #6
 8005c3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe feed 	bl	8004a3a <USBD_LL_Resume>
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe ff18 	bl	8004ab4 <USBD_LL_IsoOUTIncomplete>
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fef9 	bl	8004a9a <USBD_LL_IsoINIncomplete>
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe ff05 	bl	8004ace <USBD_LL_DevConnected>
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe ff02 	bl	8004ae4 <USBD_LL_DevDisconnected>
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d13c      	bne.n	8005d72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005cf8:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <USBD_LL_Init+0x94>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005d0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d12:	2204      	movs	r2, #4
 8005d14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d18:	2202      	movs	r2, #2
 8005d1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d24:	2202      	movs	r2, #2
 8005d26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005d34:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d48:	f7fb f8f7 	bl	8000f3a <HAL_PCD_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005d52:	f7fa fcad 	bl	80006b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	4808      	ldr	r0, [pc, #32]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d5a:	f7fc fa3c 	bl	80021d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005d5e:	2240      	movs	r2, #64	; 0x40
 8005d60:	2100      	movs	r1, #0
 8005d62:	4806      	ldr	r0, [pc, #24]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d64:	f7fc f9f0 	bl	8002148 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4803      	ldr	r0, [pc, #12]	; (8005d7c <USBD_LL_Init+0x94>)
 8005d6e:	f7fc f9eb 	bl	8002148 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200006dc 	.word	0x200006dc

08005d80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fb f9ec 	bl	8001174 <HAL_PCD_Start>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f918 	bl	8005fd8 <USBD_Get_USB_Status>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	70fb      	strb	r3, [r7, #3]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70bb      	strb	r3, [r7, #2]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005dde:	78bb      	ldrb	r3, [r7, #2]
 8005de0:	883a      	ldrh	r2, [r7, #0]
 8005de2:	78f9      	ldrb	r1, [r7, #3]
 8005de4:	f7fb fdd0 	bl	8001988 <HAL_PCD_EP_Open>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f8f2 	bl	8005fd8 <USBD_Get_USB_Status>
 8005df4:	4603      	mov	r3, r0
 8005df6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fb fe19 	bl	8001a58 <HAL_PCD_EP_Close>
 8005e26:	4603      	mov	r3, r0
 8005e28:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f8d3 	bl	8005fd8 <USBD_Get_USB_Status>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fb fed9 	bl	8001c16 <HAL_PCD_EP_SetStall>
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f8b4 	bl	8005fd8 <USBD_Get_USB_Status>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb ff1e 	bl	8001cde <HAL_PCD_EP_ClrStall>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f895 	bl	8005fd8 <USBD_Get_USB_Status>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ece:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	da0b      	bge.n	8005ef0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	333e      	adds	r3, #62	; 0x3e
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	e00b      	b.n	8005f08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fb fd03 	bl	800193e <HAL_PCD_SetAddress>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f84a 	bl	8005fd8 <USBD_Get_USB_Status>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005f70:	7af9      	ldrb	r1, [r7, #11]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	f7fb fe04 	bl	8001b82 <HAL_PCD_EP_Transmit>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f829 	bl	8005fd8 <USBD_Get_USB_Status>
 8005f86:	4603      	mov	r3, r0
 8005f88:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005f8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005fb2:	7af9      	ldrb	r1, [r7, #11]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	f7fb fd98 	bl	8001aec <HAL_PCD_EP_Receive>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f808 	bl	8005fd8 <USBD_Get_USB_Status>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005fcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d817      	bhi.n	800601c <USBD_Get_USB_Status+0x44>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <USBD_Get_USB_Status+0x1c>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	0800600b 	.word	0x0800600b
 8005ffc:	08006011 	.word	0x08006011
 8006000:	08006017 	.word	0x08006017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]
    break;
 8006008:	e00b      	b.n	8006022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800600a:	2303      	movs	r3, #3
 800600c:	73fb      	strb	r3, [r7, #15]
    break;
 800600e:	e008      	b.n	8006022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
    break;
 8006014:	e005      	b.n	8006022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
    break;
 800601a:	e002      	b.n	8006022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800601c:	2303      	movs	r3, #3
 800601e:	73fb      	strb	r3, [r7, #15]
    break;
 8006020:	bf00      	nop
  }
  return usb_status;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <__errno>:
 8006030:	4b01      	ldr	r3, [pc, #4]	; (8006038 <__errno+0x8>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000174 	.word	0x20000174

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4e0d      	ldr	r6, [pc, #52]	; (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	; (8006078 <__libc_init_array+0x3c>)
 8006042:	1ba4      	subs	r4, r4, r6
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2500      	movs	r5, #0
 8006048:	42a5      	cmp	r5, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4e0b      	ldr	r6, [pc, #44]	; (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	; (8006080 <__libc_init_array+0x44>)
 8006050:	f000 f8ea 	bl	8006228 <_init>
 8006054:	1ba4      	subs	r4, r4, r6
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2500      	movs	r5, #0
 800605a:	42a5      	cmp	r5, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006064:	4798      	blx	r3
 8006066:	3501      	adds	r5, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800606e:	4798      	blx	r3
 8006070:	3501      	adds	r5, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	080062b8 	.word	0x080062b8
 8006078:	080062b8 	.word	0x080062b8
 800607c:	080062b8 	.word	0x080062b8
 8006080:	080062bc 	.word	0x080062bc

08006084 <malloc>:
 8006084:	4b02      	ldr	r3, [pc, #8]	; (8006090 <malloc+0xc>)
 8006086:	4601      	mov	r1, r0
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	f000 b861 	b.w	8006150 <_malloc_r>
 800608e:	bf00      	nop
 8006090:	20000174 	.word	0x20000174

08006094 <free>:
 8006094:	4b02      	ldr	r3, [pc, #8]	; (80060a0 <free+0xc>)
 8006096:	4601      	mov	r1, r0
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f000 b80b 	b.w	80060b4 <_free_r>
 800609e:	bf00      	nop
 80060a0:	20000174 	.word	0x20000174

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <_free_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4605      	mov	r5, r0
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d045      	beq.n	8006148 <_free_r+0x94>
 80060bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c0:	1f0c      	subs	r4, r1, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfb8      	it	lt
 80060c6:	18e4      	addlt	r4, r4, r3
 80060c8:	f000 f8ac 	bl	8006224 <__malloc_lock>
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <_free_r+0x98>)
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	4610      	mov	r0, r2
 80060d2:	b933      	cbnz	r3, 80060e2 <_free_r+0x2e>
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	6014      	str	r4, [r2, #0]
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060de:	f000 b8a2 	b.w	8006226 <__malloc_unlock>
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	d90c      	bls.n	8006100 <_free_r+0x4c>
 80060e6:	6821      	ldr	r1, [r4, #0]
 80060e8:	1862      	adds	r2, r4, r1
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bf04      	itt	eq
 80060ee:	681a      	ldreq	r2, [r3, #0]
 80060f0:	685b      	ldreq	r3, [r3, #4]
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	bf04      	itt	eq
 80060f6:	1852      	addeq	r2, r2, r1
 80060f8:	6022      	streq	r2, [r4, #0]
 80060fa:	6004      	str	r4, [r0, #0]
 80060fc:	e7ec      	b.n	80060d8 <_free_r+0x24>
 80060fe:	4613      	mov	r3, r2
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	b10a      	cbz	r2, 8006108 <_free_r+0x54>
 8006104:	42a2      	cmp	r2, r4
 8006106:	d9fa      	bls.n	80060fe <_free_r+0x4a>
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	1858      	adds	r0, r3, r1
 800610c:	42a0      	cmp	r0, r4
 800610e:	d10b      	bne.n	8006128 <_free_r+0x74>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	4401      	add	r1, r0
 8006114:	1858      	adds	r0, r3, r1
 8006116:	4282      	cmp	r2, r0
 8006118:	6019      	str	r1, [r3, #0]
 800611a:	d1dd      	bne.n	80060d8 <_free_r+0x24>
 800611c:	6810      	ldr	r0, [r2, #0]
 800611e:	6852      	ldr	r2, [r2, #4]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	4401      	add	r1, r0
 8006124:	6019      	str	r1, [r3, #0]
 8006126:	e7d7      	b.n	80060d8 <_free_r+0x24>
 8006128:	d902      	bls.n	8006130 <_free_r+0x7c>
 800612a:	230c      	movs	r3, #12
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	e7d3      	b.n	80060d8 <_free_r+0x24>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	1821      	adds	r1, r4, r0
 8006134:	428a      	cmp	r2, r1
 8006136:	bf04      	itt	eq
 8006138:	6811      	ldreq	r1, [r2, #0]
 800613a:	6852      	ldreq	r2, [r2, #4]
 800613c:	6062      	str	r2, [r4, #4]
 800613e:	bf04      	itt	eq
 8006140:	1809      	addeq	r1, r1, r0
 8006142:	6021      	streq	r1, [r4, #0]
 8006144:	605c      	str	r4, [r3, #4]
 8006146:	e7c7      	b.n	80060d8 <_free_r+0x24>
 8006148:	bd38      	pop	{r3, r4, r5, pc}
 800614a:	bf00      	nop
 800614c:	200001fc 	.word	0x200001fc

08006150 <_malloc_r>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	1ccd      	adds	r5, r1, #3
 8006154:	f025 0503 	bic.w	r5, r5, #3
 8006158:	3508      	adds	r5, #8
 800615a:	2d0c      	cmp	r5, #12
 800615c:	bf38      	it	cc
 800615e:	250c      	movcc	r5, #12
 8006160:	2d00      	cmp	r5, #0
 8006162:	4606      	mov	r6, r0
 8006164:	db01      	blt.n	800616a <_malloc_r+0x1a>
 8006166:	42a9      	cmp	r1, r5
 8006168:	d903      	bls.n	8006172 <_malloc_r+0x22>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	2000      	movs	r0, #0
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	f000 f857 	bl	8006224 <__malloc_lock>
 8006176:	4a21      	ldr	r2, [pc, #132]	; (80061fc <_malloc_r+0xac>)
 8006178:	6814      	ldr	r4, [r2, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	b991      	cbnz	r1, 80061a4 <_malloc_r+0x54>
 800617e:	4c20      	ldr	r4, [pc, #128]	; (8006200 <_malloc_r+0xb0>)
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	b91b      	cbnz	r3, 800618c <_malloc_r+0x3c>
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f83d 	bl	8006204 <_sbrk_r>
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	4629      	mov	r1, r5
 800618e:	4630      	mov	r0, r6
 8006190:	f000 f838 	bl	8006204 <_sbrk_r>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d124      	bne.n	80061e2 <_malloc_r+0x92>
 8006198:	230c      	movs	r3, #12
 800619a:	6033      	str	r3, [r6, #0]
 800619c:	4630      	mov	r0, r6
 800619e:	f000 f842 	bl	8006226 <__malloc_unlock>
 80061a2:	e7e4      	b.n	800616e <_malloc_r+0x1e>
 80061a4:	680b      	ldr	r3, [r1, #0]
 80061a6:	1b5b      	subs	r3, r3, r5
 80061a8:	d418      	bmi.n	80061dc <_malloc_r+0x8c>
 80061aa:	2b0b      	cmp	r3, #11
 80061ac:	d90f      	bls.n	80061ce <_malloc_r+0x7e>
 80061ae:	600b      	str	r3, [r1, #0]
 80061b0:	50cd      	str	r5, [r1, r3]
 80061b2:	18cc      	adds	r4, r1, r3
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 f836 	bl	8006226 <__malloc_unlock>
 80061ba:	f104 000b 	add.w	r0, r4, #11
 80061be:	1d23      	adds	r3, r4, #4
 80061c0:	f020 0007 	bic.w	r0, r0, #7
 80061c4:	1ac3      	subs	r3, r0, r3
 80061c6:	d0d3      	beq.n	8006170 <_malloc_r+0x20>
 80061c8:	425a      	negs	r2, r3
 80061ca:	50e2      	str	r2, [r4, r3]
 80061cc:	e7d0      	b.n	8006170 <_malloc_r+0x20>
 80061ce:	428c      	cmp	r4, r1
 80061d0:	684b      	ldr	r3, [r1, #4]
 80061d2:	bf16      	itet	ne
 80061d4:	6063      	strne	r3, [r4, #4]
 80061d6:	6013      	streq	r3, [r2, #0]
 80061d8:	460c      	movne	r4, r1
 80061da:	e7eb      	b.n	80061b4 <_malloc_r+0x64>
 80061dc:	460c      	mov	r4, r1
 80061de:	6849      	ldr	r1, [r1, #4]
 80061e0:	e7cc      	b.n	800617c <_malloc_r+0x2c>
 80061e2:	1cc4      	adds	r4, r0, #3
 80061e4:	f024 0403 	bic.w	r4, r4, #3
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d005      	beq.n	80061f8 <_malloc_r+0xa8>
 80061ec:	1a21      	subs	r1, r4, r0
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 f808 	bl	8006204 <_sbrk_r>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d0cf      	beq.n	8006198 <_malloc_r+0x48>
 80061f8:	6025      	str	r5, [r4, #0]
 80061fa:	e7db      	b.n	80061b4 <_malloc_r+0x64>
 80061fc:	200001fc 	.word	0x200001fc
 8006200:	20000200 	.word	0x20000200

08006204 <_sbrk_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4c06      	ldr	r4, [pc, #24]	; (8006220 <_sbrk_r+0x1c>)
 8006208:	2300      	movs	r3, #0
 800620a:	4605      	mov	r5, r0
 800620c:	4608      	mov	r0, r1
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	f7fa fab6 	bl	8000780 <_sbrk>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_sbrk_r+0x1a>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	b103      	cbz	r3, 800621e <_sbrk_r+0x1a>
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	20000ae4 	.word	0x20000ae4

08006224 <__malloc_lock>:
 8006224:	4770      	bx	lr

08006226 <__malloc_unlock>:
 8006226:	4770      	bx	lr

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
