
game_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000797c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd4  08007bd4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bdc  08007bdc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  200001d4  08007db8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08007db8  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b8a  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc2  00000000  00000000  00032d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00035a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00036610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002361e  00000000  00000000  00037078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbd5  00000000  00000000  0005a696  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3ee4  00000000  00000000  0006826b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c14f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  0012c1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007aec 	.word	0x08007aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	08007aec 	.word	0x08007aec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <KeypadScan>:
void Line4ScanStart(KeypadSide side);
uint32_t Line4ScanDetection(KeypadSide side);
void Line4ScanOver(KeypadSide side);

uint32_t KeypadScan(KeypadSide side)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d101      	bne.n	80004dc <KeypadScan+0x14>
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <KeypadScan+0x138>)
 80004da:	e000      	b.n	80004de <KeypadScan+0x16>
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <KeypadScan+0x13c>)
 80004de:	60bb      	str	r3, [r7, #8]

	switch(*CurrentKeyState)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b0e      	cmp	r3, #14
 80004e6:	f200 8085 	bhi.w	80005f4 <KeypadScan+0x12c>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <KeypadScan+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	0800052d 	.word	0x0800052d
 80004f4:	0800053b 	.word	0x0800053b
 80004f8:	08000547 	.word	0x08000547
 80004fc:	08000555 	.word	0x08000555
 8000500:	08000563 	.word	0x08000563
 8000504:	0800056f 	.word	0x0800056f
 8000508:	0800057d 	.word	0x0800057d
 800050c:	0800058b 	.word	0x0800058b
 8000510:	08000597 	.word	0x08000597
 8000514:	080005a5 	.word	0x080005a5
 8000518:	080005b3 	.word	0x080005b3
 800051c:	080005bf 	.word	0x080005bf
 8000520:	080005cd 	.word	0x080005cd
 8000524:	080005db 	.word	0x080005db
 8000528:	080005e7 	.word	0x080005e7
	{
		case GND_START: ReValue = KEY_VALUE_NULL; GndScanStart(side); break;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb3a 	bl	8000bac <GndScanStart>
 8000538:	e05c      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_DETECTION: ReValue = GndScanDetection(side); break;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fbbd 	bl	8000cbc <GndScanDetection>
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	e056      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_OVER: ReValue = KEY_VALUE_NULL; GndScanOver(side); break;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fcc3 	bl	8000ed8 <GndScanOver>
 8000552:	e04f      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE1_START: ReValue = KEY_VALUE_NULL; Line1ScanStart(side); break;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd40 	bl	8000fe0 <Line1ScanStart>
 8000560:	e048      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_DETECTION: ReValue = Line1ScanDetection(side); break;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fdff 	bl	8001168 <Line1ScanDetection>
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	e042      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_OVER: ReValue = KEY_VALUE_NULL; Line1ScanOver(side); break;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fec5 	bl	8001304 <Line1ScanOver>
 800057a:	e03b      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE2_START: ReValue = KEY_VALUE_NULL; Line2ScanStart(side); break;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ff2e 	bl	80013e4 <Line2ScanStart>
 8000588:	e034      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_DETECTION: ReValue = Line2ScanDetection(side); break;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff89 	bl	80014a4 <Line2ScanDetection>
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	e02e      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_OVER: ReValue = KEY_VALUE_NULL; Line2ScanOver(side); break;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f823 	bl	80015e8 <Line2ScanOver>
 80005a2:	e027      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE3_START: ReValue = KEY_VALUE_NULL; Line3ScanStart(side); break;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f878 	bl	80016a0 <Line3ScanStart>
 80005b0:	e020      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_DETECTION: ReValue = Line3ScanDetection(side); break;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f8bf 	bl	8001738 <Line3ScanDetection>
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	e01a      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_OVER: ReValue = KEY_VALUE_NULL; Line3ScanOver(side); break;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f92f 	bl	8001828 <Line3ScanOver>
 80005ca:	e013      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE4_START: ReValue = KEY_VALUE_NULL; Line4ScanStart(side); break;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f970 	bl	80018b8 <Line4ScanStart>
 80005d8:	e00c      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_DETECTION: ReValue = Line4ScanDetection(side); break;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f9a3 	bl	8001928 <Line4ScanDetection>
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	e006      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_OVER: ReValue = KEY_VALUE_NULL; Line4ScanOver(side); break;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f9d3 	bl	8001998 <Line4ScanOver>
 80005f2:	bf00      	nop
	}

	return ReValue;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0
 8000604:	200001f1 	.word	0x200001f1

08000608 <ConfigurationGnd>:
	}
}


void ConfigurationGnd(KeypadSide side)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <ConfigurationGnd+0xc0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <ConfigurationGnd+0x4e>
 8000650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000654:	e000      	b.n	8000658 <ConfigurationGnd+0x50>
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <ConfigurationGnd+0x5c>
 800065e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000662:	e000      	b.n	8000666 <ConfigurationGnd+0x5e>
 8000664:	2308      	movs	r3, #8
 8000666:	4313      	orrs	r3, r2
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	2a00      	cmp	r2, #0
 800066c:	d102      	bne.n	8000674 <ConfigurationGnd+0x6c>
 800066e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000672:	e000      	b.n	8000676 <ConfigurationGnd+0x6e>
 8000674:	2204      	movs	r2, #4
 8000676:	4313      	orrs	r3, r2
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	2a00      	cmp	r2, #0
 800067c:	d102      	bne.n	8000684 <ConfigurationGnd+0x7c>
 800067e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000682:	e000      	b.n	8000686 <ConfigurationGnd+0x7e>
 8000684:	2202      	movs	r2, #2
 8000686:	4313      	orrs	r3, r2
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	2a00      	cmp	r2, #0
 800068c:	d102      	bne.n	8000694 <ConfigurationGnd+0x8c>
 800068e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000692:	e000      	b.n	8000696 <ConfigurationGnd+0x8e>
 8000694:	2201      	movs	r2, #1
 8000696:	4313      	orrs	r3, r2
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <ConfigurationGnd+0xa8>
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <ConfigurationGnd+0xc4>)
 80006ae:	e000      	b.n	80006b2 <ConfigurationGnd+0xaa>
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <ConfigurationGnd+0xc8>)
 80006b2:	f107 0214 	add.w	r2, r7, #20
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fed5 	bl	8002468 <HAL_GPIO_Init>
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <ConfigurationLine1>:

void ConfigurationLine1(KeypadSide side)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a3b      	ldr	r2, [pc, #236]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <ConfigurationLine1+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <ConfigurationLine1+0x100>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a34      	ldr	r2, [pc, #208]	; (80007d4 <ConfigurationLine1+0x100>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <ConfigurationLine1+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <ConfigurationLine1+0x4e>
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	e000      	b.n	8000724 <ConfigurationLine1+0x50>
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <ConfigurationLine1+0x64>
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <ConfigurationLine1+0x104>)
 8000736:	e000      	b.n	800073a <ConfigurationLine1+0x66>
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <ConfigurationLine1+0x108>)
 800073a:	f107 0214 	add.w	r2, r7, #20
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fe91 	bl	8002468 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <ConfigurationLine1+0x7e>
 800074c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000750:	e000      	b.n	8000754 <ConfigurationLine1+0x80>
 8000752:	2208      	movs	r2, #8
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <ConfigurationLine1+0x8c>
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	e000      	b.n	8000762 <ConfigurationLine1+0x8e>
 8000760:	2304      	movs	r3, #4
 8000762:	4313      	orrs	r3, r2
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	2a00      	cmp	r2, #0
 8000768:	d102      	bne.n	8000770 <ConfigurationLine1+0x9c>
 800076a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800076e:	e000      	b.n	8000772 <ConfigurationLine1+0x9e>
 8000770:	2202      	movs	r2, #2
 8000772:	4313      	orrs	r3, r2
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	2a00      	cmp	r2, #0
 8000778:	d102      	bne.n	8000780 <ConfigurationLine1+0xac>
 800077a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800077e:	e000      	b.n	8000782 <ConfigurationLine1+0xae>
 8000780:	2201      	movs	r2, #1
 8000782:	4313      	orrs	r3, r2
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <ConfigurationLine1+0xc8>
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ConfigurationLine1+0x104>)
 800079a:	e000      	b.n	800079e <ConfigurationLine1+0xca>
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ConfigurationLine1+0x108>)
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe5f 	bl	8002468 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_SET);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <ConfigurationLine1+0xe0>
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <ConfigurationLine1+0x104>)
 80007b2:	e000      	b.n	80007b6 <ConfigurationLine1+0xe2>
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <ConfigurationLine1+0x108>)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <ConfigurationLine1+0xee>
 80007bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c0:	e000      	b.n	80007c4 <ConfigurationLine1+0xf0>
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f002 f800 	bl	80027cc <HAL_GPIO_WritePin>
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <ConfigurationLine2>:

void ConfigurationLine2(KeypadSide side)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <ConfigurationLine2+0x124>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a44      	ldr	r2, [pc, #272]	; (8000904 <ConfigurationLine2+0x124>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <ConfigurationLine2+0x124>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <ConfigurationLine2+0x124>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <ConfigurationLine2+0x124>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <ConfigurationLine2+0x124>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <ConfigurationLine2+0x4e>
 8000828:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800082c:	e000      	b.n	8000830 <ConfigurationLine2+0x50>
 800082e:	2240      	movs	r2, #64	; 0x40
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <ConfigurationLine2+0x5c>
 8000836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800083a:	e000      	b.n	800083e <ConfigurationLine2+0x5e>
 800083c:	2308      	movs	r3, #8
 800083e:	4313      	orrs	r3, r2
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <ConfigurationLine2+0x74>
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <ConfigurationLine2+0x128>)
 8000852:	e000      	b.n	8000856 <ConfigurationLine2+0x76>
 8000854:	4b2d      	ldr	r3, [pc, #180]	; (800090c <ConfigurationLine2+0x12c>)
 8000856:	f107 0214 	add.w	r2, r7, #20
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fe03 	bl	8002468 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <ConfigurationLine2+0x8e>
 8000868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086c:	e000      	b.n	8000870 <ConfigurationLine2+0x90>
 800086e:	2204      	movs	r2, #4
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <ConfigurationLine2+0x9c>
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	e000      	b.n	800087e <ConfigurationLine2+0x9e>
 800087c:	2302      	movs	r3, #2
 800087e:	4313      	orrs	r3, r2
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	2a00      	cmp	r2, #0
 8000884:	d102      	bne.n	800088c <ConfigurationLine2+0xac>
 8000886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088a:	e000      	b.n	800088e <ConfigurationLine2+0xae>
 800088c:	2201      	movs	r2, #1
 800088e:	4313      	orrs	r3, r2
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <ConfigurationLine2+0xc8>
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <ConfigurationLine2+0x128>)
 80008a6:	e000      	b.n	80008aa <ConfigurationLine2+0xca>
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <ConfigurationLine2+0x12c>)
 80008aa:	f107 0214 	add.w	r2, r7, #20
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdd9 	bl	8002468 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_2(side), GPIO_PIN_SET);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <ConfigurationLine2+0xe0>
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <ConfigurationLine2+0x128>)
 80008be:	e000      	b.n	80008c2 <ConfigurationLine2+0xe2>
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <ConfigurationLine2+0x12c>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <ConfigurationLine2+0xee>
 80008c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008cc:	e000      	b.n	80008d0 <ConfigurationLine2+0xf0>
 80008ce:	2308      	movs	r3, #8
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f001 ff7a 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_RESET);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <ConfigurationLine2+0x102>
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <ConfigurationLine2+0x128>)
 80008e0:	e000      	b.n	80008e4 <ConfigurationLine2+0x104>
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <ConfigurationLine2+0x12c>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <ConfigurationLine2+0x110>
 80008ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ee:	e000      	b.n	80008f2 <ConfigurationLine2+0x112>
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 ff69 	bl	80027cc <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40020c00 	.word	0x40020c00

08000910 <ConfigurationLine3>:

void ConfigurationLine3(KeypadSide side)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <ConfigurationLine3+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <ConfigurationLine3+0x134>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <ConfigurationLine3+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <ConfigurationLine3+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <ConfigurationLine3+0x134>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <ConfigurationLine3+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <ConfigurationLine3+0x4e>
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	e000      	b.n	8000960 <ConfigurationLine3+0x50>
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <ConfigurationLine3+0x5c>
 8000966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800096a:	e000      	b.n	800096e <ConfigurationLine3+0x5e>
 800096c:	2308      	movs	r3, #8
 800096e:	4313      	orrs	r3, r2
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	2a00      	cmp	r2, #0
 8000974:	d102      	bne.n	800097c <ConfigurationLine3+0x6c>
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	e000      	b.n	800097e <ConfigurationLine3+0x6e>
 800097c:	2204      	movs	r2, #4
 800097e:	4313      	orrs	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <ConfigurationLine3+0x84>
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <ConfigurationLine3+0x138>)
 8000992:	e000      	b.n	8000996 <ConfigurationLine3+0x86>
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000996:	f107 0214 	add.w	r2, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fd63 	bl	8002468 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_4(side) | IO_KEY_5(side);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <ConfigurationLine3+0x9e>
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	e000      	b.n	80009b0 <ConfigurationLine3+0xa0>
 80009ae:	2202      	movs	r2, #2
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <ConfigurationLine3+0xac>
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	e000      	b.n	80009be <ConfigurationLine3+0xae>
 80009bc:	2301      	movs	r3, #1
 80009be:	4313      	orrs	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d101      	bne.n	80009d8 <ConfigurationLine3+0xc8>
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <ConfigurationLine3+0x138>)
 80009d6:	e000      	b.n	80009da <ConfigurationLine3+0xca>
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009da:	f107 0214 	add.w	r2, r7, #20
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fd41 	bl	8002468 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side), GPIO_PIN_RESET);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <ConfigurationLine3+0xe0>
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <ConfigurationLine3+0x138>)
 80009ee:	e000      	b.n	80009f2 <ConfigurationLine3+0xe2>
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <ConfigurationLine3+0xec>
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <ConfigurationLine3+0x140>)
 80009fa:	e000      	b.n	80009fe <ConfigurationLine3+0xee>
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <ConfigurationLine3+0xfa>
 8000a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a08:	e000      	b.n	8000a0c <ConfigurationLine3+0xfc>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f001 fed9 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_3(side), GPIO_PIN_SET);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <ConfigurationLine3+0x114>
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ConfigurationLine3+0x138>)
 8000a22:	e000      	b.n	8000a26 <ConfigurationLine3+0x116>
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <ConfigurationLine3+0x122>
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	e000      	b.n	8000a34 <ConfigurationLine3+0x124>
 8000a32:	2304      	movs	r3, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 fec8 	bl	80027cc <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	ffff8000 	.word	0xffff8000

08000a54 <ConfigurationLine4>:

void ConfigurationLine4(KeypadSide side)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <ConfigurationLine4+0x4e>
 8000a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa0:	e000      	b.n	8000aa4 <ConfigurationLine4+0x50>
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <ConfigurationLine4+0x5c>
 8000aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aae:	e000      	b.n	8000ab2 <ConfigurationLine4+0x5e>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d102      	bne.n	8000ac0 <ConfigurationLine4+0x6c>
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	e000      	b.n	8000ac2 <ConfigurationLine4+0x6e>
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d102      	bne.n	8000ad0 <ConfigurationLine4+0x7c>
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	e000      	b.n	8000ad2 <ConfigurationLine4+0x7e>
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <ConfigurationLine4+0x94>
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000ae6:	e000      	b.n	8000aea <ConfigurationLine4+0x96>
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000aea:	f107 0214 	add.w	r2, r7, #20
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fcb9 	bl	8002468 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_5(side);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <ConfigurationLine4+0xae>
 8000afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b00:	e000      	b.n	8000b04 <ConfigurationLine4+0xb0>
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <ConfigurationLine4+0xc8>
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b1a:	e000      	b.n	8000b1e <ConfigurationLine4+0xca>
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b1e:	f107 0214 	add.w	r2, r7, #20
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fc9f 	bl	8002468 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side), GPIO_PIN_RESET);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <ConfigurationLine4+0xe0>
 8000b30:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b32:	e000      	b.n	8000b36 <ConfigurationLine4+0xe2>
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <ConfigurationLine4+0xec>
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <ConfigurationLine4+0x154>)
 8000b3e:	e000      	b.n	8000b42 <ConfigurationLine4+0xee>
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <ConfigurationLine4+0xfa>
 8000b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4c:	e000      	b.n	8000b50 <ConfigurationLine4+0xfc>
 8000b4e:	2308      	movs	r3, #8
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d102      	bne.n	8000b60 <ConfigurationLine4+0x10c>
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	e000      	b.n	8000b62 <ConfigurationLine4+0x10e>
 8000b60:	2204      	movs	r2, #4
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f001 fe2e 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_4(side), GPIO_PIN_SET);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <ConfigurationLine4+0x126>
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b78:	e000      	b.n	8000b7c <ConfigurationLine4+0x128>
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <ConfigurationLine4+0x134>
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	e000      	b.n	8000b8a <ConfigurationLine4+0x136>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f001 fe1d 	bl	80027cc <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	ffff8000 	.word	0xffff8000

08000bac <GndScanStart>:

void GndScanStart(KeypadSide side)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	ConfigurationGnd(side);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd25 	bl	8000608 <ConfigurationGnd>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <GndScanStart+0x1c>
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <GndScanStart+0x100>)
 8000bc6:	e000      	b.n	8000bca <GndScanStart+0x1e>
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <GndScanStart+0x104>)
 8000bca:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <GndScanStart+0x2a>
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <GndScanStart+0x108>)
 8000bd4:	e000      	b.n	8000bd8 <GndScanStart+0x2c>
 8000bd6:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <GndScanStart+0x10c>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <GndScanStart+0x38>
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	e000      	b.n	8000be6 <GndScanStart+0x3a>
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f001 fdd7 	bl	800279c <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d04f      	beq.n	8000c94 <GndScanStart+0xe8>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <GndScanStart+0x52>
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <GndScanStart+0x108>)
 8000bfc:	e000      	b.n	8000c00 <GndScanStart+0x54>
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <GndScanStart+0x10c>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <GndScanStart+0x60>
 8000c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c0a:	e000      	b.n	8000c0e <GndScanStart+0x62>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4610      	mov	r0, r2
 8000c12:	f001 fdc3 	bl	800279c <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d03b      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <GndScanStart+0x7a>
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <GndScanStart+0x108>)
 8000c24:	e000      	b.n	8000c28 <GndScanStart+0x7c>
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <GndScanStart+0x10c>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <GndScanStart+0x88>
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	e000      	b.n	8000c36 <GndScanStart+0x8a>
 8000c34:	2304      	movs	r3, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f001 fdaf 	bl	800279c <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d027      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <GndScanStart+0xa2>
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <GndScanStart+0x108>)
 8000c4c:	e000      	b.n	8000c50 <GndScanStart+0xa4>
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <GndScanStart+0x10c>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <GndScanStart+0xb0>
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	e000      	b.n	8000c5e <GndScanStart+0xb2>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4610      	mov	r0, r2
 8000c62:	f001 fd9b 	bl	800279c <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <GndScanStart+0xca>
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <GndScanStart+0x108>)
 8000c74:	e000      	b.n	8000c78 <GndScanStart+0xcc>
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <GndScanStart+0x10c>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <GndScanStart+0xd8>
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	e000      	b.n	8000c86 <GndScanStart+0xda>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f001 fd87 	bl	800279c <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <GndScanStart+0xf0>
	{
		*CurrentKeyState = GND_DETECTION;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e002      	b.n	8000ca2 <GndScanStart+0xf6>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001f0 	.word	0x200001f0
 8000cb0:	200001f1 	.word	0x200001f1
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <GndScanDetection>:

uint32_t GndScanDetection(KeypadSide side)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <GndScanDetection+0x14>
 8000ccc:	4b7e      	ldr	r3, [pc, #504]	; (8000ec8 <GndScanDetection+0x20c>)
 8000cce:	e000      	b.n	8000cd2 <GndScanDetection+0x16>
 8000cd0:	4b7e      	ldr	r3, [pc, #504]	; (8000ecc <GndScanDetection+0x210>)
 8000cd2:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <GndScanDetection+0x22>
 8000cda:	4a7d      	ldr	r2, [pc, #500]	; (8000ed0 <GndScanDetection+0x214>)
 8000cdc:	e000      	b.n	8000ce0 <GndScanDetection+0x24>
 8000cde:	4a7d      	ldr	r2, [pc, #500]	; (8000ed4 <GndScanDetection+0x218>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <GndScanDetection+0x30>
 8000ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cea:	e000      	b.n	8000cee <GndScanDetection+0x32>
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f001 fd53 	bl	800279c <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d050      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <GndScanDetection+0x4a>
 8000d02:	4a73      	ldr	r2, [pc, #460]	; (8000ed0 <GndScanDetection+0x214>)
 8000d04:	e000      	b.n	8000d08 <GndScanDetection+0x4c>
 8000d06:	4a73      	ldr	r2, [pc, #460]	; (8000ed4 <GndScanDetection+0x218>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <GndScanDetection+0x58>
 8000d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d12:	e000      	b.n	8000d16 <GndScanDetection+0x5a>
 8000d14:	2308      	movs	r3, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f001 fd3f 	bl	800279c <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d03c      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <GndScanDetection+0x72>
 8000d2a:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <GndScanDetection+0x214>)
 8000d2c:	e000      	b.n	8000d30 <GndScanDetection+0x74>
 8000d2e:	4a69      	ldr	r2, [pc, #420]	; (8000ed4 <GndScanDetection+0x218>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <GndScanDetection+0x80>
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	e000      	b.n	8000d3e <GndScanDetection+0x82>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4610      	mov	r0, r2
 8000d42:	f001 fd2b 	bl	800279c <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d028      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <GndScanDetection+0x9a>
 8000d52:	4a5f      	ldr	r2, [pc, #380]	; (8000ed0 <GndScanDetection+0x214>)
 8000d54:	e000      	b.n	8000d58 <GndScanDetection+0x9c>
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <GndScanDetection+0x218>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <GndScanDetection+0xa8>
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	e000      	b.n	8000d66 <GndScanDetection+0xaa>
 8000d64:	2302      	movs	r3, #2
 8000d66:	4619      	mov	r1, r3
 8000d68:	4610      	mov	r0, r2
 8000d6a:	f001 fd17 	bl	800279c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d014      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <GndScanDetection+0xc2>
 8000d7a:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <GndScanDetection+0x214>)
 8000d7c:	e000      	b.n	8000d80 <GndScanDetection+0xc4>
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <GndScanDetection+0x218>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <GndScanDetection+0xd0>
 8000d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8a:	e000      	b.n	8000d8e <GndScanDetection+0xd2>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f001 fd03 	bl	800279c <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 808a 	bne.w	8000eb2 <GndScanDetection+0x1f6>
	{
		if(GET_IO_KEY_1(side) == 0)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <GndScanDetection+0xec>
 8000da4:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <GndScanDetection+0x214>)
 8000da6:	e000      	b.n	8000daa <GndScanDetection+0xee>
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <GndScanDetection+0x218>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <GndScanDetection+0xfa>
 8000db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db4:	e000      	b.n	8000db8 <GndScanDetection+0xfc>
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f001 fcee 	bl	800279c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <GndScanDetection+0x11a>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_LEFT : KEY_VALUE_LEFT);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <GndScanDetection+0x114>
 8000dcc:	2305      	movs	r3, #5
 8000dce:	e000      	b.n	8000dd2 <GndScanDetection+0x116>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e069      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_2(side) == 0))
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <GndScanDetection+0x124>
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <GndScanDetection+0x214>)
 8000dde:	e000      	b.n	8000de2 <GndScanDetection+0x126>
 8000de0:	4a3c      	ldr	r2, [pc, #240]	; (8000ed4 <GndScanDetection+0x218>)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <GndScanDetection+0x132>
 8000de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dec:	e000      	b.n	8000df0 <GndScanDetection+0x134>
 8000dee:	2308      	movs	r3, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f001 fcd2 	bl	800279c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <GndScanDetection+0x152>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_UP : KEY_VALUE_UP);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <GndScanDetection+0x14c>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e000      	b.n	8000e0a <GndScanDetection+0x14e>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e04d      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_3(side) == 0))
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <GndScanDetection+0x15c>
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <GndScanDetection+0x214>)
 8000e16:	e000      	b.n	8000e1a <GndScanDetection+0x15e>
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <GndScanDetection+0x218>)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <GndScanDetection+0x16a>
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	e000      	b.n	8000e28 <GndScanDetection+0x16c>
 8000e26:	2304      	movs	r3, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f001 fcb6 	bl	800279c <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <GndScanDetection+0x180>
		{
			ReValue = KEY_VALUE_PRESS;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e036      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_4(side) == 0))
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <GndScanDetection+0x18a>
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <GndScanDetection+0x214>)
 8000e44:	e000      	b.n	8000e48 <GndScanDetection+0x18c>
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <GndScanDetection+0x218>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <GndScanDetection+0x198>
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	e000      	b.n	8000e56 <GndScanDetection+0x19a>
 8000e54:	2302      	movs	r3, #2
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f001 fc9f 	bl	800279c <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <GndScanDetection+0x1b8>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_DOWN : KEY_VALUE_DOWN);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <GndScanDetection+0x1b2>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e000      	b.n	8000e70 <GndScanDetection+0x1b4>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e01a      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_5(side) == 0))
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <GndScanDetection+0x1c2>
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <GndScanDetection+0x214>)
 8000e7c:	e000      	b.n	8000e80 <GndScanDetection+0x1c4>
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <GndScanDetection+0x218>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <GndScanDetection+0x1d0>
 8000e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8a:	e000      	b.n	8000e8e <GndScanDetection+0x1d2>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f001 fc83 	bl	800279c <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <GndScanDetection+0x1ee>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_RIGHT : KEY_VALUE_RIGHT);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <GndScanDetection+0x1ea>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <GndScanDetection+0x1ec>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	60fb      	str	r3, [r7, #12]
		}	

		*CurrentKeyState = GND_DETECTION;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e004      	b.n	8000ebc <GndScanDetection+0x200>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
	}

	return ReValue;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}	
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001f0 	.word	0x200001f0
 8000ecc:	200001f1 	.word	0x200001f1
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <GndScanOver>:
	
void GndScanOver(KeypadSide side)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <GndScanOver+0x14>
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <GndScanOver+0xf8>)
 8000eea:	e000      	b.n	8000eee <GndScanOver+0x16>
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <GndScanOver+0xfc>)
 8000eee:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0)))
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <GndScanOver+0x22>
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <GndScanOver+0x100>)
 8000ef8:	e000      	b.n	8000efc <GndScanOver+0x24>
 8000efa:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <GndScanOver+0x104>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <GndScanOver+0x30>
 8000f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f06:	e000      	b.n	8000f0a <GndScanOver+0x32>
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f001 fc45 	bl	800279c <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d04f      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <GndScanOver+0x4a>
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <GndScanOver+0x100>)
 8000f20:	e000      	b.n	8000f24 <GndScanOver+0x4c>
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <GndScanOver+0x104>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <GndScanOver+0x58>
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	e000      	b.n	8000f32 <GndScanOver+0x5a>
 8000f30:	2308      	movs	r3, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4610      	mov	r0, r2
 8000f36:	f001 fc31 	bl	800279c <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03b      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <GndScanOver+0x72>
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <GndScanOver+0x100>)
 8000f48:	e000      	b.n	8000f4c <GndScanOver+0x74>
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <GndScanOver+0x104>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <GndScanOver+0x80>
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	e000      	b.n	8000f5a <GndScanOver+0x82>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f001 fc1d 	bl	800279c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d027      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <GndScanOver+0x9a>
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <GndScanOver+0x100>)
 8000f70:	e000      	b.n	8000f74 <GndScanOver+0x9c>
 8000f72:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <GndScanOver+0x104>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <GndScanOver+0xa8>
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	e000      	b.n	8000f82 <GndScanOver+0xaa>
 8000f80:	2302      	movs	r3, #2
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 fc09 	bl	800279c <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <GndScanOver+0xc2>
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <GndScanOver+0x100>)
 8000f98:	e000      	b.n	8000f9c <GndScanOver+0xc4>
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <GndScanOver+0x104>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <GndScanOver+0xd0>
 8000fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa6:	e000      	b.n	8000faa <GndScanOver+0xd2>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f001 fbf5 	bl	800279c <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <GndScanOver+0xe8>
	{
		*CurrentKeyState = GND_OVER;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <GndScanOver+0xee>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	200001f1 	.word	0x200001f1
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <Line1ScanStart>:
/* Scan line 1 */
void Line1ScanStart(KeypadSide side)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine1(side);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb71 	bl	80006d4 <ConfigurationLine1>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <Line1ScanStart+0x1c>
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <Line1ScanStart+0x178>)
 8000ffa:	e000      	b.n	8000ffe <Line1ScanStart+0x1e>
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <Line1ScanStart+0x17c>)
 8000ffe:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <Line1ScanStart+0x2a>
 8001006:	4a56      	ldr	r2, [pc, #344]	; (8001160 <Line1ScanStart+0x180>)
 8001008:	e000      	b.n	800100c <Line1ScanStart+0x2c>
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <Line1ScanStart+0x184>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <Line1ScanStart+0x38>
 8001012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001016:	e000      	b.n	800101a <Line1ScanStart+0x3a>
 8001018:	2308      	movs	r3, #8
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fbbd 	bl	800279c <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d03b      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <Line1ScanStart+0x52>
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <Line1ScanStart+0x180>)
 8001030:	e000      	b.n	8001034 <Line1ScanStart+0x54>
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <Line1ScanStart+0x184>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <Line1ScanStart+0x60>
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	e000      	b.n	8001042 <Line1ScanStart+0x62>
 8001040:	2304      	movs	r3, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f001 fba9 	bl	800279c <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d027      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <Line1ScanStart+0x7a>
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <Line1ScanStart+0x180>)
 8001058:	e000      	b.n	800105c <Line1ScanStart+0x7c>
 800105a:	4a42      	ldr	r2, [pc, #264]	; (8001164 <Line1ScanStart+0x184>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <Line1ScanStart+0x88>
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	e000      	b.n	800106a <Line1ScanStart+0x8a>
 8001068:	2302      	movs	r3, #2
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f001 fb95 	bl	800279c <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d013      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <Line1ScanStart+0xa2>
 800107e:	4a38      	ldr	r2, [pc, #224]	; (8001160 <Line1ScanStart+0x180>)
 8001080:	e000      	b.n	8001084 <Line1ScanStart+0xa4>
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <Line1ScanStart+0x184>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <Line1ScanStart+0xb0>
 800108a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800108e:	e000      	b.n	8001092 <Line1ScanStart+0xb2>
 8001090:	2301      	movs	r3, #1
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 fb81 	bl	800279c <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d103      	bne.n	80010a8 <Line1ScanStart+0xc8>
	{
		*CurrentKeyState = LINE1_DETECTION;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2204      	movs	r2, #4
 80010a4:	701a      	strb	r2, [r3, #0]
	}
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
	{
		*CurrentKeyState = LINE2_START;
	}		
}
 80010a6:	e052      	b.n	800114e <Line1ScanStart+0x16e>
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <Line1ScanStart+0xd2>
 80010ae:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <Line1ScanStart+0x180>)
 80010b0:	e000      	b.n	80010b4 <Line1ScanStart+0xd4>
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <Line1ScanStart+0x184>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <Line1ScanStart+0xe0>
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	e000      	b.n	80010c2 <Line1ScanStart+0xe2>
 80010c0:	2308      	movs	r3, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 fb69 	bl	800279c <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d03e      	beq.n	800114e <Line1ScanStart+0x16e>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <Line1ScanStart+0xfa>
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <Line1ScanStart+0x180>)
 80010d8:	e000      	b.n	80010dc <Line1ScanStart+0xfc>
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <Line1ScanStart+0x184>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <Line1ScanStart+0x108>
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	e000      	b.n	80010ea <Line1ScanStart+0x10a>
 80010e8:	2304      	movs	r3, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f001 fb55 	bl	800279c <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d02a      	beq.n	800114e <Line1ScanStart+0x16e>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <Line1ScanStart+0x122>
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <Line1ScanStart+0x180>)
 8001100:	e000      	b.n	8001104 <Line1ScanStart+0x124>
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <Line1ScanStart+0x184>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <Line1ScanStart+0x130>
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	e000      	b.n	8001112 <Line1ScanStart+0x132>
 8001110:	2302      	movs	r3, #2
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f001 fb41 	bl	800279c <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d016      	beq.n	800114e <Line1ScanStart+0x16e>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <Line1ScanStart+0x14a>
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <Line1ScanStart+0x180>)
 8001128:	e000      	b.n	800112c <Line1ScanStart+0x14c>
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <Line1ScanStart+0x184>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <Line1ScanStart+0x158>
 8001132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001136:	e000      	b.n	800113a <Line1ScanStart+0x15a>
 8001138:	2301      	movs	r3, #1
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f001 fb2d 	bl	800279c <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <Line1ScanStart+0x16e>
		*CurrentKeyState = LINE2_START;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2206      	movs	r2, #6
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	200001f1 	.word	0x200001f1
 8001160:	40020400 	.word	0x40020400
 8001164:	40020c00 	.word	0x40020c00

08001168 <Line1ScanDetection>:

uint32_t Line1ScanDetection(KeypadSide side)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <Line1ScanDetection+0x14>
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <Line1ScanDetection+0x18c>)
 800117a:	e000      	b.n	800117e <Line1ScanDetection+0x16>
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <Line1ScanDetection+0x190>)
 800117e:	60bb      	str	r3, [r7, #8]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <Line1ScanDetection+0x22>
 8001186:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <Line1ScanDetection+0x194>)
 8001188:	e000      	b.n	800118c <Line1ScanDetection+0x24>
 800118a:	4a5d      	ldr	r2, [pc, #372]	; (8001300 <Line1ScanDetection+0x198>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <Line1ScanDetection+0x30>
 8001192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001196:	e000      	b.n	800119a <Line1ScanDetection+0x32>
 8001198:	2308      	movs	r3, #8
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f001 fafd 	bl	800279c <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d03b      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <Line1ScanDetection+0x4a>
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <Line1ScanDetection+0x194>)
 80011b0:	e000      	b.n	80011b4 <Line1ScanDetection+0x4c>
 80011b2:	4a53      	ldr	r2, [pc, #332]	; (8001300 <Line1ScanDetection+0x198>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <Line1ScanDetection+0x58>
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	e000      	b.n	80011c2 <Line1ScanDetection+0x5a>
 80011c0:	2304      	movs	r3, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f001 fae9 	bl	800279c <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d027      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <Line1ScanDetection+0x72>
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <Line1ScanDetection+0x194>)
 80011d8:	e000      	b.n	80011dc <Line1ScanDetection+0x74>
 80011da:	4a49      	ldr	r2, [pc, #292]	; (8001300 <Line1ScanDetection+0x198>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <Line1ScanDetection+0x80>
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	e000      	b.n	80011ea <Line1ScanDetection+0x82>
 80011e8:	2302      	movs	r3, #2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f001 fad5 	bl	800279c <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d013      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <Line1ScanDetection+0x9a>
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <Line1ScanDetection+0x194>)
 8001200:	e000      	b.n	8001204 <Line1ScanDetection+0x9c>
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <Line1ScanDetection+0x198>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <Line1ScanDetection+0xa8>
 800120a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800120e:	e000      	b.n	8001212 <Line1ScanDetection+0xaa>
 8001210:	2301      	movs	r3, #1
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 fac1 	bl	800279c <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d15e      	bne.n	80012de <Line1ScanDetection+0x176>
	{
		if(GET_IO_KEY_2(side) == 1)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <Line1ScanDetection+0xc2>
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <Line1ScanDetection+0x194>)
 8001228:	e000      	b.n	800122c <Line1ScanDetection+0xc4>
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <Line1ScanDetection+0x198>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <Line1ScanDetection+0xd0>
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	e000      	b.n	800123a <Line1ScanDetection+0xd2>
 8001238:	2308      	movs	r3, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f001 faad 	bl	800279c <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <Line1ScanDetection+0xe6>
		{
			ReValue = KEY_VALUE_ONE;	
 8001248:	2306      	movs	r3, #6
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e043      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_3(side) == 1)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <Line1ScanDetection+0xf0>
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <Line1ScanDetection+0x194>)
 8001256:	e000      	b.n	800125a <Line1ScanDetection+0xf2>
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <Line1ScanDetection+0x198>)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <Line1ScanDetection+0xfe>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e000      	b.n	8001268 <Line1ScanDetection+0x100>
 8001266:	2304      	movs	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f001 fa96 	bl	800279c <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <Line1ScanDetection+0x114>
		{
			ReValue = KEY_VALUE_TWO;
 8001276:	2307      	movs	r3, #7
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e02c      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_4(side) == 1)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <Line1ScanDetection+0x11e>
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <Line1ScanDetection+0x194>)
 8001284:	e000      	b.n	8001288 <Line1ScanDetection+0x120>
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <Line1ScanDetection+0x198>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <Line1ScanDetection+0x12c>
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	e000      	b.n	8001296 <Line1ScanDetection+0x12e>
 8001294:	2302      	movs	r3, #2
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f001 fa7f 	bl	800279c <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <Line1ScanDetection+0x142>
		{
			ReValue = KEY_VALUE_THREE;
 80012a4:	2308      	movs	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e015      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <Line1ScanDetection+0x14c>
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <Line1ScanDetection+0x194>)
 80012b2:	e000      	b.n	80012b6 <Line1ScanDetection+0x14e>
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <Line1ScanDetection+0x198>)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <Line1ScanDetection+0x15a>
 80012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c0:	e000      	b.n	80012c4 <Line1ScanDetection+0x15c>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f001 fa68 	bl	800279c <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <Line1ScanDetection+0x16e>
		{
			ReValue = KEY_VALUE_FOUR;
 80012d2:	2309      	movs	r3, #9
 80012d4:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE1_DETECTION;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2204      	movs	r2, #4
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e004      	b.n	80012e8 <Line1ScanDetection+0x180>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2206      	movs	r2, #6
 80012e2:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	200001f1 	.word	0x200001f1
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020c00 	.word	0x40020c00

08001304 <Line1ScanOver>:

void Line1ScanOver(KeypadSide side)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <Line1ScanOver+0x14>
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <Line1ScanOver+0xd0>)
 8001316:	e000      	b.n	800131a <Line1ScanOver+0x16>
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <Line1ScanOver+0xd4>)
 800131a:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <Line1ScanOver+0x22>
 8001322:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <Line1ScanOver+0xd8>)
 8001324:	e000      	b.n	8001328 <Line1ScanOver+0x24>
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <Line1ScanOver+0xdc>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <Line1ScanOver+0x30>
 800132e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001332:	e000      	b.n	8001336 <Line1ScanOver+0x32>
 8001334:	2308      	movs	r3, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f001 fa2f 	bl	800279c <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d03b      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <Line1ScanOver+0x4a>
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <Line1ScanOver+0xd8>)
 800134c:	e000      	b.n	8001350 <Line1ScanOver+0x4c>
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <Line1ScanOver+0xdc>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <Line1ScanOver+0x58>
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	e000      	b.n	800135e <Line1ScanOver+0x5a>
 800135c:	2304      	movs	r3, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f001 fa1b 	bl	800279c <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d027      	beq.n	80013bc <Line1ScanOver+0xb8>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <Line1ScanOver+0x72>
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <Line1ScanOver+0xd8>)
 8001374:	e000      	b.n	8001378 <Line1ScanOver+0x74>
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <Line1ScanOver+0xdc>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <Line1ScanOver+0x80>
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	e000      	b.n	8001386 <Line1ScanOver+0x82>
 8001384:	2302      	movs	r3, #2
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f001 fa07 	bl	800279c <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d013      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <Line1ScanOver+0x9a>
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <Line1ScanOver+0xd8>)
 800139c:	e000      	b.n	80013a0 <Line1ScanOver+0x9c>
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <Line1ScanOver+0xdc>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <Line1ScanOver+0xa8>
 80013a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013aa:	e000      	b.n	80013ae <Line1ScanOver+0xaa>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f001 f9f3 	bl	800279c <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d103      	bne.n	80013c4 <Line1ScanOver+0xc0>
	{
		*CurrentKeyState = LINE1_OVER;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2205      	movs	r2, #5
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e002      	b.n	80013ca <Line1ScanOver+0xc6>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2206      	movs	r2, #6
 80013c8:	701a      	strb	r2, [r3, #0]
	}
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001f0 	.word	0x200001f0
 80013d8:	200001f1 	.word	0x200001f1
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <Line2ScanStart>:
/* Scan line 2 */
void Line2ScanStart(KeypadSide side)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine2(side);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f9f5 	bl	80007e0 <ConfigurationLine2>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <Line2ScanStart+0x1c>
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <Line2ScanStart+0xb0>)
 80013fe:	e000      	b.n	8001402 <Line2ScanStart+0x1e>
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <Line2ScanStart+0xb4>)
 8001402:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <Line2ScanStart+0x2a>
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <Line2ScanStart+0xb8>)
 800140c:	e000      	b.n	8001410 <Line2ScanStart+0x2c>
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <Line2ScanStart+0xbc>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <Line2ScanStart+0x38>
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	e000      	b.n	800141e <Line2ScanStart+0x3a>
 800141c:	2304      	movs	r3, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f001 f9bb 	bl	800279c <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d027      	beq.n	800147c <Line2ScanStart+0x98>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <Line2ScanStart+0x52>
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <Line2ScanStart+0xb8>)
 8001434:	e000      	b.n	8001438 <Line2ScanStart+0x54>
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <Line2ScanStart+0xbc>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <Line2ScanStart+0x60>
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	e000      	b.n	8001446 <Line2ScanStart+0x62>
 8001444:	2302      	movs	r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f001 f9a7 	bl	800279c <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d013      	beq.n	800147c <Line2ScanStart+0x98>
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <Line2ScanStart+0x7a>
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <Line2ScanStart+0xb8>)
 800145c:	e000      	b.n	8001460 <Line2ScanStart+0x7c>
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <Line2ScanStart+0xbc>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <Line2ScanStart+0x88>
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	e000      	b.n	800146e <Line2ScanStart+0x8a>
 800146c:	2301      	movs	r3, #1
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f001 f993 	bl	800279c <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <Line2ScanStart+0xa0>
	{
		*CurrentKeyState = LINE2_DETECTION;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2207      	movs	r2, #7
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e002      	b.n	800148a <Line2ScanStart+0xa6>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2209      	movs	r2, #9
 8001488:	701a      	strb	r2, [r3, #0]
	}		
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0
 8001498:	200001f1 	.word	0x200001f1
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <Line2ScanDetection>:

uint32_t Line2ScanDetection(KeypadSide side)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <Line2ScanDetection+0x14>
 80014b4:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <Line2ScanDetection+0x134>)
 80014b6:	e000      	b.n	80014ba <Line2ScanDetection+0x16>
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <Line2ScanDetection+0x138>)
 80014ba:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <Line2ScanDetection+0x22>
 80014c2:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014c4:	e000      	b.n	80014c8 <Line2ScanDetection+0x24>
 80014c6:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <Line2ScanDetection+0x140>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <Line2ScanDetection+0x30>
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	e000      	b.n	80014d6 <Line2ScanDetection+0x32>
 80014d4:	2304      	movs	r3, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f001 f95f 	bl	800279c <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d027      	beq.n	8001534 <Line2ScanDetection+0x90>
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <Line2ScanDetection+0x4a>
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014ec:	e000      	b.n	80014f0 <Line2ScanDetection+0x4c>
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <Line2ScanDetection+0x140>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <Line2ScanDetection+0x58>
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	e000      	b.n	80014fe <Line2ScanDetection+0x5a>
 80014fc:	2302      	movs	r3, #2
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f001 f94b 	bl	800279c <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d013      	beq.n	8001534 <Line2ScanDetection+0x90>
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <Line2ScanDetection+0x72>
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001514:	e000      	b.n	8001518 <Line2ScanDetection+0x74>
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <Line2ScanDetection+0x140>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <Line2ScanDetection+0x80>
 800151e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001522:	e000      	b.n	8001526 <Line2ScanDetection+0x82>
 8001524:	2301      	movs	r3, #1
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f001 f937 	bl	800279c <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d147      	bne.n	80015c4 <Line2ScanDetection+0x120>
	{
		if(GET_IO_KEY_3(side) == 1)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <Line2ScanDetection+0x9a>
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <Line2ScanDetection+0x13c>)
 800153c:	e000      	b.n	8001540 <Line2ScanDetection+0x9c>
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <Line2ScanDetection+0x140>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <Line2ScanDetection+0xa8>
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	e000      	b.n	800154e <Line2ScanDetection+0xaa>
 800154c:	2304      	movs	r3, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f001 f923 	bl	800279c <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <Line2ScanDetection+0xbe>
		{
			ReValue = KEY_VALUE_FIVE;	
 800155c:	230a      	movs	r3, #10
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e02c      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_4(side) == 1)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <Line2ScanDetection+0xc8>
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <Line2ScanDetection+0x13c>)
 800156a:	e000      	b.n	800156e <Line2ScanDetection+0xca>
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <Line2ScanDetection+0x140>)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <Line2ScanDetection+0xd6>
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	e000      	b.n	800157c <Line2ScanDetection+0xd8>
 800157a:	2302      	movs	r3, #2
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f001 f90c 	bl	800279c <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <Line2ScanDetection+0xec>
		{
			ReValue = KEY_VALUE_SIX;
 800158a:	230b      	movs	r3, #11
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e015      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_5(side) == 1)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <Line2ScanDetection+0xf6>
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001598:	e000      	b.n	800159c <Line2ScanDetection+0xf8>
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <Line2ScanDetection+0x140>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <Line2ScanDetection+0x104>
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a6:	e000      	b.n	80015aa <Line2ScanDetection+0x106>
 80015a8:	2301      	movs	r3, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f001 f8f5 	bl	800279c <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <Line2ScanDetection+0x118>
		{
			ReValue = KEY_VALUE_SEVEN;
 80015b8:	230c      	movs	r3, #12
 80015ba:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE2_DETECTION;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2207      	movs	r2, #7
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e004      	b.n	80015ce <Line2ScanDetection+0x12a>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200001f0 	.word	0x200001f0
 80015dc:	200001f1 	.word	0x200001f1
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <Line2ScanOver>:

void Line2ScanOver(KeypadSide side)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <Line2ScanOver+0x14>
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <Line2ScanOver+0xa8>)
 80015fa:	e000      	b.n	80015fe <Line2ScanOver+0x16>
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <Line2ScanOver+0xac>)
 80015fe:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <Line2ScanOver+0x22>
 8001606:	4a24      	ldr	r2, [pc, #144]	; (8001698 <Line2ScanOver+0xb0>)
 8001608:	e000      	b.n	800160c <Line2ScanOver+0x24>
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <Line2ScanOver+0xb4>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <Line2ScanOver+0x30>
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	e000      	b.n	800161a <Line2ScanOver+0x32>
 8001618:	2304      	movs	r3, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f001 f8bd 	bl	800279c <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d027      	beq.n	8001678 <Line2ScanOver+0x90>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <Line2ScanOver+0x4a>
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <Line2ScanOver+0xb0>)
 8001630:	e000      	b.n	8001634 <Line2ScanOver+0x4c>
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <Line2ScanOver+0xb4>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <Line2ScanOver+0x58>
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	e000      	b.n	8001642 <Line2ScanOver+0x5a>
 8001640:	2302      	movs	r3, #2
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f001 f8a9 	bl	800279c <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d013      	beq.n	8001678 <Line2ScanOver+0x90>
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <Line2ScanOver+0x72>
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <Line2ScanOver+0xb0>)
 8001658:	e000      	b.n	800165c <Line2ScanOver+0x74>
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <Line2ScanOver+0xb4>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <Line2ScanOver+0x80>
 8001662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001666:	e000      	b.n	800166a <Line2ScanOver+0x82>
 8001668:	2301      	movs	r3, #1
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f001 f895 	bl	800279c <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d103      	bne.n	8001680 <Line2ScanOver+0x98>
	{
		*CurrentKeyState = LINE2_OVER;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2208      	movs	r2, #8
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e002      	b.n	8001686 <Line2ScanOver+0x9e>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2209      	movs	r2, #9
 8001684:	701a      	strb	r2, [r3, #0]
	}
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001f0 	.word	0x200001f0
 8001694:	200001f1 	.word	0x200001f1
 8001698:	40020400 	.word	0x40020400
 800169c:	40020c00 	.word	0x40020c00

080016a0 <Line3ScanStart>:
/* Scan line 3 */
void Line3ScanStart(KeypadSide side)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine3(side);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f92f 	bl	8000910 <ConfigurationLine3>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <Line3ScanStart+0x1c>
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <Line3ScanStart+0x88>)
 80016ba:	e000      	b.n	80016be <Line3ScanStart+0x1e>
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <Line3ScanStart+0x8c>)
 80016be:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <Line3ScanStart+0x2a>
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <Line3ScanStart+0x90>)
 80016c8:	e000      	b.n	80016cc <Line3ScanStart+0x2c>
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <Line3ScanStart+0x94>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <Line3ScanStart+0x38>
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	e000      	b.n	80016da <Line3ScanStart+0x3a>
 80016d8:	2302      	movs	r3, #2
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f001 f85d 	bl	800279c <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d013      	beq.n	8001710 <Line3ScanStart+0x70>
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <Line3ScanStart+0x52>
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <Line3ScanStart+0x90>)
 80016f0:	e000      	b.n	80016f4 <Line3ScanStart+0x54>
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <Line3ScanStart+0x94>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <Line3ScanStart+0x60>
 80016fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016fe:	e000      	b.n	8001702 <Line3ScanStart+0x62>
 8001700:	2301      	movs	r3, #1
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f001 f849 	bl	800279c <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d103      	bne.n	8001718 <Line3ScanStart+0x78>
	{
		*CurrentKeyState = LINE3_DETECTION;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	220a      	movs	r2, #10
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e002      	b.n	800171e <Line3ScanStart+0x7e>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	701a      	strb	r2, [r3, #0]
	}		
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001f0 	.word	0x200001f0
 800172c:	200001f1 	.word	0x200001f1
 8001730:	40020400 	.word	0x40020400
 8001734:	40020c00 	.word	0x40020c00

08001738 <Line3ScanDetection>:

uint32_t Line3ScanDetection(KeypadSide side)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <Line3ScanDetection+0x14>
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <Line3ScanDetection+0xe0>)
 800174a:	e000      	b.n	800174e <Line3ScanDetection+0x16>
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <Line3ScanDetection+0xe4>)
 800174e:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <Line3ScanDetection+0x22>
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <Line3ScanDetection+0xe8>)
 8001758:	e000      	b.n	800175c <Line3ScanDetection+0x24>
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <Line3ScanDetection+0xec>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <Line3ScanDetection+0x30>
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	e000      	b.n	800176a <Line3ScanDetection+0x32>
 8001768:	2302      	movs	r3, #2
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f001 f815 	bl	800279c <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d013      	beq.n	80017a0 <Line3ScanDetection+0x68>
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <Line3ScanDetection+0x4a>
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <Line3ScanDetection+0xe8>)
 8001780:	e000      	b.n	8001784 <Line3ScanDetection+0x4c>
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <Line3ScanDetection+0xec>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <Line3ScanDetection+0x58>
 800178a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178e:	e000      	b.n	8001792 <Line3ScanDetection+0x5a>
 8001790:	2301      	movs	r3, #1
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f001 f801 	bl	800279c <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d130      	bne.n	8001802 <Line3ScanDetection+0xca>
	{
		if(GET_IO_KEY_4(side) == 1)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <Line3ScanDetection+0x72>
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <Line3ScanDetection+0xe8>)
 80017a8:	e000      	b.n	80017ac <Line3ScanDetection+0x74>
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <Line3ScanDetection+0xec>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <Line3ScanDetection+0x80>
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	e000      	b.n	80017ba <Line3ScanDetection+0x82>
 80017b8:	2302      	movs	r3, #2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f000 ffed 	bl	800279c <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <Line3ScanDetection+0x96>
		{
			ReValue = KEY_VALUE_EIGHT;	
 80017c8:	230d      	movs	r3, #13
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e015      	b.n	80017fa <Line3ScanDetection+0xc2>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <Line3ScanDetection+0xa0>
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <Line3ScanDetection+0xe8>)
 80017d6:	e000      	b.n	80017da <Line3ScanDetection+0xa2>
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <Line3ScanDetection+0xec>)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <Line3ScanDetection+0xae>
 80017e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e4:	e000      	b.n	80017e8 <Line3ScanDetection+0xb0>
 80017e6:	2301      	movs	r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f000 ffd6 	bl	800279c <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <Line3ScanDetection+0xc2>
		{
			ReValue = KEY_VALUE_NINE;
 80017f6:	230e      	movs	r3, #14
 80017f8:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE3_DETECTION;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	220a      	movs	r2, #10
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e004      	b.n	800180c <Line3ScanDetection+0xd4>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	220c      	movs	r2, #12
 8001806:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001f0 	.word	0x200001f0
 800181c:	200001f1 	.word	0x200001f1
 8001820:	40020400 	.word	0x40020400
 8001824:	40020c00 	.word	0x40020c00

08001828 <Line3ScanOver>:

void Line3ScanOver(KeypadSide side)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <Line3ScanOver+0x14>
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <Line3ScanOver+0x80>)
 800183a:	e000      	b.n	800183e <Line3ScanOver+0x16>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <Line3ScanOver+0x84>)
 800183e:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <Line3ScanOver+0x22>
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <Line3ScanOver+0x88>)
 8001848:	e000      	b.n	800184c <Line3ScanOver+0x24>
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <Line3ScanOver+0x8c>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <Line3ScanOver+0x30>
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	e000      	b.n	800185a <Line3ScanOver+0x32>
 8001858:	2302      	movs	r3, #2
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f000 ff9d 	bl	800279c <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d013      	beq.n	8001890 <Line3ScanOver+0x68>
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <Line3ScanOver+0x4a>
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <Line3ScanOver+0x88>)
 8001870:	e000      	b.n	8001874 <Line3ScanOver+0x4c>
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <Line3ScanOver+0x8c>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <Line3ScanOver+0x58>
 800187a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187e:	e000      	b.n	8001882 <Line3ScanOver+0x5a>
 8001880:	2301      	movs	r3, #1
 8001882:	4619      	mov	r1, r3
 8001884:	4610      	mov	r0, r2
 8001886:	f000 ff89 	bl	800279c <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <Line3ScanOver+0x70>
	{
		*CurrentKeyState = LINE3_OVER;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	220b      	movs	r2, #11
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <Line3ScanOver+0x76>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	220c      	movs	r2, #12
 800189c:	701a      	strb	r2, [r3, #0]
	}
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001f0 	.word	0x200001f0
 80018ac:	200001f1 	.word	0x200001f1
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <Line4ScanStart>:
/* Scan line 4 */
void Line4ScanStart(KeypadSide side)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine4(side);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8c5 	bl	8000a54 <ConfigurationLine4>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <Line4ScanStart+0x1c>
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <Line4ScanStart+0x60>)
 80018d2:	e000      	b.n	80018d6 <Line4ScanStart+0x1e>
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <Line4ScanStart+0x64>)
 80018d6:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <Line4ScanStart+0x2a>
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <Line4ScanStart+0x68>)
 80018e0:	e000      	b.n	80018e4 <Line4ScanStart+0x2c>
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <Line4ScanStart+0x6c>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <Line4ScanStart+0x38>
 80018ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ee:	e000      	b.n	80018f2 <Line4ScanStart+0x3a>
 80018f0:	2301      	movs	r3, #1
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 ff51 	bl	800279c <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d103      	bne.n	8001908 <Line4ScanStart+0x50>
	{
		*CurrentKeyState = LINE4_DETECTION;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	220d      	movs	r2, #13
 8001904:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}		
}
 8001906:	e002      	b.n	800190e <Line4ScanStart+0x56>
		*CurrentKeyState = GND_START;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001f0 	.word	0x200001f0
 800191c:	200001f1 	.word	0x200001f1
 8001920:	40020400 	.word	0x40020400
 8001924:	40020c00 	.word	0x40020c00

08001928 <Line4ScanDetection>:

uint32_t Line4ScanDetection(KeypadSide side)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <Line4ScanDetection+0x14>
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <Line4ScanDetection+0x60>)
 800193a:	e000      	b.n	800193e <Line4ScanDetection+0x16>
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <Line4ScanDetection+0x64>)
 800193e:	60bb      	str	r3, [r7, #8]

	if(GET_IO_KEY_5(side) == 1)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <Line4ScanDetection+0x22>
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <Line4ScanDetection+0x68>)
 8001948:	e000      	b.n	800194c <Line4ScanDetection+0x24>
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <Line4ScanDetection+0x6c>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <Line4ScanDetection+0x30>
 8001952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001956:	e000      	b.n	800195a <Line4ScanDetection+0x32>
 8001958:	2301      	movs	r3, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f000 ff1d 	bl	800279c <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <Line4ScanDetection+0x4c>
	{
		ReValue = KEY_VALUE_TEN;	
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]

		*CurrentKeyState = LINE4_DETECTION;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	220d      	movs	r2, #13
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e004      	b.n	800197e <Line4ScanDetection+0x56>
	}
	else
	{
		*CurrentKeyState = GND_START;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001f0 	.word	0x200001f0
 800198c:	200001f1 	.word	0x200001f1
 8001990:	40020400 	.word	0x40020400
 8001994:	40020c00 	.word	0x40020c00

08001998 <Line4ScanOver>:

void Line4ScanOver(KeypadSide side)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <Line4ScanOver+0x14>
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <Line4ScanOver+0x58>)
 80019aa:	e000      	b.n	80019ae <Line4ScanOver+0x16>
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <Line4ScanOver+0x5c>)
 80019ae:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <Line4ScanOver+0x22>
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <Line4ScanOver+0x60>)
 80019b8:	e000      	b.n	80019bc <Line4ScanOver+0x24>
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <Line4ScanOver+0x64>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <Line4ScanOver+0x30>
 80019c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c6:	e000      	b.n	80019ca <Line4ScanOver+0x32>
 80019c8:	2301      	movs	r3, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f000 fee5 	bl	800279c <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <Line4ScanOver+0x48>
	{
		*CurrentKeyState = LINE4_OVER;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	220e      	movs	r2, #14
 80019dc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}
}
 80019de:	e002      	b.n	80019e6 <Line4ScanOver+0x4e>
		*CurrentKeyState = GND_START;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001f0 	.word	0x200001f0
 80019f4:	200001f1 	.word	0x200001f1
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020c00 	.word	0x40020c00

08001a00 <ResetGamepadReport>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */


void ResetGamepadReport() {
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	gamepadReport.buttons_16 = 0;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	gamepadReport.buttons_8 = 0;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	709a      	strb	r2, [r3, #2]
	gamepadReport.left_x = 0;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	70da      	strb	r2, [r3, #3]
	gamepadReport.left_y = 0;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	711a      	strb	r2, [r3, #4]
	gamepadReport.right_x = 0;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	715a      	strb	r2, [r3, #5]
	gamepadReport.right_y = 0;
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <ResetGamepadReport+0x34>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	719a      	strb	r2, [r3, #6]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000204 	.word	0x20000204

08001a38 <PrepareSendBuffer>:

void PrepareSendBuffer(uint8_t *buffer, GamepadReport_t *gamepadReport) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t) (gamepadReport->buttons_16 & 0x00FF);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t) (gamepadReport->buttons_16 >> 8);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
	buffer[2] = gamepadReport->buttons_8;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3302      	adds	r3, #2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	7892      	ldrb	r2, [r2, #2]
 8001a64:	701a      	strb	r2, [r3, #0]
	buffer[3] = gamepadReport->left_x;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
	buffer[4] = gamepadReport->left_y;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
	buffer[5] = gamepadReport->right_x;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3305      	adds	r3, #5
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
	buffer[6] = gamepadReport->right_y;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3306      	adds	r3, #6
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <GetUserInput>:

void GetUserInput() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
	const uint8_t JOYSTICK_VALUE = 64;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	73fb      	strb	r3, [r7, #15]

	uint32_t leftKeypadValue = KeypadScan(LEFT);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7fe fd06 	bl	80004c8 <KeypadScan>
 8001abc:	60b8      	str	r0, [r7, #8]
	uint32_t rightKeypadValue = KeypadScan(RIGHT);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7fe fd02 	bl	80004c8 <KeypadScan>
 8001ac4:	6078      	str	r0, [r7, #4]
	if (leftKeypadValue == 0 && rightKeypadValue == 0) {
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d116      	bne.n	8001afa <GetUserInput+0x4e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d113      	bne.n	8001afa <GetUserInput+0x4e>
		if (CHANGED == 1) {
 8001ad2:	4b95      	ldr	r3, [pc, #596]	; (8001d28 <GetUserInput+0x27c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	f040 8122 	bne.w	8001d20 <GetUserInput+0x274>
			ResetGamepadReport();
 8001adc:	f7ff ff90 	bl	8001a00 <ResetGamepadReport>
			PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001ae0:	4992      	ldr	r1, [pc, #584]	; (8001d2c <GetUserInput+0x280>)
 8001ae2:	4893      	ldr	r0, [pc, #588]	; (8001d30 <GetUserInput+0x284>)
 8001ae4:	f7ff ffa8 	bl	8001a38 <PrepareSendBuffer>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4991      	ldr	r1, [pc, #580]	; (8001d30 <GetUserInput+0x284>)
 8001aec:	4891      	ldr	r0, [pc, #580]	; (8001d34 <GetUserInput+0x288>)
 8001aee:	f004 f8c7 	bl	8005c80 <USBD_CUSTOM_HID_SendReport>
			CHANGED = 0;
 8001af2:	4b8d      	ldr	r3, [pc, #564]	; (8001d28 <GetUserInput+0x27c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001af8:	e112      	b.n	8001d20 <GetUserInput+0x274>
	}

	switch(leftKeypadValue) {
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	2b0e      	cmp	r3, #14
 8001b00:	f200 8082 	bhi.w	8001c08 <GetUserInput+0x15c>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <GetUserInput+0x60>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b49 	.word	0x08001b49
 8001b10:	08001b57 	.word	0x08001b57
 8001b14:	08001b65 	.word	0x08001b65
 8001b18:	08001b75 	.word	0x08001b75
 8001b1c:	08001b7f 	.word	0x08001b7f
 8001b20:	08001c09 	.word	0x08001c09
 8001b24:	08001b89 	.word	0x08001b89
 8001b28:	08001b99 	.word	0x08001b99
 8001b2c:	08001ba9 	.word	0x08001ba9
 8001b30:	08001bb9 	.word	0x08001bb9
 8001b34:	08001c09 	.word	0x08001c09
 8001b38:	08001bc9 	.word	0x08001bc9
 8001b3c:	08001bd9 	.word	0x08001bd9
 8001b40:	08001be9 	.word	0x08001be9
 8001b44:	08001bf9 	.word	0x08001bf9
		case 1: gamepadReport.left_x = -JOYSTICK_VALUE; break; // LEFT
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <GetUserInput+0x280>)
 8001b52:	70da      	strb	r2, [r3, #3]
 8001b54:	e058      	b.n	8001c08 <GetUserInput+0x15c>
		case 2: gamepadReport.left_y = -JOYSTICK_VALUE; break;  // UP
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	425b      	negs	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	b25a      	sxtb	r2, r3
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <GetUserInput+0x280>)
 8001b60:	711a      	strb	r2, [r3, #4]
 8001b62:	e051      	b.n	8001c08 <GetUserInput+0x15c>
		case 3: gamepadReport.buttons_8 |= 1U << 0; break; // PRESS
 8001b64:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <GetUserInput+0x280>)
 8001b66:	789b      	ldrb	r3, [r3, #2]
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <GetUserInput+0x280>)
 8001b70:	709a      	strb	r2, [r3, #2]
 8001b72:	e049      	b.n	8001c08 <GetUserInput+0x15c>
		case 4: gamepadReport.left_y = JOYSTICK_VALUE; break; // DOWN
 8001b74:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b78:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <GetUserInput+0x280>)
 8001b7a:	711a      	strb	r2, [r3, #4]
 8001b7c:	e044      	b.n	8001c08 <GetUserInput+0x15c>
		case 5: gamepadReport.left_x = JOYSTICK_VALUE; break;  // RIGHT
 8001b7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <GetUserInput+0x280>)
 8001b84:	70da      	strb	r2, [r3, #3]
 8001b86:	e03f      	b.n	8001c08 <GetUserInput+0x15c>
		case 6: break;
		case 7: gamepadReport.buttons_16 |= 1U << 7; break;
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <GetUserInput+0x280>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <GetUserInput+0x280>)
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	e037      	b.n	8001c08 <GetUserInput+0x15c>
		case 8: gamepadReport.buttons_16 |= 1U << 6; break;
 8001b98:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <GetUserInput+0x280>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <GetUserInput+0x280>)
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	e02f      	b.n	8001c08 <GetUserInput+0x15c>
		case 9: gamepadReport.buttons_16 |= 1U << 5; break;
 8001ba8:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <GetUserInput+0x280>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <GetUserInput+0x280>)
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	e027      	b.n	8001c08 <GetUserInput+0x15c>
		case 10: gamepadReport.buttons_16 |= 1U << 4; break;
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <GetUserInput+0x280>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <GetUserInput+0x280>)
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	e01f      	b.n	8001c08 <GetUserInput+0x15c>
		case 11: break;
		case 12: gamepadReport.buttons_16 |= 1U << 3; break;
 8001bc8:	4b58      	ldr	r3, [pc, #352]	; (8001d2c <GetUserInput+0x280>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <GetUserInput+0x280>)
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	e017      	b.n	8001c08 <GetUserInput+0x15c>
		case 13: gamepadReport.buttons_16 |= 1U << 2; break;
 8001bd8:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <GetUserInput+0x280>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <GetUserInput+0x280>)
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e00f      	b.n	8001c08 <GetUserInput+0x15c>
		case 14: gamepadReport.buttons_16 |= 1U << 1; break;
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <GetUserInput+0x280>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <GetUserInput+0x280>)
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e007      	b.n	8001c08 <GetUserInput+0x15c>
		case 15: gamepadReport.buttons_16 |= 1U << 0; break;
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <GetUserInput+0x280>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <GetUserInput+0x280>)
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	bf00      	nop
	}

	switch(rightKeypadValue) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	2b0e      	cmp	r3, #14
 8001c0e:	f200 8083 	bhi.w	8001d18 <GetUserInput+0x26c>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <GetUserInput+0x16c>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c55 	.word	0x08001c55
 8001c1c:	08001c63 	.word	0x08001c63
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c81 	.word	0x08001c81
 8001c28:	08001c8b 	.word	0x08001c8b
 8001c2c:	08001d19 	.word	0x08001d19
 8001c30:	08001c95 	.word	0x08001c95
 8001c34:	08001ca5 	.word	0x08001ca5
 8001c38:	08001cb5 	.word	0x08001cb5
 8001c3c:	08001cc5 	.word	0x08001cc5
 8001c40:	08001d19 	.word	0x08001d19
 8001c44:	08001cd5 	.word	0x08001cd5
 8001c48:	08001ce5 	.word	0x08001ce5
 8001c4c:	08001cf5 	.word	0x08001cf5
 8001c50:	08001d05 	.word	0x08001d05
		case 1: gamepadReport.right_x = -JOYSTICK_VALUE; break; // LEFT
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	425b      	negs	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <GetUserInput+0x280>)
 8001c5e:	715a      	strb	r2, [r3, #5]
 8001c60:	e05a      	b.n	8001d18 <GetUserInput+0x26c>
		case 2: gamepadReport.right_y = -JOYSTICK_VALUE; break;  // UP
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	425b      	negs	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	b25a      	sxtb	r2, r3
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <GetUserInput+0x280>)
 8001c6c:	719a      	strb	r2, [r3, #6]
 8001c6e:	e053      	b.n	8001d18 <GetUserInput+0x26c>
		case 3: gamepadReport.buttons_8 |= 1U << 1; break; // PRESS
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <GetUserInput+0x280>)
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <GetUserInput+0x280>)
 8001c7c:	709a      	strb	r2, [r3, #2]
 8001c7e:	e04b      	b.n	8001d18 <GetUserInput+0x26c>
		case 4: gamepadReport.right_y = JOYSTICK_VALUE; break; // DOWN
 8001c80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <GetUserInput+0x280>)
 8001c86:	719a      	strb	r2, [r3, #6]
 8001c88:	e046      	b.n	8001d18 <GetUserInput+0x26c>
		case 5: gamepadReport.right_x = JOYSTICK_VALUE; break;  // RIGHT
 8001c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <GetUserInput+0x280>)
 8001c90:	715a      	strb	r2, [r3, #5]
 8001c92:	e041      	b.n	8001d18 <GetUserInput+0x26c>
		case 6: break; // K1
		case 7: gamepadReport.buttons_16 |= 1U << 8; break; // K2
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <GetUserInput+0x280>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <GetUserInput+0x280>)
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	e039      	b.n	8001d18 <GetUserInput+0x26c>
		case 8: gamepadReport.buttons_16 |= 1U << 9; break; // K3
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <GetUserInput+0x280>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <GetUserInput+0x280>)
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	e031      	b.n	8001d18 <GetUserInput+0x26c>
		case 9: gamepadReport.buttons_16 |= 1U << 10; break; // K4
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <GetUserInput+0x280>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <GetUserInput+0x280>)
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	e029      	b.n	8001d18 <GetUserInput+0x26c>
		case 10: gamepadReport.buttons_16 |= 1U << 11; break; // K5
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <GetUserInput+0x280>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <GetUserInput+0x280>)
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e021      	b.n	8001d18 <GetUserInput+0x26c>
		case 11: break; // K6
		case 12: gamepadReport.buttons_16 |= 1U << 12; break; // K7
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <GetUserInput+0x280>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <GetUserInput+0x280>)
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	e019      	b.n	8001d18 <GetUserInput+0x26c>
		case 13: gamepadReport.buttons_16 |= 1U << 13; break; // K8
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <GetUserInput+0x280>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <GetUserInput+0x280>)
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	e011      	b.n	8001d18 <GetUserInput+0x26c>
		case 14: gamepadReport.buttons_16 |= 1U << 14; break; // K9
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <GetUserInput+0x280>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <GetUserInput+0x280>)
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	e009      	b.n	8001d18 <GetUserInput+0x26c>
		case 15: gamepadReport.buttons_16 |= 1U << 15; break; // K10
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <GetUserInput+0x280>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <GetUserInput+0x280>)
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	bf00      	nop
	}

	CHANGED = 1;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <GetUserInput+0x27c>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e000      	b.n	8001d22 <GetUserInput+0x276>
		return;
 8001d20:	bf00      	nop
}
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200001f2 	.word	0x200001f2
 8001d2c:	20000204 	.word	0x20000204
 8001d30:	2000020c 	.word	0x2000020c
 8001d34:	20000218 	.word	0x20000218

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3c:	f000 f9ee 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d40:	f000 f824 	bl	8001d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d44:	f000 f88c 	bl	8001e60 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001d48:	f005 f98a 	bl	8007060 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ResetGamepadReport();
 8001d4c:	f7ff fe58 	bl	8001a00 <ResetGamepadReport>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GetUserInput();
 8001d50:	f7ff feac 	bl	8001aac <GetUserInput>

	  if (CHANGED == 1) {
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <main+0x44>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d1f9      	bne.n	8001d50 <main+0x18>
		  PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001d5c:	4908      	ldr	r1, [pc, #32]	; (8001d80 <main+0x48>)
 8001d5e:	4809      	ldr	r0, [pc, #36]	; (8001d84 <main+0x4c>)
 8001d60:	f7ff fe6a 	bl	8001a38 <PrepareSendBuffer>

	  	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001d64:	2207      	movs	r2, #7
 8001d66:	4907      	ldr	r1, [pc, #28]	; (8001d84 <main+0x4c>)
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <main+0x50>)
 8001d6a:	f003 ff89 	bl	8005c80 <USBD_CUSTOM_HID_SendReport>
	  	  ResetGamepadReport();
 8001d6e:	f7ff fe47 	bl	8001a00 <ResetGamepadReport>

	  	HAL_Delay(50);
 8001d72:	2032      	movs	r0, #50	; 0x32
 8001d74:	f000 fa44 	bl	8002200 <HAL_Delay>
	  GetUserInput();
 8001d78:	e7ea      	b.n	8001d50 <main+0x18>
 8001d7a:	bf00      	nop
 8001d7c:	200001f2 	.word	0x200001f2
 8001d80:	20000204 	.word	0x20000204
 8001d84:	2000020c 	.word	0x2000020c
 8001d88:	20000218 	.word	0x20000218

08001d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b094      	sub	sp, #80	; 0x50
 8001d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2230      	movs	r2, #48	; 0x30
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f005 fde4 	bl	8007968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <SystemClock_Config+0xcc>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <SystemClock_Config+0xcc>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc0:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <SystemClock_Config+0xcc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <SystemClock_Config+0xd0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <SystemClock_Config+0xd0>)
 8001dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <SystemClock_Config+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df2:	2302      	movs	r3, #2
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e00:	23a8      	movs	r3, #168	; 0xa8
 8001e02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fe5f 	bl	8003ad4 <HAL_RCC_OscConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e1c:	f000 f8aa 	bl	8001f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e20:	230f      	movs	r3, #15
 8001e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f8b8 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e4a:	f000 f893 	bl	8001f74 <Error_Handler>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3750      	adds	r7, #80	; 0x50
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <MX_GPIO_Init+0x104>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001eec:	481e      	ldr	r0, [pc, #120]	; (8001f68 <MX_GPIO_Init+0x108>)
 8001eee:	f000 fc6d 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4819      	ldr	r0, [pc, #100]	; (8001f6c <MX_GPIO_Init+0x10c>)
 8001f06:	f000 faaf 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001f0a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4814      	ldr	r0, [pc, #80]	; (8001f70 <MX_GPIO_Init+0x110>)
 8001f20:	f000 faa2 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <MX_GPIO_Init+0x108>)
 8001f3e:	f000 fa93 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f42:	234f      	movs	r3, #79	; 0x4f
 8001f44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_GPIO_Init+0x108>)
 8001f56:	f000 fa87 	bl	8002468 <HAL_GPIO_Init>

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002028:	f000 f8ca 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <OTG_FS_IRQHandler+0x10>)
 8002036:	f000 fd32 	bl	8002a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200006e8 	.word	0x200006e8

08002044 <_sbrk>:
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x50>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x16>
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <_sbrk+0x50>)
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <_sbrk+0x54>)
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <_sbrk+0x50>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <_sbrk+0x50>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	466a      	mov	r2, sp
 800206a:	4293      	cmp	r3, r2
 800206c:	d907      	bls.n	800207e <_sbrk+0x3a>
 800206e:	f005 fc41 	bl	80078f4 <__errno>
 8002072:	4602      	mov	r2, r0
 8002074:	230c      	movs	r3, #12
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	e006      	b.n	800208c <_sbrk+0x48>
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <_sbrk+0x50>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a03      	ldr	r2, [pc, #12]	; (8002094 <_sbrk+0x50>)
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200001f4 	.word	0x200001f4
 8002098:	20000af8 	.word	0x20000af8

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <SystemInit+0x28>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <SystemInit+0x28>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SystemInit+0x28>)
 80020b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020b6:	609a      	str	r2, [r3, #8]
#endif
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopFillZerobss+0x14>
 80020cc:	2100      	movs	r1, #0
 80020ce:	e003      	b.n	80020d8 <LoopCopyDataInit>

080020d0 <CopyDataInit>:
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <LoopFillZerobss+0x18>)
 80020d2:	585b      	ldr	r3, [r3, r1]
 80020d4:	5043      	str	r3, [r0, r1]
 80020d6:	3104      	adds	r1, #4

080020d8 <LoopCopyDataInit>:
 80020d8:	480b      	ldr	r0, [pc, #44]	; (8002108 <LoopFillZerobss+0x1c>)
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <LoopFillZerobss+0x20>)
 80020dc:	1842      	adds	r2, r0, r1
 80020de:	429a      	cmp	r2, r3
 80020e0:	d3f6      	bcc.n	80020d0 <CopyDataInit>
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <LoopFillZerobss+0x24>)
 80020e4:	e002      	b.n	80020ec <LoopFillZerobss>

080020e6 <FillZerobss>:
 80020e6:	2300      	movs	r3, #0
 80020e8:	f842 3b04 	str.w	r3, [r2], #4

080020ec <LoopFillZerobss>:
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <LoopFillZerobss+0x28>)
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3f9      	bcc.n	80020e6 <FillZerobss>
 80020f2:	f7ff ffd3 	bl	800209c <SystemInit>
 80020f6:	f005 fc03 	bl	8007900 <__libc_init_array>
 80020fa:	f7ff fe1d 	bl	8001d38 <main>
 80020fe:	4770      	bx	lr
 8002100:	20020000 	.word	0x20020000
 8002104:	08007be4 	.word	0x08007be4
 8002108:	20000000 	.word	0x20000000
 800210c:	200001d4 	.word	0x200001d4
 8002110:	200001d4 	.word	0x200001d4
 8002114:	20000af4 	.word	0x20000af4

08002118 <ADC_IRQHandler>:
 8002118:	e7fe      	b.n	8002118 <ADC_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 f94d 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff ff18 	bl	8001f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f965 	bl	800244e <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 f92d 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000214 	.word	0x20000214

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000214 	.word	0x20000214

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_Delay+0x40>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000008 	.word	0x20000008

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e16b      	b.n	800275c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 815a 	bne.w	8002756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00b      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b6:	2b11      	cmp	r3, #17
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b12      	cmp	r3, #18
 80024c0:	d130      	bne.n	8002524 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0xfc>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80b4 	beq.w	8002756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_GPIO_Init+0x308>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <HAL_GPIO_Init+0x308>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_GPIO_Init+0x308>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_GPIO_Init+0x30c>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <HAL_GPIO_Init+0x310>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x226>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a50      	ldr	r2, [pc, #320]	; (800277c <HAL_GPIO_Init+0x314>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x222>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	; (8002780 <HAL_GPIO_Init+0x318>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x21e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_Init+0x31c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x21a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x320>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x216>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_GPIO_Init+0x324>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x212>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_GPIO_Init+0x328>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x20e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x20a>
 800266e:	2307      	movs	r3, #7
 8002670:	e00e      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002672:	2308      	movs	r3, #8
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002676:	2306      	movs	r3, #6
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x228>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x228>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_GPIO_Init+0x30c>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d2:	4a31      	ldr	r2, [pc, #196]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x330>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_GPIO_Init+0x330>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f ae90 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3724      	adds	r7, #36	; 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002800:	b08f      	sub	sp, #60	; 0x3c
 8002802:	af0a      	add	r7, sp, #40	; 0x28
 8002804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e10f      	b.n	8002a30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f004 fd78 	bl	8007320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2203      	movs	r2, #3
 8002834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fe8f 	bl	8004572 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	687e      	ldr	r6, [r7, #4]
 800285c:	466d      	mov	r5, sp
 800285e:	f106 0410 	add.w	r4, r6, #16
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800286e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002872:	1d33      	adds	r3, r6, #4
 8002874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f001 fd66 	bl	8004348 <USB_CoreInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0d0      	b.n	8002a30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fe7d 	bl	8004594 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e04a      	b.n	8002936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	333d      	adds	r3, #61	; 0x3d
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	333c      	adds	r3, #60	; 0x3c
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	b298      	uxth	r0, r3
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3342      	adds	r3, #66	; 0x42
 80028dc:	4602      	mov	r2, r0
 80028de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	333f      	adds	r3, #63	; 0x3f
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3344      	adds	r3, #68	; 0x44
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3348      	adds	r3, #72	; 0x48
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3350      	adds	r3, #80	; 0x50
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	3301      	adds	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d3af      	bcc.n	80028a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e044      	b.n	80029d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3301      	adds	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3b5      	bcc.n	8002946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	687e      	ldr	r6, [r7, #4]
 80029e2:	466d      	mov	r5, sp
 80029e4:	f106 0410 	add.w	r4, r6, #16
 80029e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f8:	1d33      	adds	r3, r6, #4
 80029fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fc:	6838      	ldr	r0, [r7, #0]
 80029fe:	f001 fdf3 	bl	80045e8 <USB_DevInit>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e00d      	b.n	8002a30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fe32 	bl	8005692 <USB_DevDisconnect>

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_PCD_Start+0x1c>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e020      	b.n	8002a96 <HAL_PCD_Start+0x5e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d109      	bne.n	8002a78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d005      	beq.n	8002a78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fdf0 	bl	8005662 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fd62 	bl	8004550 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a9e:	b590      	push	{r4, r7, lr}
 8002aa0:	b08d      	sub	sp, #52	; 0x34
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 fe97 	bl	80057e8 <USB_GetMode>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 839d 	bne.w	80031fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fdfb 	bl	80056c2 <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8393 	beq.w	80031fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fdf2 	bl	80056c2 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d107      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f002 0202 	and.w	r2, r2, #2
 8002af6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 fde0 	bl	80056c2 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d161      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	0c5b      	lsrs	r3, r3, #17
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d124      	bne.n	8002b92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d035      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	6a38      	ldr	r0, [r7, #32]
 8002b68:	f002 fc58 	bl	800541c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b78:	441a      	add	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8a:	441a      	add	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	e016      	b.n	8002bc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	0c5b      	lsrs	r3, r3, #17
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d110      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6a38      	ldr	r0, [r7, #32]
 8002baa:	f002 fc37 	bl	800541c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bba:	441a      	add	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 fd74 	bl	80056c2 <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002be4:	d16e      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fd7a 	bl	80056e8 <USB_ReadDevAllOutEpInterrupt>
 8002bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bf6:	e062      	b.n	8002cbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d057      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fd9f 	bl	8005750 <USB_ReadDevOutEPInterrupt>
 8002c12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fd98 	bl	8003768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2308      	movs	r3, #8
 8002c52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fe92 	bl	8003980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2310      	movs	r3, #16
 8002c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2320      	movs	r3, #32
 8002c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d199      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fcfa 	bl	80056c2 <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd8:	f040 80c0 	bne.w	8002e5c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fd1b 	bl	800571c <USB_ReadDevAllInEpInterrupt>
 8002ce6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cec:	e0b2      	b.n	8002e54 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a7 	beq.w	8002e48 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fd41 	bl	800578c <USB_ReadDevInEPInterrupt>
 8002d0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d057      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69f9      	ldr	r1, [r7, #28]
 8002d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d36:	4013      	ands	r3, r2
 8002d38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d132      	bne.n	8002dba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3348      	adds	r3, #72	; 0x48
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4403      	add	r3, r0
 8002d74:	3344      	adds	r3, #68	; 0x44
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4419      	add	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3348      	adds	r3, #72	; 0x48
 8002d8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <HAL_PCD_IRQHandler+0x31c>
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3350      	adds	r3, #80	; 0x50
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002db2:	461a      	mov	r2, r3
 8002db4:	2101      	movs	r1, #1
 8002db6:	f002 fd49 	bl	800584c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f004 fb2e 	bl	8007422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2308      	movs	r3, #8
 8002de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2340      	movs	r3, #64	; 0x40
 8002e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	2302      	movs	r3, #2
 8002e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fc03 	bl	800364e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f47f af49 	bne.w	8002cee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fc2e 	bl	80056c2 <USB_ReadInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e70:	d122      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d108      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fe0e 	bl	8003abc <HAL_PCDEx_LPM_Callback>
 8002ea0:	e002      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f004 fb34 	bl	8007510 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fc00 	bl	80056c2 <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ecc:	d112      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f004 faf0 	bl	80074c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ef2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fbe2 	bl	80056c2 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	f040 80c7 	bne.w	800309a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2110      	movs	r1, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 fcc2 	bl	80048b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f30:	e056      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f56:	0151      	lsls	r1, r2, #5
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	440a      	add	r2, r1
 8002f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f64:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f76:	0151      	lsls	r1, r2, #5
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	440a      	add	r2, r1
 8002f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002faa:	0151      	lsls	r1, r2, #5
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	440a      	add	r2, r1
 8002fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	0151      	lsls	r1, r2, #5
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	440a      	add	r2, r1
 8002fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	3301      	adds	r3, #1
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3a3      	bcc.n	8002f32 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ffc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003016:	f043 030b 	orr.w	r3, r3, #11
 800301a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f043 030b 	orr.w	r3, r3, #11
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	e015      	b.n	8003060 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003046:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800304a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305a:	f043 030b 	orr.w	r3, r3, #11
 800305e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800306e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003072:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003084:	461a      	mov	r2, r3
 8003086:	f002 fbe1 	bl	800584c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fb0f 	bl	80056c2 <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ae:	d124      	bne.n	80030fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 fba5 	bl	8005804 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 fc57 	bl	8004972 <USB_GetDevSpeed>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681c      	ldr	r4, [r3, #0]
 80030d0:	f001 f92e 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 80030d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f001 f994 	bl	800440c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f004 f9c4 	bl	8007472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 fadf 	bl	80056c2 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b08      	cmp	r3, #8
 800310c:	d10a      	bne.n	8003124 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f004 f9a1 	bl	8007456 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f002 0208 	and.w	r2, r2, #8
 8003122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f002 faca 	bl	80056c2 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003138:	d10f      	bne.n	800315a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f004 fa03 	bl	8007550 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f002 faaf 	bl	80056c2 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316e:	d10f      	bne.n	8003190 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f004 f9d6 	bl	800752c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800318e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fa94 	bl	80056c2 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d10a      	bne.n	80031bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f004 f9e4 	bl	8007574 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fa7e 	bl	80056c2 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d115      	bne.n	80031fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f004 f9d4 	bl	8007590 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	e000      	b.n	80031fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80031fa:	bf00      	nop
    }
  }
}
 80031fc:	3734      	adds	r7, #52	; 0x34
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_SetAddress+0x1a>
 8003218:	2302      	movs	r3, #2
 800321a:	e013      	b.n	8003244 <HAL_PCD_SetAddress+0x42>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f002 f9ee 	bl	8005616 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	70fb      	strb	r3, [r7, #3]
 800325e:	460b      	mov	r3, r1
 8003260:	803b      	strh	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800326a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da0f      	bge.n	8003292 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3338      	adds	r3, #56	; 0x38
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	705a      	strb	r2, [r3, #1]
 8003290:	e00f      	b.n	80032b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032be:	883a      	ldrh	r2, [r7, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	78ba      	ldrb	r2, [r7, #2]
 80032c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032dc:	78bb      	ldrb	r3, [r7, #2]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d102      	bne.n	80032e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_PCD_EP_Open+0xaa>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e00e      	b.n	8003314 <HAL_PCD_EP_Open+0xc8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	f001 fb59 	bl	80049bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003312:	7afb      	ldrb	r3, [r7, #11]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0f      	bge.n	8003350 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	3338      	adds	r3, #56	; 0x38
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	705a      	strb	r2, [r3, #1]
 800334e:	e00f      	b.n	8003370 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_PCD_EP_Close+0x6e>
 8003386:	2302      	movs	r3, #2
 8003388:	e00e      	b.n	80033a8 <HAL_PCD_EP_Close+0x8c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	4618      	mov	r0, r3
 800339a:	f001 fb97 	bl	8004acc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6979      	ldr	r1, [r7, #20]
 8003424:	f001 fe72 	bl	800510c <USB_EP0StartXfer>
 8003428:	e008      	b.n	800343c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	f001 fc24 	bl	8004c84 <USB_EPStartXfer>
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	460b      	mov	r3, r1
 8003454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3338      	adds	r3, #56	; 0x38
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2201      	movs	r2, #1
 8003484:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	f001 fe28 	bl	800510c <USB_EP0StartXfer>
 80034bc:	e008      	b.n	80034d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6979      	ldr	r1, [r7, #20]
 80034cc:	f001 fbda 	bl	8004c84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d901      	bls.n	80034f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e050      	b.n	800359a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da0f      	bge.n	8003520 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 020f 	and.w	r2, r3, #15
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3338      	adds	r3, #56	; 0x38
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	705a      	strb	r2, [r3, #1]
 800351e:	e00d      	b.n	800353c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_PCD_EP_SetStall+0x82>
 8003558:	2302      	movs	r3, #2
 800355a:	e01e      	b.n	800359a <HAL_PCD_EP_SetStall+0xc0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	f001 ff7f 	bl	800546e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	b2d9      	uxtb	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800358a:	461a      	mov	r2, r3
 800358c:	f002 f95e 	bl	800584c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d901      	bls.n	80035c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e042      	b.n	8003646 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da0f      	bge.n	80035e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	705a      	strb	r2, [r3, #1]
 80035e6:	e00f      	b.n	8003608 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 020f 	and.w	r2, r3, #15
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	3304      	adds	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_EP_ClrStall+0x86>
 8003624:	2302      	movs	r3, #2
 8003626:	e00e      	b.n	8003646 <HAL_PCD_EP_ClrStall+0xa4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	f001 ff87 	bl	800554a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af02      	add	r7, sp, #8
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3338      	adds	r3, #56	; 0x38
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	429a      	cmp	r2, r3
 8003680:	d901      	bls.n	8003686 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e06c      	b.n	8003760 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	429a      	cmp	r2, r3
 800369a:	d902      	bls.n	80036a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3303      	adds	r3, #3
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036aa:	e02b      	b.n	8003704 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d902      	bls.n	80036c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3303      	adds	r3, #3
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68d9      	ldr	r1, [r3, #12]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4603      	mov	r3, r0
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f001 fe63 	bl	80053b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	b29b      	uxth	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	d809      	bhi.n	800372e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003722:	429a      	cmp	r2, r3
 8003724:	d203      	bcs.n	800372e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1be      	bne.n	80036ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	429a      	cmp	r2, r3
 8003738:	d811      	bhi.n	800375e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	43db      	mvns	r3, r3
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375a:	4013      	ands	r3, r2
 800375c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	3304      	adds	r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	f040 80a0 	bne.w	80038e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a72      	ldr	r2, [pc, #456]	; (8003978 <PCD_EP_OutXfrComplete_int+0x210>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f240 80dd 	bls.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80d7 	beq.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	6093      	str	r3, [r2, #8]
 80037d4:	e0cb      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2320      	movs	r3, #32
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	e0bc      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80b7 	bne.w	800396e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <PCD_EP_OutXfrComplete_int+0x210>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d90f      	bls.n	8003828 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003824:	6093      	str	r3, [r2, #8]
 8003826:	e0a2      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800383a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	440b      	add	r3, r1
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800384e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4403      	add	r3, r0
 800385e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003862:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4419      	add	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d114      	bne.n	80038d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038ca:	461a      	mov	r2, r3
 80038cc:	2101      	movs	r1, #1
 80038ce:	f001 ffbd 	bl	800584c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f003 fd87 	bl	80073ec <HAL_PCD_DataOutStageCallback>
 80038de:	e046      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a26      	ldr	r2, [pc, #152]	; (800397c <PCD_EP_OutXfrComplete_int+0x214>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d124      	bne.n	8003932 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	e032      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2320      	movs	r3, #32
 8003922:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f003 fd5e 	bl	80073ec <HAL_PCD_DataOutStageCallback>
 8003930:	e01d      	b.n	800396e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800395a:	461a      	mov	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	f001 ff75 	bl	800584c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f003 fd3f 	bl	80073ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	4f54300a 	.word	0x4f54300a
 800397c:	4f54310a 	.word	0x4f54310a

08003980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d90e      	bls.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f003 fcf7 	bl	80073c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d90c      	bls.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039f4:	461a      	mov	r2, r3
 80039f6:	2101      	movs	r1, #1
 80039f8:	f001 ff28 	bl	800584c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	4f54300a 	.word	0x4f54300a

08003a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a2a:	883b      	ldrh	r3, [r7, #0]
 8003a2c:	0419      	lsls	r1, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	e028      	b.n	8003a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	e00d      	b.n	8003a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	3340      	adds	r3, #64	; 0x40
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	3301      	adds	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3ec      	bcc.n	8003a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a74:	883b      	ldrh	r3, [r7, #0]
 8003a76:	0418      	lsls	r0, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4302      	orrs	r2, r0
 8003a84:	3340      	adds	r3, #64	; 0x40
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e25b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d075      	beq.n	8003bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af2:	4ba3      	ldr	r3, [pc, #652]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d00c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afe:	4ba0      	ldr	r3, [pc, #640]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d112      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b9d      	ldr	r3, [pc, #628]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b99      	ldr	r3, [pc, #612]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d157      	bne.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e236      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x74>
 8003b3a:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a90      	ldr	r2, [pc, #576]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b8b      	ldr	r3, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a8a      	ldr	r2, [pc, #552]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a87      	ldr	r2, [pc, #540]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	4b84      	ldr	r3, [pc, #528]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a83      	ldr	r2, [pc, #524]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b81      	ldr	r3, [pc, #516]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a80      	ldr	r2, [pc, #512]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fb2c 	bl	80021e8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fe fb28 	bl	80021e8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1fb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fb18 	bl	80021e8 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fb14 	bl	80021e8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1e7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1bb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4952      	ldr	r1, [pc, #328]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	e03a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_OscConfig+0x2b0>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fe facd 	bl	80021e8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fe fac9 	bl	80021e8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e19c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4940      	ldr	r1, [pc, #256]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_OscConfig+0x2b0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe faac 	bl	80021e8 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fe faa8 	bl	80021e8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e17b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d030      	beq.n	8003d20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <HAL_RCC_OscConfig+0x2b4>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe fa8c 	bl	80021e8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fe fa88 	bl	80021e8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e15b      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x200>
 8003cf2:	e015      	b.n	8003d20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x2b4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fa75 	bl	80021e8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d02:	f7fe fa71 	bl	80021e8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e144      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a0 	beq.w	8003e6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x2b8>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe fa37 	bl	80021e8 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e011      	b.n	8003da2 <HAL_RCC_OscConfig+0x2ce>
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470000 	.word	0x42470000
 8003d88:	42470e80 	.word	0x42470e80
 8003d8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fe fa2a 	bl	80021e8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0fd      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2f0>
 8003db6:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCC_OscConfig+0x32a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x312>
 8003dcc:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a76      	ldr	r2, [pc, #472]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b74      	ldr	r3, [pc, #464]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a73      	ldr	r2, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x32a>
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a70      	ldr	r2, [pc, #448]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe f9ef 	bl	80021e8 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe f9eb 	bl	80021e8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0bc      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ee      	beq.n	8003e0e <HAL_RCC_OscConfig+0x33a>
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7fe f9d9 	bl	80021e8 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe f9d5 	bl	80021e8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0a6      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b52      	ldr	r3, [pc, #328]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8092 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e78:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d05c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d141      	bne.n	8003f10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fe f9a9 	bl	80021e8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fe f9a5 	bl	80021e8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e078      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	4933      	ldr	r1, [pc, #204]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe f97e 	bl	80021e8 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fe f97a 	bl	80021e8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04d      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x41c>
 8003f0e:	e045      	b.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x4dc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fe f967 	bl	80021e8 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe f963 	bl	80021e8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e036      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x44a>
 8003f3c:	e02e      	b.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e029      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d115      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	42470060 	.word	0x42470060

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fe f8a0 	bl	80021e8 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe f89c 	bl	80021e8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4601      	mov	r1, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	fa21 f303 	lsr.w	r3, r1, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe f800 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	08007b64 	.word	0x08007b64
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	2300      	movs	r3, #0
 8004190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d007      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x32>
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d008      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x38>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 80b4 	bne.w	8004314 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ae:	60bb      	str	r3, [r7, #8]
       break;
 80041b0:	e0b3      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b5e      	ldr	r3, [pc, #376]	; (800432c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041b4:	60bb      	str	r3, [r7, #8]
      break;
 80041b6:	e0b0      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b58      	ldr	r3, [pc, #352]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04a      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b55      	ldr	r3, [pc, #340]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	ea03 0501 	and.w	r5, r3, r1
 80041e4:	ea04 0602 	and.w	r6, r4, r2
 80041e8:	4629      	mov	r1, r5
 80041ea:	4632      	mov	r2, r6
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	f04f 0400 	mov.w	r4, #0
 80041f4:	0154      	lsls	r4, r2, #5
 80041f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041fa:	014b      	lsls	r3, r1, #5
 80041fc:	4619      	mov	r1, r3
 80041fe:	4622      	mov	r2, r4
 8004200:	1b49      	subs	r1, r1, r5
 8004202:	eb62 0206 	sbc.w	r2, r2, r6
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	0194      	lsls	r4, r2, #6
 8004210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004214:	018b      	lsls	r3, r1, #6
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	eb64 0402 	sbc.w	r4, r4, r2
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	00e2      	lsls	r2, r4, #3
 8004226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800422a:	00d9      	lsls	r1, r3, #3
 800422c:	460b      	mov	r3, r1
 800422e:	4614      	mov	r4, r2
 8004230:	195b      	adds	r3, r3, r5
 8004232:	eb44 0406 	adc.w	r4, r4, r6
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	0262      	lsls	r2, r4, #9
 8004240:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004244:	0259      	lsls	r1, r3, #9
 8004246:	460b      	mov	r3, r1
 8004248:	4614      	mov	r4, r2
 800424a:	4618      	mov	r0, r3
 800424c:	4621      	mov	r1, r4
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	f7fb ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e049      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	ea03 0501 	and.w	r5, r3, r1
 800427a:	ea04 0602 	and.w	r6, r4, r2
 800427e:	4629      	mov	r1, r5
 8004280:	4632      	mov	r2, r6
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	0154      	lsls	r4, r2, #5
 800428c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004290:	014b      	lsls	r3, r1, #5
 8004292:	4619      	mov	r1, r3
 8004294:	4622      	mov	r2, r4
 8004296:	1b49      	subs	r1, r1, r5
 8004298:	eb62 0206 	sbc.w	r2, r2, r6
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	0194      	lsls	r4, r2, #6
 80042a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	1a5b      	subs	r3, r3, r1
 80042ae:	eb64 0402 	sbc.w	r4, r4, r2
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	00e2      	lsls	r2, r4, #3
 80042bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042c0:	00d9      	lsls	r1, r3, #3
 80042c2:	460b      	mov	r3, r1
 80042c4:	4614      	mov	r4, r2
 80042c6:	195b      	adds	r3, r3, r5
 80042c8:	eb44 0406 	adc.w	r4, r4, r6
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	02a2      	lsls	r2, r4, #10
 80042d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042da:	0299      	lsls	r1, r3, #10
 80042dc:	460b      	mov	r3, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	4621      	mov	r1, r4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	461a      	mov	r2, r3
 80042ec:	4623      	mov	r3, r4
 80042ee:	f7fb ff6b 	bl	80001c8 <__aeabi_uldivmod>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	60bb      	str	r3, [r7, #8]
      break;
 8004312:	e002      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004316:	60bb      	str	r3, [r7, #8]
      break;
 8004318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431a:	68bb      	ldr	r3, [r7, #8]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400
 800432c:	007a1200 	.word	0x007a1200

08004330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_RCC_GetHCLKFreq+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000000 	.word	0x20000000

08004348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004348:	b084      	sub	sp, #16
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	f107 001c 	add.w	r0, r7, #28
 8004356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b01      	cmp	r3, #1
 800435e:	d122      	bne.n	80043a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 fab4 	bl	8005908 <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e01a      	b.n	80043dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 faa8 	bl	8005908 <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
 80043ce:	e005      	b.n	80043dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d10b      	bne.n	80043fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f043 0206 	orr.w	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004406:	b004      	add	sp, #16
 8004408:	4770      	bx	lr
	...

0800440c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d165      	bne.n	80044ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a41      	ldr	r2, [pc, #260]	; (8004528 <USB_SetTurnaroundTime+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d906      	bls.n	8004436 <USB_SetTurnaroundTime+0x2a>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <USB_SetTurnaroundTime+0x120>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d802      	bhi.n	8004436 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004430:	230f      	movs	r3, #15
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e062      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a3c      	ldr	r2, [pc, #240]	; (800452c <USB_SetTurnaroundTime+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d906      	bls.n	800444c <USB_SetTurnaroundTime+0x40>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <USB_SetTurnaroundTime+0x124>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d802      	bhi.n	800444c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004446:	230e      	movs	r3, #14
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e057      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a38      	ldr	r2, [pc, #224]	; (8004530 <USB_SetTurnaroundTime+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d906      	bls.n	8004462 <USB_SetTurnaroundTime+0x56>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a37      	ldr	r2, [pc, #220]	; (8004534 <USB_SetTurnaroundTime+0x128>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d802      	bhi.n	8004462 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800445c:	230d      	movs	r3, #13
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e04c      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a33      	ldr	r2, [pc, #204]	; (8004534 <USB_SetTurnaroundTime+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d906      	bls.n	8004478 <USB_SetTurnaroundTime+0x6c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a32      	ldr	r2, [pc, #200]	; (8004538 <USB_SetTurnaroundTime+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d802      	bhi.n	8004478 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004472:	230c      	movs	r3, #12
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e041      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <USB_SetTurnaroundTime+0x12c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d906      	bls.n	800448e <USB_SetTurnaroundTime+0x82>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a2e      	ldr	r2, [pc, #184]	; (800453c <USB_SetTurnaroundTime+0x130>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d802      	bhi.n	800448e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004488:	230b      	movs	r3, #11
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e036      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <USB_SetTurnaroundTime+0x130>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d906      	bls.n	80044a4 <USB_SetTurnaroundTime+0x98>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a29      	ldr	r2, [pc, #164]	; (8004540 <USB_SetTurnaroundTime+0x134>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800449e:	230a      	movs	r3, #10
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e02b      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a26      	ldr	r2, [pc, #152]	; (8004540 <USB_SetTurnaroundTime+0x134>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <USB_SetTurnaroundTime+0xae>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <USB_SetTurnaroundTime+0x138>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d802      	bhi.n	80044ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b4:	2309      	movs	r3, #9
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e020      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a21      	ldr	r2, [pc, #132]	; (8004544 <USB_SetTurnaroundTime+0x138>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d906      	bls.n	80044d0 <USB_SetTurnaroundTime+0xc4>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <USB_SetTurnaroundTime+0x13c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ca:	2308      	movs	r3, #8
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e015      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <USB_SetTurnaroundTime+0x13c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d906      	bls.n	80044e6 <USB_SetTurnaroundTime+0xda>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <USB_SetTurnaroundTime+0x140>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d802      	bhi.n	80044e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e0:	2307      	movs	r3, #7
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e00a      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044e6:	2306      	movs	r3, #6
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e007      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044f2:	2309      	movs	r3, #9
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e001      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044f8:	2309      	movs	r3, #9
 80044fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	029b      	lsls	r3, r3, #10
 8004510:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	00d8acbf 	.word	0x00d8acbf
 800452c:	00e4e1bf 	.word	0x00e4e1bf
 8004530:	00f423ff 	.word	0x00f423ff
 8004534:	0106737f 	.word	0x0106737f
 8004538:	011a499f 	.word	0x011a499f
 800453c:	01312cff 	.word	0x01312cff
 8004540:	014ca43f 	.word	0x014ca43f
 8004544:	016e35ff 	.word	0x016e35ff
 8004548:	01a6ab1f 	.word	0x01a6ab1f
 800454c:	01e847ff 	.word	0x01e847ff

08004550 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d106      	bne.n	80045c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	e00b      	b.n	80045d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e001      	b.n	80045d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e003      	b.n	80045e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045d8:	2032      	movs	r0, #50	; 0x32
 80045da:	f7fd fe11 	bl	8002200 <HAL_Delay>

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e8:	b084      	sub	sp, #16
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e009      	b.n	800461c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3340      	adds	r3, #64	; 0x40
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3301      	adds	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0e      	cmp	r3, #14
 8004620:	d9f2      	bls.n	8004608 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11c      	bne.n	8004662 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
 8004660:	e00b      	b.n	800467a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	4619      	mov	r1, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	461a      	mov	r2, r3
 8004696:	680b      	ldr	r3, [r1, #0]
 8004698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10c      	bne.n	80046ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046a6:	2100      	movs	r1, #0
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f949 	bl	8004940 <USB_SetDevSpeed>
 80046ae:	e008      	b.n	80046c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046b0:	2101      	movs	r1, #1
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f944 	bl	8004940 <USB_SetDevSpeed>
 80046b8:	e003      	b.n	80046c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ba:	2103      	movs	r1, #3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f93f 	bl	8004940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046c2:	2110      	movs	r1, #16
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8f3 	bl	80048b0 <USB_FlushTxFifo>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f911 	bl	80048fc <USB_FlushRxFifo>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	461a      	mov	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	461a      	mov	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e043      	b.n	8004796 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004724:	d118      	bne.n	8004758 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e013      	b.n	800476a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	461a      	mov	r2, r3
 8004750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e008      	b.n	800476a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800478e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3301      	adds	r3, #1
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	d3b7      	bcc.n	800470e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e043      	b.n	800482c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ba:	d118      	bne.n	80047ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e013      	b.n	8004800 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	e008      	b.n	8004800 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3301      	adds	r3, #1
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d3b7      	bcc.n	80047a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <USB_DevInit+0x2c4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f043 0208 	orr.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a8:	b004      	add	sp, #16
 80048aa:	4770      	bx	lr
 80048ac:	803c3800 	.word	0x803c3800

080048b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <USB_FlushTxFifo+0x48>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d0f0      	beq.n	80048ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	00030d40 	.word	0x00030d40

080048fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2210      	movs	r2, #16
 800490c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <USB_FlushRxFifo+0x40>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e006      	b.n	800492e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d0f0      	beq.n	800490e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	00030d40 	.word	0x00030d40

08004940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b087      	sub	sp, #28
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0306 	and.w	r3, r3, #6
 800498a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
 8004996:	e00a      	b.n	80049ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d002      	beq.n	80049a4 <USB_GetDevSpeed+0x32>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d102      	bne.n	80049aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049a4:	2302      	movs	r3, #2
 80049a6:	75fb      	strb	r3, [r7, #23]
 80049a8:	e001      	b.n	80049ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049aa:	230f      	movs	r3, #15
 80049ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d13a      	bne.n	8004a4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d155      	bne.n	8004abc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	78db      	ldrb	r3, [r3, #3]
 8004a2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	059b      	lsls	r3, r3, #22
 8004a32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a34:	4313      	orrs	r3, r2
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e036      	b.n	8004abc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11a      	bne.n	8004abc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d161      	bne.n	8004bac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004afe:	d11f      	bne.n	8004b40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b60:	4013      	ands	r3, r2
 8004b62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b84:	4013      	ands	r3, r2
 8004b86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0159      	lsls	r1, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	440b      	add	r3, r1
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <USB_DeactivateEndpoint+0x1b0>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	e060      	b.n	8004c6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc2:	d11f      	bne.n	8004c04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004be2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	43db      	mvns	r3, r3
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	4619      	mov	r1, r3
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <USB_DeactivateEndpoint+0x1b4>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	ec337800 	.word	0xec337800
 8004c80:	eff37800 	.word	0xeff37800

08004c84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f040 815c 	bne.w	8004f5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d132      	bne.n	8004d14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ccc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0c:	0cdb      	lsrs	r3, r3, #19
 8004d0e:	04db      	lsls	r3, r3, #19
 8004d10:	6113      	str	r3, [r2, #16]
 8004d12:	e074      	b.n	8004dfe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	0cdb      	lsrs	r3, r3, #19
 8004d30:	04db      	lsls	r3, r3, #19
 8004d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6959      	ldr	r1, [r3, #20]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	440b      	add	r3, r1
 8004d70:	1e59      	subs	r1, r3, #1
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7a:	04d9      	lsls	r1, r3, #19
 8004d7c:	4b9d      	ldr	r3, [pc, #628]	; (8004ff4 <USB_EPStartXfer+0x370>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	0148      	lsls	r0, r1, #5
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	4401      	add	r1, r0
 8004d88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	0148      	lsls	r0, r1, #5
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	4401      	add	r1, r0
 8004dae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	78db      	ldrb	r3, [r3, #3]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d11f      	bne.n	8004dfe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ddc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d14b      	bne.n	8004e9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	78db      	ldrb	r3, [r3, #3]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d128      	bne.n	8004e7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d110      	bne.n	8004e5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e00f      	b.n	8004e7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e12f      	b.n	80050fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	78db      	ldrb	r3, [r3, #3]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d015      	beq.n	8004ef0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8117 	beq.w	80050fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	2101      	movs	r1, #1
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eea:	4313      	orrs	r3, r2
 8004eec:	634b      	str	r3, [r1, #52]	; 0x34
 8004eee:	e105      	b.n	80050fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d110      	bne.n	8004f22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e00f      	b.n	8004f42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	b298      	uxth	r0, r3
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	4603      	mov	r3, r0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa2b 	bl	80053b2 <USB_WritePacket>
 8004f5c:	e0ce      	b.n	80050fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	0cdb      	lsrs	r3, r3, #19
 8004f7a:	04db      	lsls	r3, r3, #19
 8004f7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d126      	bne.n	8004ff8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	0148      	lsls	r0, r1, #5
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fee:	6113      	str	r3, [r2, #16]
 8004ff0:	e036      	b.n	8005060 <USB_EPStartXfer+0x3dc>
 8004ff2:	bf00      	nop
 8004ff4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4413      	add	r3, r2
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	8afb      	ldrh	r3, [r7, #22]
 800501e:	04d9      	lsls	r1, r3, #19
 8005020:	4b39      	ldr	r3, [pc, #228]	; (8005108 <USB_EPStartXfer+0x484>)
 8005022:	400b      	ands	r3, r1
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	0148      	lsls	r0, r1, #5
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	4401      	add	r1, r0
 800502c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005030:	4313      	orrs	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	8af9      	ldrh	r1, [r7, #22]
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	0148      	lsls	r0, r1, #5
 8005054:	69f9      	ldr	r1, [r7, #28]
 8005056:	4401      	add	r1, r0
 8005058:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800505c:	4313      	orrs	r3, r2
 800505e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10d      	bne.n	8005082 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68d9      	ldr	r1, [r3, #12]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	460a      	mov	r2, r1
 8005080:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	78db      	ldrb	r3, [r3, #3]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d128      	bne.n	80050dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e00f      	b.n	80050dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	1ff80000 	.word	0x1ff80000

0800510c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 80cd 	bne.w	80052c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d132      	bne.n	800519c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	0cdb      	lsrs	r3, r3, #19
 8005196:	04db      	lsls	r3, r3, #19
 8005198:	6113      	str	r3, [r2, #16]
 800519a:	e04e      	b.n	800523a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	0cdb      	lsrs	r3, r3, #19
 80051b8:	04db      	lsls	r3, r3, #19
 80051ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d903      	bls.n	80051f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	0148      	lsls	r0, r1, #5
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	4401      	add	r1, r0
 8005232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005236:	4313      	orrs	r3, r2
 8005238:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d11e      	bne.n	800527e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e092      	b.n	80053a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d07e      	beq.n	80053a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	2101      	movs	r1, #1
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c2:	4313      	orrs	r3, r2
 80052c4:	634b      	str	r3, [r1, #52]	; 0x34
 80052c6:	e06d      	b.n	80053a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	0cdb      	lsrs	r3, r3, #19
 80052e4:	04db      	lsls	r3, r3, #19
 80052e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800530a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	6939      	ldr	r1, [r7, #16]
 8005354:	0148      	lsls	r0, r1, #5
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	4401      	add	r1, r0
 800535a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10d      	bne.n	8005384 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68d9      	ldr	r1, [r3, #12]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	460a      	mov	r2, r1
 8005382:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b089      	sub	sp, #36	; 0x24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	4611      	mov	r1, r2
 80053be:	461a      	mov	r2, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	71fb      	strb	r3, [r7, #7]
 80053c4:	4613      	mov	r3, r2
 80053c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11a      	bne.n	800540e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053d8:	88bb      	ldrh	r3, [r7, #4]
 80053da:	3303      	adds	r3, #3
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e00f      	b.n	8005406 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	031a      	lsls	r2, r3, #12
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	461a      	mov	r2, r3
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3304      	adds	r3, #4
 80053fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	3301      	adds	r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d3eb      	bcc.n	80053e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3724      	adds	r7, #36	; 0x24
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	3303      	adds	r3, #3
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e00b      	b.n	8005458 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	601a      	str	r2, [r3, #0]
    pDest++;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3304      	adds	r3, #4
 8005450:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3301      	adds	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	429a      	cmp	r2, r3
 800545e:	d3ef      	bcc.n	8005440 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005460:	69fb      	ldr	r3, [r7, #28]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d12c      	bne.n	80054e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db12      	blt.n	80054c2 <USB_EPSetStall+0x54>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e02b      	b.n	800553c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	db12      	blt.n	800551c <USB_EPSetStall+0xae>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00f      	beq.n	800551c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800551a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800553a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d128      	bne.n	80055b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	78db      	ldrb	r3, [r3, #3]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d003      	beq.n	8005596 <USB_EPClearStall+0x4c>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	78db      	ldrb	r3, [r3, #3]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d138      	bne.n	8005608 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e027      	b.n	8005608 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	78db      	ldrb	r3, [r3, #3]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d003      	beq.n	80055e8 <USB_EPClearStall+0x9e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d10f      	bne.n	8005608 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005634:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005638:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005682:	2003      	movs	r0, #3
 8005684:	f7fc fdbc 	bl	8002200 <HAL_Delay>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056b2:	2003      	movs	r0, #3
 80056b4:	f7fc fda4 	bl	8002200 <HAL_Delay>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4013      	ands	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	0c1b      	lsrs	r3, r3, #16
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	b29b      	uxth	r3, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800577e:	68bb      	ldr	r3, [r7, #8]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	01db      	lsls	r3, r3, #7
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057da:	68bb      	ldr	r3, [r7, #8]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0301 	and.w	r3, r3, #1
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	460b      	mov	r3, r1
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	333c      	adds	r3, #60	; 0x3c
 8005862:	3304      	adds	r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4a26      	ldr	r2, [pc, #152]	; (8005904 <USB_EP0_OutStart+0xb8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d90a      	bls.n	8005886 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005880:	d101      	bne.n	8005886 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e037      	b.n	80058f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	2300      	movs	r3, #0
 8005890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b4:	f043 0318 	orr.w	r3, r3, #24
 80058b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10f      	bne.n	80058f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	4f54300a 	.word	0x4f54300a

08005908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a13      	ldr	r2, [pc, #76]	; (800596c <USB_CoreReset+0x64>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e01b      	b.n	800595e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	daf2      	bge.n	8005914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f043 0201 	orr.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <USB_CoreReset+0x64>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d0f0      	beq.n	800593e <USB_CoreReset+0x36>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	00030d40 	.word	0x00030d40

08005970 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800597c:	2018      	movs	r0, #24
 800597e:	f001 ffe3 	bl	8007948 <malloc>
 8005982:	4603      	mov	r3, r0
 8005984:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005994:	2302      	movs	r3, #2
 8005996:	e038      	b.n	8005a0a <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7c1b      	ldrb	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2205      	movs	r2, #5
 80059ac:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2205      	movs	r2, #5
 80059b2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80059b6:	e006      	b.n	80059c6 <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2205      	movs	r2, #5
 80059bc:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2205      	movs	r2, #5
 80059c2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80059c6:	2302      	movs	r3, #2
 80059c8:	2203      	movs	r2, #3
 80059ca:	2181      	movs	r1, #129	; 0x81
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fe54 	bl	800767a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80059d8:	2302      	movs	r3, #2
 80059da:	2203      	movs	r2, #3
 80059dc:	2101      	movs	r1, #1
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fe4b 	bl	800767a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	2302      	movs	r3, #2
 8005a00:	2101      	movs	r1, #1
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 ff28 	bl	8007858 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005a1e:	2181      	movs	r1, #129	; 0x81
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fe50 	bl	80076c6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005a32:	2101      	movs	r1, #1
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fe46 	bl	80076c6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 ff77 	bl	8007958 <free>
    pdev->pClassData = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d051      	beq.n	8005b4e <USBD_CUSTOM_HID_Setup+0xd2>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	f040 80d9 	bne.w	8005c62 <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	3b02      	subs	r3, #2
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d841      	bhi.n	8005b3e <USBD_CUSTOM_HID_Setup+0xc2>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <USBD_CUSTOM_HID_Setup+0x44>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b19 	.word	0x08005b19
 8005ac4:	08005af7 	.word	0x08005af7
 8005ac8:	08005b3f 	.word	0x08005b3f
 8005acc:	08005b3f 	.word	0x08005b3f
 8005ad0:	08005b3f 	.word	0x08005b3f
 8005ad4:	08005b3f 	.word	0x08005b3f
 8005ad8:	08005b3f 	.word	0x08005b3f
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b07 	.word	0x08005b07
 8005ae4:	08005ae9 	.word	0x08005ae9
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	885b      	ldrh	r3, [r3, #2]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]
      break;
 8005af4:	e02a      	b.n	8005b4c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3304      	adds	r3, #4
 8005afa:	2201      	movs	r2, #1
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fa2d 	bl	8006f5e <USBD_CtlSendData>
      break;
 8005b04:	e022      	b.n	8005b4c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e019      	b.n	8005b4c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fa1c 	bl	8006f5e <USBD_CtlSendData>
      break;
 8005b26:	e011      	b.n	8005b4c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005b2e:	6939      	ldr	r1, [r7, #16]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	88db      	ldrh	r3, [r3, #6]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 fa3d 	bl	8006fb6 <USBD_CtlPrepareRx>
      break;
 8005b3c:	e006      	b.n	8005b4c <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f99b 	bl	8006e7c <USBD_CtlError>
      ret = USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4a:	bf00      	nop
    }
    break;
 8005b4c:	e090      	b.n	8005c70 <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b0b      	cmp	r3, #11
 8005b54:	d87c      	bhi.n	8005c50 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <USBD_CUSTOM_HID_Setup+0xe0>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005c5f 	.word	0x08005c5f
 8005b64:	08005c51 	.word	0x08005c51
 8005b68:	08005c51 	.word	0x08005c51
 8005b6c:	08005c51 	.word	0x08005c51
 8005b70:	08005c51 	.word	0x08005c51
 8005b74:	08005bb5 	.word	0x08005bb5
 8005b78:	08005c51 	.word	0x08005c51
 8005b7c:	08005c51 	.word	0x08005c51
 8005b80:	08005c51 	.word	0x08005c51
 8005b84:	08005c03 	.word	0x08005c03
 8005b88:	08005c2b 	.word	0x08005c2b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d107      	bne.n	8005ba6 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b96:	f107 030e 	add.w	r3, r7, #14
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f9dd 	bl	8006f5e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ba4:	e05c      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 f967 	bl	8006e7c <USBD_CtlError>
        ret = USBD_FAIL;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb2:	e055      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	885b      	ldrh	r3, [r3, #2]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b22      	cmp	r3, #34	; 0x22
 8005bbe:	d10b      	bne.n	8005bd8 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	88db      	ldrh	r3, [r3, #6]
 8005bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc6:	bf28      	it	cs
 8005bc8:	232e      	movcs	r3, #46	; 0x2e
 8005bca:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e00d      	b.n	8005bf4 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b21      	cmp	r3, #33	; 0x21
 8005be2:	d107      	bne.n	8005bf4 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <USBD_CUSTOM_HID_Setup+0x200>)
 8005be6:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	88db      	ldrh	r3, [r3, #6]
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	bf28      	it	cs
 8005bf0:	2309      	movcs	r3, #9
 8005bf2:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 f9af 	bl	8006f5e <USBD_CtlSendData>
      break;
 8005c00:	e02e      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d107      	bne.n	8005c1c <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	2201      	movs	r2, #1
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 f9a2 	bl	8006f5e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c1a:	e021      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f92c 	bl	8006e7c <USBD_CtlError>
        ret = USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	e01a      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d106      	bne.n	8005c42 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	885b      	ldrh	r3, [r3, #2]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c40:	e00e      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f919 	bl	8006e7c <USBD_CtlError>
        ret = USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	e007      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f912 	bl	8006e7c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5c:	e000      	b.n	8005c60 <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 8005c5e:	bf00      	nop
    }
    break;
 8005c60:	e006      	b.n	8005c70 <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 f909 	bl	8006e7c <USBD_CtlError>
    ret = USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	75fb      	strb	r3, [r7, #23]
    break;
 8005c6e:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200000c8 	.word	0x200000c8

08005c80 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e019      	b.n	8005cd0 <USBD_CUSTOM_HID_SendReport+0x50>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d10f      	bne.n	8005cce <USBD_CUSTOM_HID_SendReport+0x4e>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	7d1b      	ldrb	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <USBD_CUSTOM_HID_SendReport+0x4a>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	2181      	movs	r1, #129	; 0x81
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f001 fda7 	bl	8007816 <USBD_LL_Transmit>
 8005cc8:	e001      	b.n	8005cce <USBD_CUSTOM_HID_SendReport+0x4e>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <USBD_CUSTOM_HID_SendReport+0x50>
    }
  }
  return (uint8_t)USBD_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2229      	movs	r2, #41	; 0x29
 8005ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005ce6:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000044 	.word	0x20000044

08005cf8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2229      	movs	r2, #41	; 0x29
 8005d04:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005d06:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000070 	.word	0x20000070

08005d18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2229      	movs	r2, #41	; 0x29
 8005d24:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005d26:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	2000009c 	.word	0x2000009c

08005d38 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e00e      	b.n	8005d94 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	7810      	ldrb	r0, [r2, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	7852      	ldrb	r2, [r2, #1]
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e00a      	b.n	8005dc8 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 fd49 	bl	8007858 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dde:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10c      	bne.n	8005e02 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	7810      	ldrb	r0, [r2, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	7852      	ldrb	r2, [r2, #1]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	220a      	movs	r2, #10
 8005e18:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005e1a:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	200000d4 	.word	0x200000d4

08005e2c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e004      	b.n	8005e4a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e025      	b.n	8005eba <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	79fa      	ldrb	r2, [r7, #7]
 8005eac:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f001 fb7c 	bl	80075ac <USBD_LL_Init>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e010      	b.n	8005efc <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f107 020e 	add.w	r2, r7, #14
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4798      	blx	r3
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fb99 	bl	8007644 <USBD_LL_Start>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	4611      	mov	r1, r2
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
  }

  return USBD_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 ff2b 	bl	8006e08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d00e      	beq.n	8005ff4 <USBD_LL_SetupStage+0x5a>
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d302      	bcc.n	8005fe0 <USBD_LL_SetupStage+0x46>
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d014      	beq.n	8006008 <USBD_LL_SetupStage+0x6e>
 8005fde:	e01d      	b.n	800601c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa17 	bl	800641c <USBD_StdDevReq>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e020      	b.n	8006036 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa7b 	bl	80064f8 <USBD_StdItfReq>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
      break;
 8006006:	e016      	b.n	8006036 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fab7 	bl	8006584 <USBD_StdEPReq>
 8006016:	4603      	mov	r3, r0
 8006018:	73fb      	strb	r3, [r7, #15]
      break;
 800601a:	e00c      	b.n	8006036 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006026:	b2db      	uxtb	r3, r3
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fb6a 	bl	8007704 <USBD_LL_StallEP>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
      break;
 8006034:	bf00      	nop
  }

  return ret;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	460b      	mov	r3, r1
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d137      	bne.n	80060c4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800605a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006062:	2b03      	cmp	r3, #3
 8006064:	d14a      	bne.n	80060fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d913      	bls.n	800609a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4293      	cmp	r3, r2
 800608a:	bf28      	it	cs
 800608c:	4613      	movcs	r3, r2
 800608e:	461a      	mov	r2, r3
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 ffac 	bl	8006ff0 <USBD_CtlContinueRx>
 8006098:	e030      	b.n	80060fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d105      	bne.n	80060bc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 ffa8 	bl	8007012 <USBD_CtlSendStatus>
 80060c2:	e01b      	b.n	80060fc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d10e      	bne.n	80060f8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	7afa      	ldrb	r2, [r7, #11]
 80060e4:	4611      	mov	r1, r2
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	e002      	b.n	80060fe <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e000      	b.n	80060fe <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b086      	sub	sp, #24
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	460b      	mov	r3, r1
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006114:	7afb      	ldrb	r3, [r7, #11]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d16a      	bne.n	80061f0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3314      	adds	r3, #20
 800611e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006126:	2b02      	cmp	r3, #2
 8006128:	d155      	bne.n	80061d6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	429a      	cmp	r2, r3
 8006134:	d914      	bls.n	8006160 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	461a      	mov	r2, r3
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 ff21 	bl	8006f94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006152:	2300      	movs	r3, #0
 8006154:	2200      	movs	r2, #0
 8006156:	2100      	movs	r1, #0
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f001 fb7d 	bl	8007858 <USBD_LL_PrepareReceive>
 800615e:	e03a      	b.n	80061d6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	429a      	cmp	r2, r3
 800616a:	d11c      	bne.n	80061a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006174:	429a      	cmp	r2, r3
 8006176:	d316      	bcc.n	80061a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006182:	429a      	cmp	r2, r3
 8006184:	d20f      	bcs.n	80061a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 ff02 	bl	8006f94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 fb5a 	bl	8007858 <USBD_LL_PrepareReceive>
 80061a4:	e017      	b.n	80061d6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d105      	bne.n	80061c8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f001 fa9a 	bl	8007704 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 ff31 	bl	8007038 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d123      	bne.n	8006228 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff fe9b 	bl	8005f1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061ee:	e01b      	b.n	8006228 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006202:	2b03      	cmp	r3, #3
 8006204:	d10e      	bne.n	8006224 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	7afa      	ldrb	r2, [r7, #11]
 8006210:	4611      	mov	r1, r2
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	e002      	b.n	800622a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006224:	2303      	movs	r3, #3
 8006226:	e000      	b.n	800622a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6852      	ldr	r2, [r2, #4]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	4611      	mov	r1, r2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f9fc 	bl	800767a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	2200      	movs	r2, #0
 8006296:	2180      	movs	r1, #128	; 0x80
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f9ee 	bl	800767a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2240      	movs	r2, #64	; 0x40
 80062a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2204      	movs	r2, #4
 80062ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	2b04      	cmp	r3, #4
 800630e:	d105      	bne.n	800631c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006338:	2b03      	cmp	r3, #3
 800633a:	d10b      	bne.n	8006354 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	4611      	mov	r1, r2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
  }

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	3301      	adds	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063fe:	8a3b      	ldrh	r3, [r7, #16]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	b21a      	sxth	r2, r3
 8006404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800640e:	89fb      	ldrh	r3, [r7, #14]
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006432:	2b20      	cmp	r3, #32
 8006434:	d004      	beq.n	8006440 <USBD_StdDevReq+0x24>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d002      	beq.n	8006440 <USBD_StdDevReq+0x24>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <USBD_StdDevReq+0x38>
 800643e:	e050      	b.n	80064e2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
    break;
 8006452:	e04b      	b.n	80064ec <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b09      	cmp	r3, #9
 800645a:	d83c      	bhi.n	80064d6 <USBD_StdDevReq+0xba>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <USBD_StdDevReq+0x48>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	080064b9 	.word	0x080064b9
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064d7 	.word	0x080064d7
 8006470:	080064c3 	.word	0x080064c3
 8006474:	080064d7 	.word	0x080064d7
 8006478:	08006497 	.word	0x08006497
 800647c:	0800648d 	.word	0x0800648d
 8006480:	080064d7 	.word	0x080064d7
 8006484:	080064af 	.word	0x080064af
 8006488:	080064a1 	.word	0x080064a1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9ce 	bl	8006830 <USBD_GetDescriptor>
      break;
 8006494:	e024      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb33 	bl	8006b04 <USBD_SetAddress>
      break;
 800649e:	e01f      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb70 	bl	8006b88 <USBD_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	e018      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc0d 	bl	8006cd0 <USBD_GetConfig>
      break;
 80064b6:	e013      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc3c 	bl	8006d38 <USBD_GetStatus>
      break;
 80064c0:	e00e      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc6a 	bl	8006d9e <USBD_SetFeature>
      break;
 80064ca:	e009      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc79 	bl	8006dc6 <USBD_ClrFeature>
      break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fccf 	bl	8006e7c <USBD_CtlError>
      break;
 80064de:	bf00      	nop
    }
    break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fcc9 	bl	8006e7c <USBD_CtlError>
    break;
 80064ea:	bf00      	nop
  }

  return ret;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650e:	2b20      	cmp	r3, #32
 8006510:	d003      	beq.n	800651a <USBD_StdItfReq+0x22>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d001      	beq.n	800651a <USBD_StdItfReq+0x22>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d12a      	bne.n	8006570 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	3b01      	subs	r3, #1
 8006522:	2b02      	cmp	r3, #2
 8006524:	d81d      	bhi.n	8006562 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d813      	bhi.n	8006558 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	88db      	ldrh	r3, [r3, #6]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d110      	bne.n	800656c <USBD_StdItfReq+0x74>
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd5e 	bl	8007012 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006556:	e009      	b.n	800656c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fc8e 	bl	8006e7c <USBD_CtlError>
      break;
 8006560:	e004      	b.n	800656c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc89 	bl	8006e7c <USBD_CtlError>
      break;
 800656a:	e000      	b.n	800656e <USBD_StdItfReq+0x76>
      break;
 800656c:	bf00      	nop
    }
    break;
 800656e:	e004      	b.n	800657a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc82 	bl	8006e7c <USBD_CtlError>
    break;
 8006578:	bf00      	nop
  }

  return ret;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	889b      	ldrh	r3, [r3, #4]
 8006596:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d004      	beq.n	80065ae <USBD_StdEPReq+0x2a>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d002      	beq.n	80065ae <USBD_StdEPReq+0x2a>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <USBD_StdEPReq+0x3e>
 80065ac:	e135      	b.n	800681a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
    break;
 80065c0:	e130      	b.n	8006824 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d03e      	beq.n	8006648 <USBD_StdEPReq+0xc4>
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d002      	beq.n	80065d4 <USBD_StdEPReq+0x50>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d077      	beq.n	80066c2 <USBD_StdEPReq+0x13e>
 80065d2:	e11c      	b.n	800680e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d002      	beq.n	80065e4 <USBD_StdEPReq+0x60>
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d015      	beq.n	800660e <USBD_StdEPReq+0x8a>
 80065e2:	e02b      	b.n	800663c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00c      	beq.n	8006604 <USBD_StdEPReq+0x80>
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d009      	beq.n	8006604 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f885 	bl	8007704 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f881 	bl	8007704 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006602:	e020      	b.n	8006646 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fc38 	bl	8006e7c <USBD_CtlError>
        break;
 800660c:	e01b      	b.n	8006646 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	885b      	ldrh	r3, [r3, #2]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10e      	bne.n	8006634 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBD_StdEPReq+0xb0>
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d008      	beq.n	8006634 <USBD_StdEPReq+0xb0>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	88db      	ldrh	r3, [r3, #6]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 f868 	bl	8007704 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fcec 	bl	8007012 <USBD_CtlSendStatus>

        break;
 800663a:	e004      	b.n	8006646 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc1c 	bl	8006e7c <USBD_CtlError>
        break;
 8006644:	bf00      	nop
      }
      break;
 8006646:	e0e7      	b.n	8006818 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	2b02      	cmp	r3, #2
 8006650:	d002      	beq.n	8006658 <USBD_StdEPReq+0xd4>
 8006652:	2b03      	cmp	r3, #3
 8006654:	d015      	beq.n	8006682 <USBD_StdEPReq+0xfe>
 8006656:	e02d      	b.n	80066b4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <USBD_StdEPReq+0xf4>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d009      	beq.n	8006678 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f84b 	bl	8007704 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f847 	bl	8007704 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006676:	e023      	b.n	80066c0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fbfe 	bl	8006e7c <USBD_CtlError>
        break;
 8006680:	e01e      	b.n	80066c0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d119      	bne.n	80066be <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f852 	bl	8007742 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fcb7 	bl	8007012 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
        }
        break;
 80066b2:	e004      	b.n	80066be <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fbe0 	bl	8006e7c <USBD_CtlError>
        break;
 80066bc:	e000      	b.n	80066c0 <USBD_StdEPReq+0x13c>
        break;
 80066be:	bf00      	nop
      }
      break;
 80066c0:	e0aa      	b.n	8006818 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d002      	beq.n	80066d2 <USBD_StdEPReq+0x14e>
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d032      	beq.n	8006736 <USBD_StdEPReq+0x1b2>
 80066d0:	e097      	b.n	8006802 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <USBD_StdEPReq+0x164>
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d004      	beq.n	80066e8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fbcb 	bl	8006e7c <USBD_CtlError>
          break;
 80066e6:	e091      	b.n	800680c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da0b      	bge.n	8006708 <USBD_StdEPReq+0x184>
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	3310      	adds	r3, #16
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	e00b      	b.n	8006720 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	3304      	adds	r3, #4
 8006720:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2202      	movs	r2, #2
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fc15 	bl	8006f5e <USBD_CtlSendData>
        break;
 8006734:	e06a      	b.n	800680c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da11      	bge.n	8006762 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3324      	adds	r3, #36	; 0x24
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d117      	bne.n	8006788 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb8e 	bl	8006e7c <USBD_CtlError>
            break;
 8006760:	e054      	b.n	800680c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	440b      	add	r3, r1
 8006774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fb7b 	bl	8006e7c <USBD_CtlError>
            break;
 8006786:	e041      	b.n	800680c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	da0b      	bge.n	80067a8 <USBD_StdEPReq+0x224>
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	3310      	adds	r3, #16
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	3304      	adds	r3, #4
 80067a6:	e00b      	b.n	80067c0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	4413      	add	r3, r2
 80067be:	3304      	adds	r3, #4
 80067c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <USBD_StdEPReq+0x24a>
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d103      	bne.n	80067d6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e00e      	b.n	80067f4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ffd0 	bl	8007780 <USBD_LL_IsStallEP>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e002      	b.n	80067f4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2202      	movs	r2, #2
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fbaf 	bl	8006f5e <USBD_CtlSendData>
          break;
 8006800:	e004      	b.n	800680c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb39 	bl	8006e7c <USBD_CtlError>
        break;
 800680a:	bf00      	nop
      }
      break;
 800680c:	e004      	b.n	8006818 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb33 	bl	8006e7c <USBD_CtlError>
      break;
 8006816:	bf00      	nop
    }
    break;
 8006818:	e004      	b.n	8006824 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fb2d 	bl	8006e7c <USBD_CtlError>
    break;
 8006822:	bf00      	nop
  }

  return ret;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	885b      	ldrh	r3, [r3, #2]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	2b06      	cmp	r3, #6
 8006852:	f200 8128 	bhi.w	8006aa6 <USBD_GetDescriptor+0x276>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <USBD_GetDescriptor+0x2c>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006879 	.word	0x08006879
 8006860:	08006891 	.word	0x08006891
 8006864:	080068d1 	.word	0x080068d1
 8006868:	08006aa7 	.word	0x08006aa7
 800686c:	08006aa7 	.word	0x08006aa7
 8006870:	08006a47 	.word	0x08006a47
 8006874:	08006a73 	.word	0x08006a73
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 0108 	add.w	r1, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
    break;
 800688e:	e112      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7c1b      	ldrb	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10d      	bne.n	80068b4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f107 0208 	add.w	r2, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80068b2:	e100      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
    break;
 80068ce:	e0f2      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	f200 80ac 	bhi.w	8006a34 <USBD_GetDescriptor+0x204>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USBD_GetDescriptor+0xb4>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068fd 	.word	0x080068fd
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006999 	.word	0x08006999
 80068f4:	080069cd 	.word	0x080069cd
 80068f8:	08006a01 	.word	0x08006a01
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	7c12      	ldrb	r2, [r2, #16]
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	4610      	mov	r0, r2
 800691a:	4798      	blx	r3
 800691c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800691e:	e091      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 faaa 	bl	8006e7c <USBD_CtlError>
        err++;
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	3301      	adds	r3, #1
 800692c:	72fb      	strb	r3, [r7, #11]
      break;
 800692e:	e089      	b.n	8006a44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	7c12      	ldrb	r2, [r2, #16]
 8006948:	f107 0108 	add.w	r1, r7, #8
 800694c:	4610      	mov	r0, r2
 800694e:	4798      	blx	r3
 8006950:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006952:	e077      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa90 	bl	8006e7c <USBD_CtlError>
        err++;
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	3301      	adds	r3, #1
 8006960:	72fb      	strb	r3, [r7, #11]
      break;
 8006962:	e06f      	b.n	8006a44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	7c12      	ldrb	r2, [r2, #16]
 800697c:	f107 0108 	add.w	r1, r7, #8
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006986:	e05d      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa76 	bl	8006e7c <USBD_CtlError>
        err++;
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	3301      	adds	r3, #1
 8006994:	72fb      	strb	r3, [r7, #11]
      break;
 8006996:	e055      	b.n	8006a44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	7c12      	ldrb	r2, [r2, #16]
 80069b0:	f107 0108 	add.w	r1, r7, #8
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
 80069b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ba:	e043      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa5c 	bl	8006e7c <USBD_CtlError>
        err++;
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	3301      	adds	r3, #1
 80069c8:	72fb      	strb	r3, [r7, #11]
      break;
 80069ca:	e03b      	b.n	8006a44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	7c12      	ldrb	r2, [r2, #16]
 80069e4:	f107 0108 	add.w	r1, r7, #8
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
 80069ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ee:	e029      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa42 	bl	8006e7c <USBD_CtlError>
        err++;
 80069f8:	7afb      	ldrb	r3, [r7, #11]
 80069fa:	3301      	adds	r3, #1
 80069fc:	72fb      	strb	r3, [r7, #11]
      break;
 80069fe:	e021      	b.n	8006a44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	7c12      	ldrb	r2, [r2, #16]
 8006a18:	f107 0108 	add.w	r1, r7, #8
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a22:	e00f      	b.n	8006a44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa28 	bl	8006e7c <USBD_CtlError>
        err++;
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	72fb      	strb	r3, [r7, #11]
      break;
 8006a32:	e007      	b.n	8006a44 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa20 	bl	8006e7c <USBD_CtlError>
      err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a42:	bf00      	nop
    }
    break;
 8006a44:	e037      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7c1b      	ldrb	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	f107 0208 	add.w	r2, r7, #8
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4798      	blx	r3
 8006a5e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a60:	e029      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa09 	bl	8006e7c <USBD_CtlError>
      err++;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	72fb      	strb	r3, [r7, #11]
    break;
 8006a70:	e021      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7c1b      	ldrb	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10d      	bne.n	8006a96 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f107 0208 	add.w	r2, r7, #8
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
 8006a8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	2207      	movs	r2, #7
 8006a92:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a94:	e00f      	b.n	8006ab6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f9ef 	bl	8006e7c <USBD_CtlError>
      err++;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	72fb      	strb	r3, [r7, #11]
    break;
 8006aa4:	e007      	b.n	8006ab6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9e7 	bl	8006e7c <USBD_CtlError>
    err++;
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	72fb      	strb	r3, [r7, #11]
    break;
 8006ab4:	bf00      	nop
  }

  if (err != 0U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11e      	bne.n	8006afa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	88db      	ldrh	r3, [r3, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d016      	beq.n	8006af2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	88da      	ldrh	r2, [r3, #6]
 8006ace:	893b      	ldrh	r3, [r7, #8]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bf28      	it	cs
 8006ad4:	4613      	movcs	r3, r2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ada:	893b      	ldrh	r3, [r7, #8]
 8006adc:	461a      	mov	r2, r3
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fa3c 	bl	8006f5e <USBD_CtlSendData>
 8006ae6:	e009      	b.n	8006afc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f9c6 	bl	8006e7c <USBD_CtlError>
 8006af0:	e004      	b.n	8006afc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa8d 	bl	8007012 <USBD_CtlSendStatus>
 8006af8:	e000      	b.n	8006afc <USBD_GetDescriptor+0x2cc>
    return;
 8006afa:	bf00      	nop
    }
  }
}
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop

08006b04 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	889b      	ldrh	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d130      	bne.n	8006b78 <USBD_SetAddress+0x74>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d12c      	bne.n	8006b78 <USBD_SetAddress+0x74>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d828      	bhi.n	8006b78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d104      	bne.n	8006b46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f99c 	bl	8006e7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b44:	e01c      	b.n	8006b80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7bfa      	ldrb	r2, [r7, #15]
 8006b4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fe40 	bl	80077d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa5a 	bl	8007012 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6c:	e008      	b.n	8006b80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	e003      	b.n	8006b80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f97e 	bl	8006e7c <USBD_CtlError>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	4b4b      	ldr	r3, [pc, #300]	; (8006ccc <USBD_SetConfig+0x144>)
 8006b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ba0:	4b4a      	ldr	r3, [pc, #296]	; (8006ccc <USBD_SetConfig+0x144>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d905      	bls.n	8006bb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f966 	bl	8006e7c <USBD_CtlError>
    return USBD_FAIL;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e087      	b.n	8006cc4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d002      	beq.n	8006bc4 <USBD_SetConfig+0x3c>
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d025      	beq.n	8006c0e <USBD_SetConfig+0x86>
 8006bc2:	e071      	b.n	8006ca8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006bc4:	4b41      	ldr	r3, [pc, #260]	; (8006ccc <USBD_SetConfig+0x144>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01c      	beq.n	8006c06 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006bcc:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <USBD_SetConfig+0x144>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bd6:	4b3d      	ldr	r3, [pc, #244]	; (8006ccc <USBD_SetConfig+0x144>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff f9a8 	bl	8005f32 <USBD_SetClassConfig>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f944 	bl	8006e7c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006bf4:	e065      	b.n	8006cc2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa0b 	bl	8007012 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2203      	movs	r2, #3
 8006c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c04:	e05d      	b.n	8006cc2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa03 	bl	8007012 <USBD_CtlSendStatus>
    break;
 8006c0c:	e059      	b.n	8006cc2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006c0e:	4b2f      	ldr	r3, [pc, #188]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d112      	bne.n	8006c3c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006c1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c28:	4b28      	ldr	r3, [pc, #160]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff f99b 	bl	8005f6a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9ec 	bl	8007012 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c3a:	e042      	b.n	8006cc2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c3c:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d02a      	beq.n	8006ca0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f989 	bl	8005f6a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c58:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <USBD_SetConfig+0x144>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff f962 	bl	8005f32 <USBD_SetClassConfig>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00f      	beq.n	8006c98 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8fe 	bl	8006e7c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff f96e 	bl	8005f6a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c96:	e014      	b.n	8006cc2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9ba 	bl	8007012 <USBD_CtlSendStatus>
    break;
 8006c9e:	e010      	b.n	8006cc2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9b6 	bl	8007012 <USBD_CtlSendStatus>
    break;
 8006ca6:	e00c      	b.n	8006cc2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8e6 	bl	8006e7c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <USBD_SetConfig+0x144>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff f957 	bl	8005f6a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc0:	bf00      	nop
  }

  return ret;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200001f8 	.word	0x200001f8

08006cd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d004      	beq.n	8006cec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f8c9 	bl	8006e7c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006cea:	e021      	b.n	8006d30 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	db17      	blt.n	8006d26 <USBD_GetConfig+0x56>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	dd02      	ble.n	8006d00 <USBD_GetConfig+0x30>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d00b      	beq.n	8006d16 <USBD_GetConfig+0x46>
 8006cfe:	e012      	b.n	8006d26 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f925 	bl	8006f5e <USBD_CtlSendData>
      break;
 8006d14:	e00c      	b.n	8006d30 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f91d 	bl	8006f5e <USBD_CtlSendData>
      break;
 8006d24:	e004      	b.n	8006d30 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f8a7 	bl	8006e7c <USBD_CtlError>
      break;
 8006d2e:	bf00      	nop
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d81e      	bhi.n	8006d8c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d004      	beq.n	8006d60 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f88f 	bl	8006e7c <USBD_CtlError>
      break;
 8006d5e:	e01a      	b.n	8006d96 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f043 0202 	orr.w	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	2202      	movs	r2, #2
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f8ea 	bl	8006f5e <USBD_CtlSendData>
    break;
 8006d8a:	e004      	b.n	8006d96 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f874 	bl	8006e7c <USBD_CtlError>
    break;
 8006d94:	bf00      	nop
  }
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	885b      	ldrh	r3, [r3, #2]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d106      	bne.n	8006dbe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f92a 	bl	8007012 <USBD_CtlSendStatus>
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d80b      	bhi.n	8006df4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10c      	bne.n	8006dfe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f910 	bl	8007012 <USBD_CtlSendStatus>
      }
      break;
 8006df2:	e004      	b.n	8006dfe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f840 	bl	8006e7c <USBD_CtlError>
      break;
 8006dfc:	e000      	b.n	8006e00 <USBD_ClrFeature+0x3a>
      break;
 8006dfe:	bf00      	nop
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	781a      	ldrb	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fad4 	bl	80063e0 <SWAPBYTE>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f7ff fac7 	bl	80063e0 <SWAPBYTE>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff faba 	bl	80063e0 <SWAPBYTE>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	80da      	strh	r2, [r3, #6]
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc3b 	bl	8007704 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc37 	bl	8007704 <USBD_LL_StallEP>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d036      	beq.n	8006f22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006eb8:	6938      	ldr	r0, [r7, #16]
 8006eba:	f000 f836 	bl	8006f2a <USBD_GetLen>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	3301      	adds	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	3301      	adds	r3, #1
 8006eec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006eee:	e013      	b.n	8006f18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3301      	adds	r3, #1
 8006f00:	613b      	str	r3, [r7, #16]
    idx++;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	3301      	adds	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	3301      	adds	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e7      	bne.n	8006ef0 <USBD_GetString+0x52>
 8006f20:	e000      	b.n	8006f24 <USBD_GetString+0x86>
    return;
 8006f22:	bf00      	nop
  }
}
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f3a:	e005      	b.n	8006f48 <USBD_GetLen+0x1e>
  {
    len++;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f5      	bne.n	8006f3c <USBD_GetLen+0x12>
  }

  return len;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc46 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fc35 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fc39 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	2100      	movs	r1, #0
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fc28 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fbf4 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2205      	movs	r2, #5
 8007044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fc02 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007064:	2200      	movs	r2, #0
 8007066:	4912      	ldr	r1, [pc, #72]	; (80070b0 <MX_USB_DEVICE_Init+0x50>)
 8007068:	4812      	ldr	r0, [pc, #72]	; (80070b4 <MX_USB_DEVICE_Init+0x54>)
 800706a:	f7fe fef4 	bl	8005e56 <USBD_Init>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007074:	f7fa ff7e 	bl	8001f74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007078:	490f      	ldr	r1, [pc, #60]	; (80070b8 <MX_USB_DEVICE_Init+0x58>)
 800707a:	480e      	ldr	r0, [pc, #56]	; (80070b4 <MX_USB_DEVICE_Init+0x54>)
 800707c:	f7fe ff21 	bl	8005ec2 <USBD_RegisterClass>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007086:	f7fa ff75 	bl	8001f74 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800708a:	490c      	ldr	r1, [pc, #48]	; (80070bc <MX_USB_DEVICE_Init+0x5c>)
 800708c:	4809      	ldr	r0, [pc, #36]	; (80070b4 <MX_USB_DEVICE_Init+0x54>)
 800708e:	f7fe fecd 	bl	8005e2c <USBD_CUSTOM_HID_RegisterInterface>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007098:	f7fa ff6c 	bl	8001f74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800709c:	4805      	ldr	r0, [pc, #20]	; (80070b4 <MX_USB_DEVICE_Init+0x54>)
 800709e:	f7fe ff31 	bl	8005f04 <USBD_Start>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070a8:	f7fa ff64 	bl	8001f74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070ac:	bf00      	nop
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000120 	.word	0x20000120
 80070b4:	20000218 	.word	0x20000218
 80070b8:	2000000c 	.word	0x2000000c
 80070bc:	20000110 	.word	0x20000110

080070c0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80070d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	460a      	mov	r2, r1
 80070ea:	71fb      	strb	r3, [r7, #7]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80070f0:	4803      	ldr	r0, [pc, #12]	; (8007100 <CUSTOM_HID_OutEvent_FS+0x20>)
 80070f2:	f7fe fe53 	bl	8005d9c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80070f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20000218 	.word	0x20000218

08007104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2212      	movs	r2, #18
 8007114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	2000013c 	.word	0x2000013c

08007128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2204      	movs	r2, #4
 8007138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20000150 	.word	0x20000150

0800714c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d105      	bne.n	800716a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	4907      	ldr	r1, [pc, #28]	; (8007180 <USBD_FS_ProductStrDescriptor+0x34>)
 8007162:	4808      	ldr	r0, [pc, #32]	; (8007184 <USBD_FS_ProductStrDescriptor+0x38>)
 8007164:	f7ff fe9b 	bl	8006e9e <USBD_GetString>
 8007168:	e004      	b.n	8007174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4904      	ldr	r1, [pc, #16]	; (8007180 <USBD_FS_ProductStrDescriptor+0x34>)
 800716e:	4805      	ldr	r0, [pc, #20]	; (8007184 <USBD_FS_ProductStrDescriptor+0x38>)
 8007170:	f7ff fe95 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200004e8 	.word	0x200004e8
 8007184:	08007b04 	.word	0x08007b04

08007188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	4904      	ldr	r1, [pc, #16]	; (80071a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007198:	4804      	ldr	r0, [pc, #16]	; (80071ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800719a:	f7ff fe80 	bl	8006e9e <USBD_GetString>
  return USBD_StrDesc;
 800719e:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	200004e8 	.word	0x200004e8
 80071ac:	08007b24 	.word	0x08007b24

080071b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	221a      	movs	r2, #26
 80071c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071c2:	f000 f843 	bl	800724c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071c6:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000154 	.word	0x20000154

080071d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	4907      	ldr	r1, [pc, #28]	; (8007208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ea:	4808      	ldr	r0, [pc, #32]	; (800720c <USBD_FS_ConfigStrDescriptor+0x38>)
 80071ec:	f7ff fe57 	bl	8006e9e <USBD_GetString>
 80071f0:	e004      	b.n	80071fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	4904      	ldr	r1, [pc, #16]	; (8007208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071f6:	4805      	ldr	r0, [pc, #20]	; (800720c <USBD_FS_ConfigStrDescriptor+0x38>)
 80071f8:	f7ff fe51 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200004e8 	.word	0x200004e8
 800720c:	08007b38 	.word	0x08007b38

08007210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	6039      	str	r1, [r7, #0]
 800721a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d105      	bne.n	800722e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4907      	ldr	r1, [pc, #28]	; (8007244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007226:	4808      	ldr	r0, [pc, #32]	; (8007248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007228:	f7ff fe39 	bl	8006e9e <USBD_GetString>
 800722c:	e004      	b.n	8007238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	4904      	ldr	r1, [pc, #16]	; (8007244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007232:	4805      	ldr	r0, [pc, #20]	; (8007248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007234:	f7ff fe33 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200004e8 	.word	0x200004e8
 8007248:	08007b4c 	.word	0x08007b4c

0800724c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007252:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <Get_SerialNum+0x44>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007258:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <Get_SerialNum+0x48>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <Get_SerialNum+0x4c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007272:	2208      	movs	r2, #8
 8007274:	4909      	ldr	r1, [pc, #36]	; (800729c <Get_SerialNum+0x50>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f814 	bl	80072a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800727c:	2204      	movs	r2, #4
 800727e:	4908      	ldr	r1, [pc, #32]	; (80072a0 <Get_SerialNum+0x54>)
 8007280:	68b8      	ldr	r0, [r7, #8]
 8007282:	f000 f80f 	bl	80072a4 <IntToUnicode>
  }
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	1fff7a10 	.word	0x1fff7a10
 8007294:	1fff7a14 	.word	0x1fff7a14
 8007298:	1fff7a18 	.word	0x1fff7a18
 800729c:	20000156 	.word	0x20000156
 80072a0:	20000166 	.word	0x20000166

080072a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
 80072ba:	e027      	b.n	800730c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	2b09      	cmp	r3, #9
 80072c2:	d80b      	bhi.n	80072dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	0f1b      	lsrs	r3, r3, #28
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	4619      	mov	r1, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	440b      	add	r3, r1
 80072d4:	3230      	adds	r2, #48	; 0x30
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	e00a      	b.n	80072f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0f1b      	lsrs	r3, r3, #28
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4619      	mov	r1, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	440b      	add	r3, r1
 80072ec:	3237      	adds	r2, #55	; 0x37
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	3301      	adds	r3, #1
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4413      	add	r3, r2
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	3301      	adds	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
 800730c:	7dfa      	ldrb	r2, [r7, #23]
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	429a      	cmp	r2, r3
 8007312:	d3d3      	bcc.n	80072bc <IntToUnicode+0x18>
  }
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007340:	d13a      	bne.n	80073b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	4a1d      	ldr	r2, [pc, #116]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6313      	str	r3, [r2, #48]	; 0x30
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800735e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007364:	2302      	movs	r3, #2
 8007366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800736c:	2303      	movs	r3, #3
 800736e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007370:	230a      	movs	r3, #10
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4619      	mov	r1, r3
 800737a:	4812      	ldr	r0, [pc, #72]	; (80073c4 <HAL_PCD_MspInit+0xa4>)
 800737c:	f7fb f874 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007380:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007384:	4a0e      	ldr	r2, [pc, #56]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	6353      	str	r3, [r2, #52]	; 0x34
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007394:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 8007396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800739a:	6453      	str	r3, [r2, #68]	; 0x44
 800739c:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <HAL_PCD_MspInit+0xa0>)
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	2043      	movs	r0, #67	; 0x43
 80073ae:	f7fb f824 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073b2:	2043      	movs	r0, #67	; 0x43
 80073b4:	f7fb f83d 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073b8:	bf00      	nop
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40023800 	.word	0x40023800
 80073c4:	40020000 	.word	0x40020000

080073c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fe fddb 	bl	8005f9a <USBD_LL_SetupStage>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	4619      	mov	r1, r3
 8007416:	f7fe fe13 	bl	8006040 <USBD_LL_DataOutStage>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3348      	adds	r3, #72	; 0x48
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	4619      	mov	r1, r3
 800744a:	f7fe fe5c 	bl	8006106 <USBD_LL_DataInStage>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe ff60 	bl	800632a <USBD_LL_SOF>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d102      	bne.n	800748c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
 800748a:	e008      	b.n	800749e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d102      	bne.n	800749a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800749a:	f7fa fd6b 	bl	8001f74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe ff03 	bl	80062b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe febc 	bl	8006232 <USBD_LL_Reset>
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fefe 	bl	80062d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <HAL_PCD_SuspendCallback+0x48>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	4a03      	ldr	r2, [pc, #12]	; (800750c <HAL_PCD_SuspendCallback+0x48>)
 80074fe:	f043 0306 	orr.w	r3, r3, #6
 8007502:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe feed 	bl	80062fe <USBD_LL_Resume>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe ff18 	bl	8006378 <USBD_LL_IsoOUTIncomplete>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fef9 	bl	800635e <USBD_LL_IsoINIncomplete>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe ff05 	bl	8006392 <USBD_LL_DevConnected>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe ff02 	bl	80063a8 <USBD_LL_DevDisconnected>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d13c      	bne.n	8007636 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075bc:	4a20      	ldr	r2, [pc, #128]	; (8007640 <USBD_LL_Init+0x94>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <USBD_LL_Init+0x94>)
 80075c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075cc:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <USBD_LL_Init+0x94>)
 80075ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <USBD_LL_Init+0x94>)
 80075d6:	2204      	movs	r2, #4
 80075d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075da:	4b19      	ldr	r3, [pc, #100]	; (8007640 <USBD_LL_Init+0x94>)
 80075dc:	2202      	movs	r2, #2
 80075de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075e0:	4b17      	ldr	r3, [pc, #92]	; (8007640 <USBD_LL_Init+0x94>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <USBD_LL_Init+0x94>)
 80075e8:	2202      	movs	r2, #2
 80075ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <USBD_LL_Init+0x94>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <USBD_LL_Init+0x94>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <USBD_LL_Init+0x94>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <USBD_LL_Init+0x94>)
 8007600:	2200      	movs	r2, #0
 8007602:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <USBD_LL_Init+0x94>)
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <USBD_LL_Init+0x94>)
 800760c:	f7fb f8f7 	bl	80027fe <HAL_PCD_Init>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007616:	f7fa fcad 	bl	8001f74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	4808      	ldr	r0, [pc, #32]	; (8007640 <USBD_LL_Init+0x94>)
 800761e:	f7fc fa3c 	bl	8003a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007622:	2240      	movs	r2, #64	; 0x40
 8007624:	2100      	movs	r1, #0
 8007626:	4806      	ldr	r0, [pc, #24]	; (8007640 <USBD_LL_Init+0x94>)
 8007628:	f7fc f9f0 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800762c:	2280      	movs	r2, #128	; 0x80
 800762e:	2101      	movs	r1, #1
 8007630:	4803      	ldr	r0, [pc, #12]	; (8007640 <USBD_LL_Init+0x94>)
 8007632:	f7fc f9eb 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200006e8 	.word	0x200006e8

08007644 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fb f9ec 	bl	8002a38 <HAL_PCD_Start>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f918 	bl	800789c <USBD_Get_USB_Status>
 800766c:	4603      	mov	r3, r0
 800766e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007670:	7bbb      	ldrb	r3, [r7, #14]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	461a      	mov	r2, r3
 8007688:	4603      	mov	r3, r0
 800768a:	70fb      	strb	r3, [r7, #3]
 800768c:	460b      	mov	r3, r1
 800768e:	70bb      	strb	r3, [r7, #2]
 8007690:	4613      	mov	r3, r2
 8007692:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076a2:	78bb      	ldrb	r3, [r7, #2]
 80076a4:	883a      	ldrh	r2, [r7, #0]
 80076a6:	78f9      	ldrb	r1, [r7, #3]
 80076a8:	f7fb fdd0 	bl	800324c <HAL_PCD_EP_Open>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f8f2 	bl	800789c <USBD_Get_USB_Status>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fb fe19 	bl	800331c <HAL_PCD_EP_Close>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f8d3 	bl	800789c <USBD_Get_USB_Status>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f7fb fed9 	bl	80034da <HAL_PCD_EP_SetStall>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f8b4 	bl	800789c <USBD_Get_USB_Status>
 8007734:	4603      	mov	r3, r0
 8007736:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007738:	7bbb      	ldrb	r3, [r7, #14]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fb ff1e 	bl	80035a2 <HAL_PCD_EP_ClrStall>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f895 	bl	800789c <USBD_Get_USB_Status>
 8007772:	4603      	mov	r3, r0
 8007774:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007776:	7bbb      	ldrb	r3, [r7, #14]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007792:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da0b      	bge.n	80077b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	4613      	mov	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	333e      	adds	r3, #62	; 0x3e
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	e00b      	b.n	80077cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb fd03 	bl	8003202 <HAL_PCD_SetAddress>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f84a 	bl	800789c <USBD_Get_USB_Status>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800780c:	7bbb      	ldrb	r3, [r7, #14]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	460b      	mov	r3, r1
 8007824:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007834:	7af9      	ldrb	r1, [r7, #11]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	f7fb fe04 	bl	8003446 <HAL_PCD_EP_Transmit>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f829 	bl	800789c <USBD_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800784e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	460b      	mov	r3, r1
 8007866:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007876:	7af9      	ldrb	r1, [r7, #11]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	f7fb fd98 	bl	80033b0 <HAL_PCD_EP_Receive>
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f808 	bl	800789c <USBD_Get_USB_Status>
 800788c:	4603      	mov	r3, r0
 800788e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007890:	7dbb      	ldrb	r3, [r7, #22]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d817      	bhi.n	80078e0 <USBD_Get_USB_Status+0x44>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBD_Get_USB_Status+0x1c>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078cf 	.word	0x080078cf
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078db 	.word	0x080078db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
    break;
 80078cc:	e00b      	b.n	80078e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
    break;
 80078d2:	e008      	b.n	80078e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
    break;
 80078d8:	e005      	b.n	80078e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
    break;
 80078de:	e002      	b.n	80078e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	bf00      	nop
  }
  return usb_status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <__errno>:
 80078f4:	4b01      	ldr	r3, [pc, #4]	; (80078fc <__errno+0x8>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20000170 	.word	0x20000170

08007900 <__libc_init_array>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4e0d      	ldr	r6, [pc, #52]	; (8007938 <__libc_init_array+0x38>)
 8007904:	4c0d      	ldr	r4, [pc, #52]	; (800793c <__libc_init_array+0x3c>)
 8007906:	1ba4      	subs	r4, r4, r6
 8007908:	10a4      	asrs	r4, r4, #2
 800790a:	2500      	movs	r5, #0
 800790c:	42a5      	cmp	r5, r4
 800790e:	d109      	bne.n	8007924 <__libc_init_array+0x24>
 8007910:	4e0b      	ldr	r6, [pc, #44]	; (8007940 <__libc_init_array+0x40>)
 8007912:	4c0c      	ldr	r4, [pc, #48]	; (8007944 <__libc_init_array+0x44>)
 8007914:	f000 f8ea 	bl	8007aec <_init>
 8007918:	1ba4      	subs	r4, r4, r6
 800791a:	10a4      	asrs	r4, r4, #2
 800791c:	2500      	movs	r5, #0
 800791e:	42a5      	cmp	r5, r4
 8007920:	d105      	bne.n	800792e <__libc_init_array+0x2e>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007928:	4798      	blx	r3
 800792a:	3501      	adds	r5, #1
 800792c:	e7ee      	b.n	800790c <__libc_init_array+0xc>
 800792e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007932:	4798      	blx	r3
 8007934:	3501      	adds	r5, #1
 8007936:	e7f2      	b.n	800791e <__libc_init_array+0x1e>
 8007938:	08007bdc 	.word	0x08007bdc
 800793c:	08007bdc 	.word	0x08007bdc
 8007940:	08007bdc 	.word	0x08007bdc
 8007944:	08007be0 	.word	0x08007be0

08007948 <malloc>:
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <malloc+0xc>)
 800794a:	4601      	mov	r1, r0
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	f000 b861 	b.w	8007a14 <_malloc_r>
 8007952:	bf00      	nop
 8007954:	20000170 	.word	0x20000170

08007958 <free>:
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <free+0xc>)
 800795a:	4601      	mov	r1, r0
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	f000 b80b 	b.w	8007978 <_free_r>
 8007962:	bf00      	nop
 8007964:	20000170 	.word	0x20000170

08007968 <memset>:
 8007968:	4402      	add	r2, r0
 800796a:	4603      	mov	r3, r0
 800796c:	4293      	cmp	r3, r2
 800796e:	d100      	bne.n	8007972 <memset+0xa>
 8007970:	4770      	bx	lr
 8007972:	f803 1b01 	strb.w	r1, [r3], #1
 8007976:	e7f9      	b.n	800796c <memset+0x4>

08007978 <_free_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	d045      	beq.n	8007a0c <_free_r+0x94>
 8007980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007984:	1f0c      	subs	r4, r1, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb8      	it	lt
 800798a:	18e4      	addlt	r4, r4, r3
 800798c:	f000 f8ac 	bl	8007ae8 <__malloc_lock>
 8007990:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <_free_r+0x98>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	4610      	mov	r0, r2
 8007996:	b933      	cbnz	r3, 80079a6 <_free_r+0x2e>
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	6014      	str	r4, [r2, #0]
 800799c:	4628      	mov	r0, r5
 800799e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a2:	f000 b8a2 	b.w	8007aea <__malloc_unlock>
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	d90c      	bls.n	80079c4 <_free_r+0x4c>
 80079aa:	6821      	ldr	r1, [r4, #0]
 80079ac:	1862      	adds	r2, r4, r1
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bf04      	itt	eq
 80079b2:	681a      	ldreq	r2, [r3, #0]
 80079b4:	685b      	ldreq	r3, [r3, #4]
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	bf04      	itt	eq
 80079ba:	1852      	addeq	r2, r2, r1
 80079bc:	6022      	streq	r2, [r4, #0]
 80079be:	6004      	str	r4, [r0, #0]
 80079c0:	e7ec      	b.n	800799c <_free_r+0x24>
 80079c2:	4613      	mov	r3, r2
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	b10a      	cbz	r2, 80079cc <_free_r+0x54>
 80079c8:	42a2      	cmp	r2, r4
 80079ca:	d9fa      	bls.n	80079c2 <_free_r+0x4a>
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	1858      	adds	r0, r3, r1
 80079d0:	42a0      	cmp	r0, r4
 80079d2:	d10b      	bne.n	80079ec <_free_r+0x74>
 80079d4:	6820      	ldr	r0, [r4, #0]
 80079d6:	4401      	add	r1, r0
 80079d8:	1858      	adds	r0, r3, r1
 80079da:	4282      	cmp	r2, r0
 80079dc:	6019      	str	r1, [r3, #0]
 80079de:	d1dd      	bne.n	800799c <_free_r+0x24>
 80079e0:	6810      	ldr	r0, [r2, #0]
 80079e2:	6852      	ldr	r2, [r2, #4]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	4401      	add	r1, r0
 80079e8:	6019      	str	r1, [r3, #0]
 80079ea:	e7d7      	b.n	800799c <_free_r+0x24>
 80079ec:	d902      	bls.n	80079f4 <_free_r+0x7c>
 80079ee:	230c      	movs	r3, #12
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	e7d3      	b.n	800799c <_free_r+0x24>
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	1821      	adds	r1, r4, r0
 80079f8:	428a      	cmp	r2, r1
 80079fa:	bf04      	itt	eq
 80079fc:	6811      	ldreq	r1, [r2, #0]
 80079fe:	6852      	ldreq	r2, [r2, #4]
 8007a00:	6062      	str	r2, [r4, #4]
 8007a02:	bf04      	itt	eq
 8007a04:	1809      	addeq	r1, r1, r0
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	605c      	str	r4, [r3, #4]
 8007a0a:	e7c7      	b.n	800799c <_free_r+0x24>
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	200001fc 	.word	0x200001fc

08007a14 <_malloc_r>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	1ccd      	adds	r5, r1, #3
 8007a18:	f025 0503 	bic.w	r5, r5, #3
 8007a1c:	3508      	adds	r5, #8
 8007a1e:	2d0c      	cmp	r5, #12
 8007a20:	bf38      	it	cc
 8007a22:	250c      	movcc	r5, #12
 8007a24:	2d00      	cmp	r5, #0
 8007a26:	4606      	mov	r6, r0
 8007a28:	db01      	blt.n	8007a2e <_malloc_r+0x1a>
 8007a2a:	42a9      	cmp	r1, r5
 8007a2c:	d903      	bls.n	8007a36 <_malloc_r+0x22>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	2000      	movs	r0, #0
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	f000 f857 	bl	8007ae8 <__malloc_lock>
 8007a3a:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <_malloc_r+0xac>)
 8007a3c:	6814      	ldr	r4, [r2, #0]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	b991      	cbnz	r1, 8007a68 <_malloc_r+0x54>
 8007a42:	4c20      	ldr	r4, [pc, #128]	; (8007ac4 <_malloc_r+0xb0>)
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	b91b      	cbnz	r3, 8007a50 <_malloc_r+0x3c>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 f83d 	bl	8007ac8 <_sbrk_r>
 8007a4e:	6020      	str	r0, [r4, #0]
 8007a50:	4629      	mov	r1, r5
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 f838 	bl	8007ac8 <_sbrk_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d124      	bne.n	8007aa6 <_malloc_r+0x92>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	6033      	str	r3, [r6, #0]
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 f842 	bl	8007aea <__malloc_unlock>
 8007a66:	e7e4      	b.n	8007a32 <_malloc_r+0x1e>
 8007a68:	680b      	ldr	r3, [r1, #0]
 8007a6a:	1b5b      	subs	r3, r3, r5
 8007a6c:	d418      	bmi.n	8007aa0 <_malloc_r+0x8c>
 8007a6e:	2b0b      	cmp	r3, #11
 8007a70:	d90f      	bls.n	8007a92 <_malloc_r+0x7e>
 8007a72:	600b      	str	r3, [r1, #0]
 8007a74:	50cd      	str	r5, [r1, r3]
 8007a76:	18cc      	adds	r4, r1, r3
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f000 f836 	bl	8007aea <__malloc_unlock>
 8007a7e:	f104 000b 	add.w	r0, r4, #11
 8007a82:	1d23      	adds	r3, r4, #4
 8007a84:	f020 0007 	bic.w	r0, r0, #7
 8007a88:	1ac3      	subs	r3, r0, r3
 8007a8a:	d0d3      	beq.n	8007a34 <_malloc_r+0x20>
 8007a8c:	425a      	negs	r2, r3
 8007a8e:	50e2      	str	r2, [r4, r3]
 8007a90:	e7d0      	b.n	8007a34 <_malloc_r+0x20>
 8007a92:	428c      	cmp	r4, r1
 8007a94:	684b      	ldr	r3, [r1, #4]
 8007a96:	bf16      	itet	ne
 8007a98:	6063      	strne	r3, [r4, #4]
 8007a9a:	6013      	streq	r3, [r2, #0]
 8007a9c:	460c      	movne	r4, r1
 8007a9e:	e7eb      	b.n	8007a78 <_malloc_r+0x64>
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	6849      	ldr	r1, [r1, #4]
 8007aa4:	e7cc      	b.n	8007a40 <_malloc_r+0x2c>
 8007aa6:	1cc4      	adds	r4, r0, #3
 8007aa8:	f024 0403 	bic.w	r4, r4, #3
 8007aac:	42a0      	cmp	r0, r4
 8007aae:	d005      	beq.n	8007abc <_malloc_r+0xa8>
 8007ab0:	1a21      	subs	r1, r4, r0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 f808 	bl	8007ac8 <_sbrk_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d0cf      	beq.n	8007a5c <_malloc_r+0x48>
 8007abc:	6025      	str	r5, [r4, #0]
 8007abe:	e7db      	b.n	8007a78 <_malloc_r+0x64>
 8007ac0:	200001fc 	.word	0x200001fc
 8007ac4:	20000200 	.word	0x20000200

08007ac8 <_sbrk_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4c06      	ldr	r4, [pc, #24]	; (8007ae4 <_sbrk_r+0x1c>)
 8007acc:	2300      	movs	r3, #0
 8007ace:	4605      	mov	r5, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	f7fa fab6 	bl	8002044 <_sbrk>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_sbrk_r+0x1a>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_sbrk_r+0x1a>
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20000af0 	.word	0x20000af0

08007ae8 <__malloc_lock>:
 8007ae8:	4770      	bx	lr

08007aea <__malloc_unlock>:
 8007aea:	4770      	bx	lr

08007aec <_init>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr

08007af8 <_fini>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr
