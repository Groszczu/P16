
game_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800880c  0800880c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  200001a8  080089bc  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  080089bc  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137e3  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed4  00000000  00000000  000339bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d71  00000000  00000000  00037fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e13e  00000000  00000000  0005bd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4a11  00000000  00000000  00069e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e888  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  0012e904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008654 	.word	0x08008654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	08008654 	.word	0x08008654

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <KeypadScan>:
static void Line4ScanStart(char side);
static uint32_t Line4ScanDetection(char side);
static void Line4ScanOver(char side);

uint32_t KeypadScan(char side)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	switch(CurrentKeyState)
 800057a:	4b48      	ldr	r3, [pc, #288]	; (800069c <KeypadScan+0x12c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b0e      	cmp	r3, #14
 8000580:	f200 8086 	bhi.w	8000690 <KeypadScan+0x120>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <KeypadScan+0x1c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005c9 	.word	0x080005c9
 8000590:	080005d7 	.word	0x080005d7
 8000594:	080005e3 	.word	0x080005e3
 8000598:	080005f1 	.word	0x080005f1
 800059c:	080005ff 	.word	0x080005ff
 80005a0:	0800060b 	.word	0x0800060b
 80005a4:	08000619 	.word	0x08000619
 80005a8:	08000627 	.word	0x08000627
 80005ac:	08000633 	.word	0x08000633
 80005b0:	08000641 	.word	0x08000641
 80005b4:	0800064f 	.word	0x0800064f
 80005b8:	0800065b 	.word	0x0800065b
 80005bc:	08000669 	.word	0x08000669
 80005c0:	08000677 	.word	0x08000677
 80005c4:	08000683 	.word	0x08000683
	{
		case GND_START: ReValue = KEY_VALUE_NULL; GndScanStart(side); break;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fbce 	bl	8000d70 <GndScanStart>
 80005d4:	e05c      	b.n	8000690 <KeypadScan+0x120>
		case GND_DETECTION: ReValue = GndScanDetection(side); break;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fc47 	bl	8000e6c <GndScanDetection>
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	e056      	b.n	8000690 <KeypadScan+0x120>
		case GND_OVER: ReValue = KEY_VALUE_NULL; GndScanOver(side); break;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd43 	bl	8001074 <GndScanOver>
 80005ee:	e04f      	b.n	8000690 <KeypadScan+0x120>

		case LINE1_START: ReValue = KEY_VALUE_NULL; Line1ScanStart(side); break;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fdb6 	bl	8001168 <Line1ScanStart>
 80005fc:	e048      	b.n	8000690 <KeypadScan+0x120>
		case LINE1_DETECTION: ReValue = Line1ScanDetection(side); break;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe6b 	bl	80012dc <Line1ScanDetection>
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	e042      	b.n	8000690 <KeypadScan+0x120>
		case LINE1_OVER: ReValue = KEY_VALUE_NULL; Line1ScanOver(side); break;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ff27 	bl	8001464 <Line1ScanOver>
 8000616:	e03b      	b.n	8000690 <KeypadScan+0x120>
		
		case LINE2_START: ReValue = KEY_VALUE_NULL; Line2ScanStart(side); break;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ff86 	bl	8001530 <Line2ScanStart>
 8000624:	e034      	b.n	8000690 <KeypadScan+0x120>
		case LINE2_DETECTION: ReValue = Line2ScanDetection(side); break;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ffd7 	bl	80015dc <Line2ScanDetection>
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	e02e      	b.n	8000690 <KeypadScan+0x120>
		case LINE2_OVER: ReValue = KEY_VALUE_NULL; Line2ScanOver(side); break;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f869 	bl	8001710 <Line2ScanOver>
 800063e:	e027      	b.n	8000690 <KeypadScan+0x120>
		
		case LINE3_START: ReValue = KEY_VALUE_NULL; Line3ScanStart(side); break;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f8b4 	bl	80017b4 <Line3ScanStart>
 800064c:	e020      	b.n	8000690 <KeypadScan+0x120>
		case LINE3_DETECTION: ReValue = Line3ScanDetection(side); break;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f8f1 	bl	8001838 <Line3ScanDetection>
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	e01a      	b.n	8000690 <KeypadScan+0x120>
		case LINE3_OVER: ReValue = KEY_VALUE_NULL; Line3ScanOver(side); break;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f957 	bl	8001914 <Line3ScanOver>
 8000666:	e013      	b.n	8000690 <KeypadScan+0x120>

		case LINE4_START: ReValue = KEY_VALUE_NULL; Line4ScanStart(side); break;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f98e 	bl	8001990 <Line4ScanStart>
 8000674:	e00c      	b.n	8000690 <KeypadScan+0x120>
		case LINE4_DETECTION: ReValue = Line4ScanDetection(side); break;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f9b7 	bl	80019ec <Line4ScanDetection>
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	e006      	b.n	8000690 <KeypadScan+0x120>
		case LINE4_OVER: ReValue = KEY_VALUE_NULL; Line4ScanOver(side); break;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f9df 	bl	8001a4c <Line4ScanOver>
 800068e:	bf00      	nop
	}

	return ReValue;
 8000690:	68fb      	ldr	r3, [r7, #12]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001c4 	.word	0x200001c4

080006a0 <KeypadScanTest>:

void KeypadScanTest(char side)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	uint32_t TempKeyValue;

	TempKeyValue = KeypadScan(side);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5f 	bl	8000570 <KeypadScan>
 80006b2:	60f8      	str	r0, [r7, #12]

	if(TempKeyValue != 0)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d064      	beq.n	8000784 <KeypadScanTest+0xe4>
	{
		printf("KeyValue is : ");
 80006ba:	4834      	ldr	r0, [pc, #208]	; (800078c <KeypadScanTest+0xec>)
 80006bc:	f007 f92a 	bl	8007914 <iprintf>

		switch(TempKeyValue)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	2b0e      	cmp	r3, #14
 80006c6:	d85d      	bhi.n	8000784 <KeypadScanTest+0xe4>
 80006c8:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <KeypadScanTest+0x30>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	0800070d 	.word	0x0800070d
 80006d4:	08000715 	.word	0x08000715
 80006d8:	0800071d 	.word	0x0800071d
 80006dc:	08000725 	.word	0x08000725
 80006e0:	0800072d 	.word	0x0800072d
 80006e4:	08000735 	.word	0x08000735
 80006e8:	0800073d 	.word	0x0800073d
 80006ec:	08000745 	.word	0x08000745
 80006f0:	0800074d 	.word	0x0800074d
 80006f4:	08000755 	.word	0x08000755
 80006f8:	0800075d 	.word	0x0800075d
 80006fc:	08000765 	.word	0x08000765
 8000700:	0800076d 	.word	0x0800076d
 8000704:	08000775 	.word	0x08000775
 8000708:	0800077d 	.word	0x0800077d
		{
			case 1: printf("-Left.\r\n"); break;
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <KeypadScanTest+0xf0>)
 800070e:	f007 f975 	bl	80079fc <puts>
 8000712:	e037      	b.n	8000784 <KeypadScanTest+0xe4>
			case 2: printf("-Up.\r\n"); break;
 8000714:	481f      	ldr	r0, [pc, #124]	; (8000794 <KeypadScanTest+0xf4>)
 8000716:	f007 f971 	bl	80079fc <puts>
 800071a:	e033      	b.n	8000784 <KeypadScanTest+0xe4>
			case 3: printf("-Press.\r\n"); break;
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <KeypadScanTest+0xf8>)
 800071e:	f007 f96d 	bl	80079fc <puts>
 8000722:	e02f      	b.n	8000784 <KeypadScanTest+0xe4>
			case 4: printf("-Down.\r\n"); break;
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <KeypadScanTest+0xfc>)
 8000726:	f007 f969 	bl	80079fc <puts>
 800072a:	e02b      	b.n	8000784 <KeypadScanTest+0xe4>
			case 5: printf("-Right.\r\n"); break;
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <KeypadScanTest+0x100>)
 800072e:	f007 f965 	bl	80079fc <puts>
 8000732:	e027      	b.n	8000784 <KeypadScanTest+0xe4>
			case 6:	printf("-K1.\r\n"); break;
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <KeypadScanTest+0x104>)
 8000736:	f007 f961 	bl	80079fc <puts>
 800073a:	e023      	b.n	8000784 <KeypadScanTest+0xe4>
			case 7:	printf("-K2.\r\n"); break;
 800073c:	481a      	ldr	r0, [pc, #104]	; (80007a8 <KeypadScanTest+0x108>)
 800073e:	f007 f95d 	bl	80079fc <puts>
 8000742:	e01f      	b.n	8000784 <KeypadScanTest+0xe4>
			case 8:	printf("-K3.\r\n"); break;
 8000744:	4819      	ldr	r0, [pc, #100]	; (80007ac <KeypadScanTest+0x10c>)
 8000746:	f007 f959 	bl	80079fc <puts>
 800074a:	e01b      	b.n	8000784 <KeypadScanTest+0xe4>
			case 9:	printf("-K4.\r\n"); break;
 800074c:	4818      	ldr	r0, [pc, #96]	; (80007b0 <KeypadScanTest+0x110>)
 800074e:	f007 f955 	bl	80079fc <puts>
 8000752:	e017      	b.n	8000784 <KeypadScanTest+0xe4>
			case 10:	printf("-K5.\r\n"); break;
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <KeypadScanTest+0x114>)
 8000756:	f007 f951 	bl	80079fc <puts>
 800075a:	e013      	b.n	8000784 <KeypadScanTest+0xe4>
			case 11:	printf("-K6.\r\n"); break;
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <KeypadScanTest+0x118>)
 800075e:	f007 f94d 	bl	80079fc <puts>
 8000762:	e00f      	b.n	8000784 <KeypadScanTest+0xe4>
			case 12:	printf("-K7.\r\n"); break;				 
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <KeypadScanTest+0x11c>)
 8000766:	f007 f949 	bl	80079fc <puts>
 800076a:	e00b      	b.n	8000784 <KeypadScanTest+0xe4>
			case 13:	printf("-K8.\r\n"); break;
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <KeypadScanTest+0x120>)
 800076e:	f007 f945 	bl	80079fc <puts>
 8000772:	e007      	b.n	8000784 <KeypadScanTest+0xe4>
			case 14:	printf("-K9.\r\n"); break;
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <KeypadScanTest+0x124>)
 8000776:	f007 f941 	bl	80079fc <puts>
 800077a:	e003      	b.n	8000784 <KeypadScanTest+0xe4>
			case 15:	printf("-K10.\r\n"); break;
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <KeypadScanTest+0x128>)
 800077e:	f007 f93d 	bl	80079fc <puts>
 8000782:	bf00      	nop
		}
	}
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	0800866c 	.word	0x0800866c
 8000790:	0800867c 	.word	0x0800867c
 8000794:	08008684 	.word	0x08008684
 8000798:	0800868c 	.word	0x0800868c
 800079c:	08008698 	.word	0x08008698
 80007a0:	080086a0 	.word	0x080086a0
 80007a4:	080086ac 	.word	0x080086ac
 80007a8:	080086b4 	.word	0x080086b4
 80007ac:	080086bc 	.word	0x080086bc
 80007b0:	080086c4 	.word	0x080086c4
 80007b4:	080086cc 	.word	0x080086cc
 80007b8:	080086d4 	.word	0x080086d4
 80007bc:	080086dc 	.word	0x080086dc
 80007c0:	080086e4 	.word	0x080086e4
 80007c4:	080086ec 	.word	0x080086ec
 80007c8:	080086f4 	.word	0x080086f4

080007cc <ConfigurationGnd>:

static void ConfigurationGnd(char side)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <ConfigurationGnd+0xc0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2b      	ldr	r2, [pc, #172]	; (800088c <ConfigurationGnd+0xc0>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <ConfigurationGnd+0xc0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <ConfigurationGnd+0xc0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <ConfigurationGnd+0xc0>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <ConfigurationGnd+0xc0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b4c      	cmp	r3, #76	; 0x4c
 8000812:	d102      	bne.n	800081a <ConfigurationGnd+0x4e>
 8000814:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000818:	e000      	b.n	800081c <ConfigurationGnd+0x50>
 800081a:	2240      	movs	r2, #64	; 0x40
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b4c      	cmp	r3, #76	; 0x4c
 8000820:	d102      	bne.n	8000828 <ConfigurationGnd+0x5c>
 8000822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000826:	e000      	b.n	800082a <ConfigurationGnd+0x5e>
 8000828:	2308      	movs	r3, #8
 800082a:	4313      	orrs	r3, r2
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	2a4c      	cmp	r2, #76	; 0x4c
 8000830:	d102      	bne.n	8000838 <ConfigurationGnd+0x6c>
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	e000      	b.n	800083a <ConfigurationGnd+0x6e>
 8000838:	2204      	movs	r2, #4
 800083a:	4313      	orrs	r3, r2
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	2a4c      	cmp	r2, #76	; 0x4c
 8000840:	d102      	bne.n	8000848 <ConfigurationGnd+0x7c>
 8000842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000846:	e000      	b.n	800084a <ConfigurationGnd+0x7e>
 8000848:	2202      	movs	r2, #2
 800084a:	4313      	orrs	r3, r2
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	2a4c      	cmp	r2, #76	; 0x4c
 8000850:	d102      	bne.n	8000858 <ConfigurationGnd+0x8c>
 8000852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000856:	e000      	b.n	800085a <ConfigurationGnd+0x8e>
 8000858:	2201      	movs	r2, #1
 800085a:	4313      	orrs	r3, r2
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure); //GPIO_Init(IO_KEY_GPIO, &GPIO_InitStructure);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b4c      	cmp	r3, #76	; 0x4c
 800086e:	d101      	bne.n	8000874 <ConfigurationGnd+0xa8>
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <ConfigurationGnd+0xc4>)
 8000872:	e000      	b.n	8000876 <ConfigurationGnd+0xaa>
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <ConfigurationGnd+0xc8>)
 8000876:	f107 0214 	add.w	r2, r7, #20
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd19 	bl	80022b4 <HAL_GPIO_Init>
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40020c00 	.word	0x40020c00

08000898 <ConfigurationLine1>:

static void ConfigurationLine1(char side)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE(); //RCC_APB2PeriphClockCmd(RCC_KEY_GPIO, ENABLE);
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <ConfigurationLine1+0x100>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <ConfigurationLine1+0x100>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <ConfigurationLine1+0x100>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <ConfigurationLine1+0x100>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <ConfigurationLine1+0x100>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <ConfigurationLine1+0x100>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b4c      	cmp	r3, #76	; 0x4c
 80008de:	d102      	bne.n	80008e6 <ConfigurationLine1+0x4e>
 80008e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e4:	e000      	b.n	80008e8 <ConfigurationLine1+0x50>
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b4c      	cmp	r3, #76	; 0x4c
 80008f6:	d101      	bne.n	80008fc <ConfigurationLine1+0x64>
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <ConfigurationLine1+0x104>)
 80008fa:	e000      	b.n	80008fe <ConfigurationLine1+0x66>
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <ConfigurationLine1+0x108>)
 80008fe:	f107 0214 	add.w	r2, r7, #20
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fcd5 	bl	80022b4 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b4c      	cmp	r3, #76	; 0x4c
 800090e:	d102      	bne.n	8000916 <ConfigurationLine1+0x7e>
 8000910:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000914:	e000      	b.n	8000918 <ConfigurationLine1+0x80>
 8000916:	2208      	movs	r2, #8
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b4c      	cmp	r3, #76	; 0x4c
 800091c:	d102      	bne.n	8000924 <ConfigurationLine1+0x8c>
 800091e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000922:	e000      	b.n	8000926 <ConfigurationLine1+0x8e>
 8000924:	2304      	movs	r3, #4
 8000926:	4313      	orrs	r3, r2
 8000928:	79fa      	ldrb	r2, [r7, #7]
 800092a:	2a4c      	cmp	r2, #76	; 0x4c
 800092c:	d102      	bne.n	8000934 <ConfigurationLine1+0x9c>
 800092e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000932:	e000      	b.n	8000936 <ConfigurationLine1+0x9e>
 8000934:	2202      	movs	r2, #2
 8000936:	4313      	orrs	r3, r2
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	2a4c      	cmp	r2, #76	; 0x4c
 800093c:	d102      	bne.n	8000944 <ConfigurationLine1+0xac>
 800093e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000942:	e000      	b.n	8000946 <ConfigurationLine1+0xae>
 8000944:	2201      	movs	r2, #1
 8000946:	4313      	orrs	r3, r2
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b4c      	cmp	r3, #76	; 0x4c
 800095a:	d101      	bne.n	8000960 <ConfigurationLine1+0xc8>
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <ConfigurationLine1+0x104>)
 800095e:	e000      	b.n	8000962 <ConfigurationLine1+0xca>
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <ConfigurationLine1+0x108>)
 8000962:	f107 0214 	add.w	r2, r7, #20
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fca3 	bl	80022b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_SET); //GPIO_SetBits(IO_KEY_GPIO, IO_KEY_1);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b4c      	cmp	r3, #76	; 0x4c
 8000972:	d101      	bne.n	8000978 <ConfigurationLine1+0xe0>
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <ConfigurationLine1+0x104>)
 8000976:	e000      	b.n	800097a <ConfigurationLine1+0xe2>
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <ConfigurationLine1+0x108>)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b4c      	cmp	r3, #76	; 0x4c
 800097e:	d102      	bne.n	8000986 <ConfigurationLine1+0xee>
 8000980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000984:	e000      	b.n	8000988 <ConfigurationLine1+0xf0>
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	2201      	movs	r2, #1
 800098a:	4619      	mov	r1, r3
 800098c:	f001 fe44 	bl	8002618 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <ConfigurationLine2>:

static void ConfigurationLine2(char side)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE(); //RCC_APB2PeriphClockCmd(RCC_KEY_GPIO, ENABLE);
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a44      	ldr	r2, [pc, #272]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3e      	ldr	r3, [pc, #248]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <ConfigurationLine2+0x124>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b4c      	cmp	r3, #76	; 0x4c
 80009ea:	d102      	bne.n	80009f2 <ConfigurationLine2+0x4e>
 80009ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009f0:	e000      	b.n	80009f4 <ConfigurationLine2+0x50>
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b4c      	cmp	r3, #76	; 0x4c
 80009f8:	d102      	bne.n	8000a00 <ConfigurationLine2+0x5c>
 80009fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009fe:	e000      	b.n	8000a02 <ConfigurationLine2+0x5e>
 8000a00:	2308      	movs	r3, #8
 8000a02:	4313      	orrs	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b4c      	cmp	r3, #76	; 0x4c
 8000a12:	d101      	bne.n	8000a18 <ConfigurationLine2+0x74>
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <ConfigurationLine2+0x128>)
 8000a16:	e000      	b.n	8000a1a <ConfigurationLine2+0x76>
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <ConfigurationLine2+0x12c>)
 8000a1a:	f107 0214 	add.w	r2, r7, #20
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fc47 	bl	80022b4 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b4c      	cmp	r3, #76	; 0x4c
 8000a2a:	d102      	bne.n	8000a32 <ConfigurationLine2+0x8e>
 8000a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a30:	e000      	b.n	8000a34 <ConfigurationLine2+0x90>
 8000a32:	2204      	movs	r2, #4
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b4c      	cmp	r3, #76	; 0x4c
 8000a38:	d102      	bne.n	8000a40 <ConfigurationLine2+0x9c>
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	e000      	b.n	8000a42 <ConfigurationLine2+0x9e>
 8000a40:	2302      	movs	r3, #2
 8000a42:	4313      	orrs	r3, r2
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	2a4c      	cmp	r2, #76	; 0x4c
 8000a48:	d102      	bne.n	8000a50 <ConfigurationLine2+0xac>
 8000a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4e:	e000      	b.n	8000a52 <ConfigurationLine2+0xae>
 8000a50:	2201      	movs	r2, #1
 8000a52:	4313      	orrs	r3, r2
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b4c      	cmp	r3, #76	; 0x4c
 8000a66:	d101      	bne.n	8000a6c <ConfigurationLine2+0xc8>
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <ConfigurationLine2+0x128>)
 8000a6a:	e000      	b.n	8000a6e <ConfigurationLine2+0xca>
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <ConfigurationLine2+0x12c>)
 8000a6e:	f107 0214 	add.w	r2, r7, #20
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fc1d 	bl	80022b4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_2(side), GPIO_PIN_SET); 	//GPIO_SetBits(IO_KEY_GPIO, IO_KEY_2);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b4c      	cmp	r3, #76	; 0x4c
 8000a7e:	d101      	bne.n	8000a84 <ConfigurationLine2+0xe0>
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <ConfigurationLine2+0x128>)
 8000a82:	e000      	b.n	8000a86 <ConfigurationLine2+0xe2>
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <ConfigurationLine2+0x12c>)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b4c      	cmp	r3, #76	; 0x4c
 8000a8a:	d102      	bne.n	8000a92 <ConfigurationLine2+0xee>
 8000a8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a90:	e000      	b.n	8000a94 <ConfigurationLine2+0xf0>
 8000a92:	2308      	movs	r3, #8
 8000a94:	2201      	movs	r2, #1
 8000a96:	4619      	mov	r1, r3
 8000a98:	f001 fdbe 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_RESET); 	//GPIO_ResetBits(IO_KEY_GPIO, IO_KEY_1);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b4c      	cmp	r3, #76	; 0x4c
 8000aa0:	d101      	bne.n	8000aa6 <ConfigurationLine2+0x102>
 8000aa2:	480a      	ldr	r0, [pc, #40]	; (8000acc <ConfigurationLine2+0x128>)
 8000aa4:	e000      	b.n	8000aa8 <ConfigurationLine2+0x104>
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <ConfigurationLine2+0x12c>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b4c      	cmp	r3, #76	; 0x4c
 8000aac:	d102      	bne.n	8000ab4 <ConfigurationLine2+0x110>
 8000aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab2:	e000      	b.n	8000ab6 <ConfigurationLine2+0x112>
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f001 fdad 	bl	8002618 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <ConfigurationLine3>:

static void ConfigurationLine3(char side)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE(); //RCC_APB2PeriphClockCmd(RCC_KEY_GPIO, ENABLE);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <ConfigurationLine3+0x134>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a48      	ldr	r2, [pc, #288]	; (8000c08 <ConfigurationLine3+0x134>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <ConfigurationLine3+0x134>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <ConfigurationLine3+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a41      	ldr	r2, [pc, #260]	; (8000c08 <ConfigurationLine3+0x134>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <ConfigurationLine3+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b4c      	cmp	r3, #76	; 0x4c
 8000b1a:	d102      	bne.n	8000b22 <ConfigurationLine3+0x4e>
 8000b1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b20:	e000      	b.n	8000b24 <ConfigurationLine3+0x50>
 8000b22:	2240      	movs	r2, #64	; 0x40
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b4c      	cmp	r3, #76	; 0x4c
 8000b28:	d102      	bne.n	8000b30 <ConfigurationLine3+0x5c>
 8000b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2e:	e000      	b.n	8000b32 <ConfigurationLine3+0x5e>
 8000b30:	2308      	movs	r3, #8
 8000b32:	4313      	orrs	r3, r2
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	2a4c      	cmp	r2, #76	; 0x4c
 8000b38:	d102      	bne.n	8000b40 <ConfigurationLine3+0x6c>
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	e000      	b.n	8000b42 <ConfigurationLine3+0x6e>
 8000b40:	2204      	movs	r2, #4
 8000b42:	4313      	orrs	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b4c      	cmp	r3, #76	; 0x4c
 8000b52:	d101      	bne.n	8000b58 <ConfigurationLine3+0x84>
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <ConfigurationLine3+0x138>)
 8000b56:	e000      	b.n	8000b5a <ConfigurationLine3+0x86>
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <ConfigurationLine3+0x13c>)
 8000b5a:	f107 0214 	add.w	r2, r7, #20
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fba7 	bl	80022b4 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_4(side) | IO_KEY_5(side);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b4c      	cmp	r3, #76	; 0x4c
 8000b6a:	d102      	bne.n	8000b72 <ConfigurationLine3+0x9e>
 8000b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b70:	e000      	b.n	8000b74 <ConfigurationLine3+0xa0>
 8000b72:	2202      	movs	r2, #2
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b4c      	cmp	r3, #76	; 0x4c
 8000b78:	d102      	bne.n	8000b80 <ConfigurationLine3+0xac>
 8000b7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b7e:	e000      	b.n	8000b82 <ConfigurationLine3+0xae>
 8000b80:	2301      	movs	r3, #1
 8000b82:	4313      	orrs	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b4c      	cmp	r3, #76	; 0x4c
 8000b96:	d101      	bne.n	8000b9c <ConfigurationLine3+0xc8>
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <ConfigurationLine3+0x138>)
 8000b9a:	e000      	b.n	8000b9e <ConfigurationLine3+0xca>
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <ConfigurationLine3+0x13c>)
 8000b9e:	f107 0214 	add.w	r2, r7, #20
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fb85 	bl	80022b4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side), GPIO_PIN_RESET);	//GPIO_ResetBits(IO_KEY_GPIO, IO_KEY_1 | IO_KEY_2);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b4c      	cmp	r3, #76	; 0x4c
 8000bae:	d101      	bne.n	8000bb4 <ConfigurationLine3+0xe0>
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <ConfigurationLine3+0x138>)
 8000bb2:	e000      	b.n	8000bb6 <ConfigurationLine3+0xe2>
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <ConfigurationLine3+0x13c>)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b4c      	cmp	r3, #76	; 0x4c
 8000bba:	d101      	bne.n	8000bc0 <ConfigurationLine3+0xec>
 8000bbc:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <ConfigurationLine3+0x140>)
 8000bbe:	e000      	b.n	8000bc2 <ConfigurationLine3+0xee>
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b4c      	cmp	r3, #76	; 0x4c
 8000bc6:	d102      	bne.n	8000bce <ConfigurationLine3+0xfa>
 8000bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bcc:	e000      	b.n	8000bd0 <ConfigurationLine3+0xfc>
 8000bce:	2308      	movs	r3, #8
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f001 fd1d 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_3(side), GPIO_PIN_SET); 				//GPIO_SetBits(IO_KEY_GPIO, IO_KEY_3);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b4c      	cmp	r3, #76	; 0x4c
 8000be2:	d101      	bne.n	8000be8 <ConfigurationLine3+0x114>
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <ConfigurationLine3+0x138>)
 8000be6:	e000      	b.n	8000bea <ConfigurationLine3+0x116>
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <ConfigurationLine3+0x13c>)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b4c      	cmp	r3, #76	; 0x4c
 8000bee:	d102      	bne.n	8000bf6 <ConfigurationLine3+0x122>
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	e000      	b.n	8000bf8 <ConfigurationLine3+0x124>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f001 fd0c 	bl	8002618 <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	ffff8000 	.word	0xffff8000

08000c18 <ConfigurationLine4>:

static void ConfigurationLine4(char side)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE(); //RCC_APB2PeriphClockCmd(RCC_KEY_GPIO, ENABLE);
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a46      	ldr	r2, [pc, #280]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <ConfigurationLine4+0x148>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b4c      	cmp	r3, #76	; 0x4c
 8000c5e:	d102      	bne.n	8000c66 <ConfigurationLine4+0x4e>
 8000c60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c64:	e000      	b.n	8000c68 <ConfigurationLine4+0x50>
 8000c66:	2240      	movs	r2, #64	; 0x40
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b4c      	cmp	r3, #76	; 0x4c
 8000c6c:	d102      	bne.n	8000c74 <ConfigurationLine4+0x5c>
 8000c6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c72:	e000      	b.n	8000c76 <ConfigurationLine4+0x5e>
 8000c74:	2308      	movs	r3, #8
 8000c76:	4313      	orrs	r3, r2
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	2a4c      	cmp	r2, #76	; 0x4c
 8000c7c:	d102      	bne.n	8000c84 <ConfigurationLine4+0x6c>
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	e000      	b.n	8000c86 <ConfigurationLine4+0x6e>
 8000c84:	2204      	movs	r2, #4
 8000c86:	4313      	orrs	r3, r2
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	2a4c      	cmp	r2, #76	; 0x4c
 8000c8c:	d102      	bne.n	8000c94 <ConfigurationLine4+0x7c>
 8000c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c92:	e000      	b.n	8000c96 <ConfigurationLine4+0x7e>
 8000c94:	2202      	movs	r2, #2
 8000c96:	4313      	orrs	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ca6:	d101      	bne.n	8000cac <ConfigurationLine4+0x94>
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <ConfigurationLine4+0x14c>)
 8000caa:	e000      	b.n	8000cae <ConfigurationLine4+0x96>
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <ConfigurationLine4+0x150>)
 8000cae:	f107 0214 	add.w	r2, r7, #20
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fafd 	bl	80022b4 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_5(side);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b4c      	cmp	r3, #76	; 0x4c
 8000cbe:	d102      	bne.n	8000cc6 <ConfigurationLine4+0xae>
 8000cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc4:	e000      	b.n	8000cc8 <ConfigurationLine4+0xb0>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b4c      	cmp	r3, #76	; 0x4c
 8000cda:	d101      	bne.n	8000ce0 <ConfigurationLine4+0xc8>
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <ConfigurationLine4+0x14c>)
 8000cde:	e000      	b.n	8000ce2 <ConfigurationLine4+0xca>
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <ConfigurationLine4+0x150>)
 8000ce2:	f107 0214 	add.w	r2, r7, #20
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fae3 	bl	80022b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side), GPIO_PIN_RESET); 	//GPIO_ResetBits(IO_KEY_GPIO, IO_KEY_1 | IO_KEY_2 | IO_KEY_3);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b4c      	cmp	r3, #76	; 0x4c
 8000cf2:	d101      	bne.n	8000cf8 <ConfigurationLine4+0xe0>
 8000cf4:	481b      	ldr	r0, [pc, #108]	; (8000d64 <ConfigurationLine4+0x14c>)
 8000cf6:	e000      	b.n	8000cfa <ConfigurationLine4+0xe2>
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <ConfigurationLine4+0x150>)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b4c      	cmp	r3, #76	; 0x4c
 8000cfe:	d101      	bne.n	8000d04 <ConfigurationLine4+0xec>
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <ConfigurationLine4+0x154>)
 8000d02:	e000      	b.n	8000d06 <ConfigurationLine4+0xee>
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b4c      	cmp	r3, #76	; 0x4c
 8000d0a:	d102      	bne.n	8000d12 <ConfigurationLine4+0xfa>
 8000d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d10:	e000      	b.n	8000d14 <ConfigurationLine4+0xfc>
 8000d12:	2308      	movs	r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	2a4c      	cmp	r2, #76	; 0x4c
 8000d1c:	d102      	bne.n	8000d24 <ConfigurationLine4+0x10c>
 8000d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d22:	e000      	b.n	8000d26 <ConfigurationLine4+0x10e>
 8000d24:	2204      	movs	r2, #4
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f001 fc72 	bl	8002618 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_4(side), GPIO_PIN_SET); 							//GPIO_SetBits(IO_KEY_GPIO, IO_KEY_4);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b4c      	cmp	r3, #76	; 0x4c
 8000d38:	d101      	bne.n	8000d3e <ConfigurationLine4+0x126>
 8000d3a:	480a      	ldr	r0, [pc, #40]	; (8000d64 <ConfigurationLine4+0x14c>)
 8000d3c:	e000      	b.n	8000d40 <ConfigurationLine4+0x128>
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <ConfigurationLine4+0x150>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b4c      	cmp	r3, #76	; 0x4c
 8000d44:	d102      	bne.n	8000d4c <ConfigurationLine4+0x134>
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	e000      	b.n	8000d4e <ConfigurationLine4+0x136>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	f001 fc61 	bl	8002618 <HAL_GPIO_WritePin>

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40020c00 	.word	0x40020c00
 8000d6c:	ffff8000 	.word	0xffff8000

08000d70 <GndScanStart>:

static void GndScanStart(char side)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	ConfigurationGnd(side);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd25 	bl	80007cc <ConfigurationGnd>

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b4c      	cmp	r3, #76	; 0x4c
 8000d86:	d101      	bne.n	8000d8c <GndScanStart+0x1c>
 8000d88:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <GndScanStart+0xf0>)
 8000d8a:	e000      	b.n	8000d8e <GndScanStart+0x1e>
 8000d8c:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <GndScanStart+0xf4>)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b4c      	cmp	r3, #76	; 0x4c
 8000d92:	d102      	bne.n	8000d9a <GndScanStart+0x2a>
 8000d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d98:	e000      	b.n	8000d9c <GndScanStart+0x2c>
 8000d9a:	2340      	movs	r3, #64	; 0x40
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4610      	mov	r0, r2
 8000da0:	f001 fc22 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d04f      	beq.n	8000e4a <GndScanStart+0xda>
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b4c      	cmp	r3, #76	; 0x4c
 8000dae:	d101      	bne.n	8000db4 <GndScanStart+0x44>
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <GndScanStart+0xf0>)
 8000db2:	e000      	b.n	8000db6 <GndScanStart+0x46>
 8000db4:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <GndScanStart+0xf4>)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b4c      	cmp	r3, #76	; 0x4c
 8000dba:	d102      	bne.n	8000dc2 <GndScanStart+0x52>
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	e000      	b.n	8000dc4 <GndScanStart+0x54>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	f001 fc0e 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03b      	beq.n	8000e4a <GndScanStart+0xda>
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b4c      	cmp	r3, #76	; 0x4c
 8000dd6:	d101      	bne.n	8000ddc <GndScanStart+0x6c>
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <GndScanStart+0xf0>)
 8000dda:	e000      	b.n	8000dde <GndScanStart+0x6e>
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <GndScanStart+0xf4>)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b4c      	cmp	r3, #76	; 0x4c
 8000de2:	d102      	bne.n	8000dea <GndScanStart+0x7a>
 8000de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de8:	e000      	b.n	8000dec <GndScanStart+0x7c>
 8000dea:	2304      	movs	r3, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4610      	mov	r0, r2
 8000df0:	f001 fbfa 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d027      	beq.n	8000e4a <GndScanStart+0xda>
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b4c      	cmp	r3, #76	; 0x4c
 8000dfe:	d101      	bne.n	8000e04 <GndScanStart+0x94>
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <GndScanStart+0xf0>)
 8000e02:	e000      	b.n	8000e06 <GndScanStart+0x96>
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <GndScanStart+0xf4>)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b4c      	cmp	r3, #76	; 0x4c
 8000e0a:	d102      	bne.n	8000e12 <GndScanStart+0xa2>
 8000e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e10:	e000      	b.n	8000e14 <GndScanStart+0xa4>
 8000e12:	2302      	movs	r3, #2
 8000e14:	4619      	mov	r1, r3
 8000e16:	4610      	mov	r0, r2
 8000e18:	f001 fbe6 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d013      	beq.n	8000e4a <GndScanStart+0xda>
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b4c      	cmp	r3, #76	; 0x4c
 8000e26:	d101      	bne.n	8000e2c <GndScanStart+0xbc>
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <GndScanStart+0xf0>)
 8000e2a:	e000      	b.n	8000e2e <GndScanStart+0xbe>
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <GndScanStart+0xf4>)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b4c      	cmp	r3, #76	; 0x4c
 8000e32:	d102      	bne.n	8000e3a <GndScanStart+0xca>
 8000e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e38:	e000      	b.n	8000e3c <GndScanStart+0xcc>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f001 fbd2 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <GndScanStart+0xe2>
	{
		CurrentKeyState = GND_DETECTION;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <GndScanStart+0xf8>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e002      	b.n	8000e58 <GndScanStart+0xe8>
	}
	else
	{
		CurrentKeyState = LINE1_START;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <GndScanStart+0xf8>)
 8000e54:	2203      	movs	r2, #3
 8000e56:	701a      	strb	r2, [r3, #0]
	}
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	200001c4 	.word	0x200001c4

08000e6c <GndScanDetection>:

static uint32_t GndScanDetection(char side)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b4c      	cmp	r3, #76	; 0x4c
 8000e7a:	d101      	bne.n	8000e80 <GndScanDetection+0x14>
 8000e7c:	4a7a      	ldr	r2, [pc, #488]	; (8001068 <GndScanDetection+0x1fc>)
 8000e7e:	e000      	b.n	8000e82 <GndScanDetection+0x16>
 8000e80:	4a7a      	ldr	r2, [pc, #488]	; (800106c <GndScanDetection+0x200>)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b4c      	cmp	r3, #76	; 0x4c
 8000e86:	d102      	bne.n	8000e8e <GndScanDetection+0x22>
 8000e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e8c:	e000      	b.n	8000e90 <GndScanDetection+0x24>
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	4619      	mov	r1, r3
 8000e92:	4610      	mov	r0, r2
 8000e94:	f001 fba8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d050      	beq.n	8000f40 <GndScanDetection+0xd4>
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ea2:	d101      	bne.n	8000ea8 <GndScanDetection+0x3c>
 8000ea4:	4a70      	ldr	r2, [pc, #448]	; (8001068 <GndScanDetection+0x1fc>)
 8000ea6:	e000      	b.n	8000eaa <GndScanDetection+0x3e>
 8000ea8:	4a70      	ldr	r2, [pc, #448]	; (800106c <GndScanDetection+0x200>)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b4c      	cmp	r3, #76	; 0x4c
 8000eae:	d102      	bne.n	8000eb6 <GndScanDetection+0x4a>
 8000eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb4:	e000      	b.n	8000eb8 <GndScanDetection+0x4c>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f001 fb94 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03c      	beq.n	8000f40 <GndScanDetection+0xd4>
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b4c      	cmp	r3, #76	; 0x4c
 8000eca:	d101      	bne.n	8000ed0 <GndScanDetection+0x64>
 8000ecc:	4a66      	ldr	r2, [pc, #408]	; (8001068 <GndScanDetection+0x1fc>)
 8000ece:	e000      	b.n	8000ed2 <GndScanDetection+0x66>
 8000ed0:	4a66      	ldr	r2, [pc, #408]	; (800106c <GndScanDetection+0x200>)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ed6:	d102      	bne.n	8000ede <GndScanDetection+0x72>
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	e000      	b.n	8000ee0 <GndScanDetection+0x74>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f001 fb80 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d028      	beq.n	8000f40 <GndScanDetection+0xd4>
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ef2:	d101      	bne.n	8000ef8 <GndScanDetection+0x8c>
 8000ef4:	4a5c      	ldr	r2, [pc, #368]	; (8001068 <GndScanDetection+0x1fc>)
 8000ef6:	e000      	b.n	8000efa <GndScanDetection+0x8e>
 8000ef8:	4a5c      	ldr	r2, [pc, #368]	; (800106c <GndScanDetection+0x200>)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b4c      	cmp	r3, #76	; 0x4c
 8000efe:	d102      	bne.n	8000f06 <GndScanDetection+0x9a>
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	e000      	b.n	8000f08 <GndScanDetection+0x9c>
 8000f06:	2302      	movs	r3, #2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f001 fb6c 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d014      	beq.n	8000f40 <GndScanDetection+0xd4>
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b4c      	cmp	r3, #76	; 0x4c
 8000f1a:	d101      	bne.n	8000f20 <GndScanDetection+0xb4>
 8000f1c:	4a52      	ldr	r2, [pc, #328]	; (8001068 <GndScanDetection+0x1fc>)
 8000f1e:	e000      	b.n	8000f22 <GndScanDetection+0xb6>
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <GndScanDetection+0x200>)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b4c      	cmp	r3, #76	; 0x4c
 8000f26:	d102      	bne.n	8000f2e <GndScanDetection+0xc2>
 8000f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f2c:	e000      	b.n	8000f30 <GndScanDetection+0xc4>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f001 fb58 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 808a 	bne.w	8001054 <GndScanDetection+0x1e8>
	{
		if(GET_IO_KEY_1(side) == 0)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b4c      	cmp	r3, #76	; 0x4c
 8000f44:	d101      	bne.n	8000f4a <GndScanDetection+0xde>
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <GndScanDetection+0x1fc>)
 8000f48:	e000      	b.n	8000f4c <GndScanDetection+0xe0>
 8000f4a:	4a48      	ldr	r2, [pc, #288]	; (800106c <GndScanDetection+0x200>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b4c      	cmp	r3, #76	; 0x4c
 8000f50:	d102      	bne.n	8000f58 <GndScanDetection+0xec>
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	e000      	b.n	8000f5a <GndScanDetection+0xee>
 8000f58:	2340      	movs	r3, #64	; 0x40
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f001 fb43 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d107      	bne.n	8000f78 <GndScanDetection+0x10c>
		{
			ReValue = (side == 'L' ? KEY_VALUE_REVERSED_LEFT : KEY_VALUE_LEFT);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b4c      	cmp	r3, #76	; 0x4c
 8000f6c:	d101      	bne.n	8000f72 <GndScanDetection+0x106>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e000      	b.n	8000f74 <GndScanDetection+0x108>
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e069      	b.n	800104c <GndScanDetection+0x1e0>
		}
		else if((GET_IO_KEY_2(side) == 0))
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b4c      	cmp	r3, #76	; 0x4c
 8000f7c:	d101      	bne.n	8000f82 <GndScanDetection+0x116>
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <GndScanDetection+0x1fc>)
 8000f80:	e000      	b.n	8000f84 <GndScanDetection+0x118>
 8000f82:	4a3a      	ldr	r2, [pc, #232]	; (800106c <GndScanDetection+0x200>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b4c      	cmp	r3, #76	; 0x4c
 8000f88:	d102      	bne.n	8000f90 <GndScanDetection+0x124>
 8000f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f8e:	e000      	b.n	8000f92 <GndScanDetection+0x126>
 8000f90:	2308      	movs	r3, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	4610      	mov	r0, r2
 8000f96:	f001 fb27 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <GndScanDetection+0x144>
		{
			ReValue = (side == 'L' ? KEY_VALUE_REVERSED_UP : KEY_VALUE_UP);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b4c      	cmp	r3, #76	; 0x4c
 8000fa4:	d101      	bne.n	8000faa <GndScanDetection+0x13e>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e000      	b.n	8000fac <GndScanDetection+0x140>
 8000faa:	2302      	movs	r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e04d      	b.n	800104c <GndScanDetection+0x1e0>
		}
		else if((GET_IO_KEY_3(side) == 0))
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b4c      	cmp	r3, #76	; 0x4c
 8000fb4:	d101      	bne.n	8000fba <GndScanDetection+0x14e>
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <GndScanDetection+0x1fc>)
 8000fb8:	e000      	b.n	8000fbc <GndScanDetection+0x150>
 8000fba:	4a2c      	ldr	r2, [pc, #176]	; (800106c <GndScanDetection+0x200>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b4c      	cmp	r3, #76	; 0x4c
 8000fc0:	d102      	bne.n	8000fc8 <GndScanDetection+0x15c>
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	e000      	b.n	8000fca <GndScanDetection+0x15e>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4610      	mov	r0, r2
 8000fce:	f001 fb0b 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <GndScanDetection+0x172>
		{
			ReValue = KEY_VALUE_PRESS;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e036      	b.n	800104c <GndScanDetection+0x1e0>
		}
		else if((GET_IO_KEY_4(side) == 0))
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b4c      	cmp	r3, #76	; 0x4c
 8000fe2:	d101      	bne.n	8000fe8 <GndScanDetection+0x17c>
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <GndScanDetection+0x1fc>)
 8000fe6:	e000      	b.n	8000fea <GndScanDetection+0x17e>
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <GndScanDetection+0x200>)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b4c      	cmp	r3, #76	; 0x4c
 8000fee:	d102      	bne.n	8000ff6 <GndScanDetection+0x18a>
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	e000      	b.n	8000ff8 <GndScanDetection+0x18c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f001 faf4 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d107      	bne.n	8001016 <GndScanDetection+0x1aa>
		{
			ReValue = (side == 'L' ? KEY_VALUE_REVERSED_DOWN : KEY_VALUE_DOWN);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b4c      	cmp	r3, #76	; 0x4c
 800100a:	d101      	bne.n	8001010 <GndScanDetection+0x1a4>
 800100c:	2302      	movs	r3, #2
 800100e:	e000      	b.n	8001012 <GndScanDetection+0x1a6>
 8001010:	2304      	movs	r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e01a      	b.n	800104c <GndScanDetection+0x1e0>
		}
		else if((GET_IO_KEY_5(side) == 0))
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b4c      	cmp	r3, #76	; 0x4c
 800101a:	d101      	bne.n	8001020 <GndScanDetection+0x1b4>
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <GndScanDetection+0x1fc>)
 800101e:	e000      	b.n	8001022 <GndScanDetection+0x1b6>
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <GndScanDetection+0x200>)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b4c      	cmp	r3, #76	; 0x4c
 8001026:	d102      	bne.n	800102e <GndScanDetection+0x1c2>
 8001028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102c:	e000      	b.n	8001030 <GndScanDetection+0x1c4>
 800102e:	2301      	movs	r3, #1
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f001 fad8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <GndScanDetection+0x1e0>
		{
			ReValue = (side == 'L' ? KEY_VALUE_REVERSED_RIGHT : KEY_VALUE_RIGHT);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b4c      	cmp	r3, #76	; 0x4c
 8001042:	d101      	bne.n	8001048 <GndScanDetection+0x1dc>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <GndScanDetection+0x1de>
 8001048:	2305      	movs	r3, #5
 800104a:	60fb      	str	r3, [r7, #12]
		}	

		CurrentKeyState = GND_OVER;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <GndScanDetection+0x204>)
 800104e:	2202      	movs	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e004      	b.n	800105e <GndScanDetection+0x1f2>
	}
	else
	{
		CurrentKeyState = LINE1_START;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <GndScanDetection+0x204>)
 8001056:	2203      	movs	r2, #3
 8001058:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
	}

	return ReValue;
 800105e:	68fb      	ldr	r3, [r7, #12]
}	
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020400 	.word	0x40020400
 800106c:	40020c00 	.word	0x40020c00
 8001070:	200001c4 	.word	0x200001c4

08001074 <GndScanOver>:
	
static void GndScanOver(char side)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	if(((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0)))
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b4c      	cmp	r3, #76	; 0x4c
 8001082:	d101      	bne.n	8001088 <GndScanOver+0x14>
 8001084:	4a35      	ldr	r2, [pc, #212]	; (800115c <GndScanOver+0xe8>)
 8001086:	e000      	b.n	800108a <GndScanOver+0x16>
 8001088:	4a35      	ldr	r2, [pc, #212]	; (8001160 <GndScanOver+0xec>)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b4c      	cmp	r3, #76	; 0x4c
 800108e:	d102      	bne.n	8001096 <GndScanOver+0x22>
 8001090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001094:	e000      	b.n	8001098 <GndScanOver+0x24>
 8001096:	2340      	movs	r3, #64	; 0x40
 8001098:	4619      	mov	r1, r3
 800109a:	4610      	mov	r0, r2
 800109c:	f001 faa4 	bl	80025e8 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d04f      	beq.n	8001146 <GndScanOver+0xd2>
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b4c      	cmp	r3, #76	; 0x4c
 80010aa:	d101      	bne.n	80010b0 <GndScanOver+0x3c>
 80010ac:	4a2b      	ldr	r2, [pc, #172]	; (800115c <GndScanOver+0xe8>)
 80010ae:	e000      	b.n	80010b2 <GndScanOver+0x3e>
 80010b0:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <GndScanOver+0xec>)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b4c      	cmp	r3, #76	; 0x4c
 80010b6:	d102      	bne.n	80010be <GndScanOver+0x4a>
 80010b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010bc:	e000      	b.n	80010c0 <GndScanOver+0x4c>
 80010be:	2308      	movs	r3, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f001 fa90 	bl	80025e8 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d03b      	beq.n	8001146 <GndScanOver+0xd2>
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b4c      	cmp	r3, #76	; 0x4c
 80010d2:	d101      	bne.n	80010d8 <GndScanOver+0x64>
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <GndScanOver+0xe8>)
 80010d6:	e000      	b.n	80010da <GndScanOver+0x66>
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <GndScanOver+0xec>)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b4c      	cmp	r3, #76	; 0x4c
 80010de:	d102      	bne.n	80010e6 <GndScanOver+0x72>
 80010e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e4:	e000      	b.n	80010e8 <GndScanOver+0x74>
 80010e6:	2304      	movs	r3, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f001 fa7c 	bl	80025e8 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d027      	beq.n	8001146 <GndScanOver+0xd2>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b4c      	cmp	r3, #76	; 0x4c
 80010fa:	d101      	bne.n	8001100 <GndScanOver+0x8c>
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <GndScanOver+0xe8>)
 80010fe:	e000      	b.n	8001102 <GndScanOver+0x8e>
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <GndScanOver+0xec>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b4c      	cmp	r3, #76	; 0x4c
 8001106:	d102      	bne.n	800110e <GndScanOver+0x9a>
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	e000      	b.n	8001110 <GndScanOver+0x9c>
 800110e:	2302      	movs	r3, #2
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f001 fa68 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d013      	beq.n	8001146 <GndScanOver+0xd2>
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b4c      	cmp	r3, #76	; 0x4c
 8001122:	d101      	bne.n	8001128 <GndScanOver+0xb4>
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <GndScanOver+0xe8>)
 8001126:	e000      	b.n	800112a <GndScanOver+0xb6>
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <GndScanOver+0xec>)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b4c      	cmp	r3, #76	; 0x4c
 800112e:	d102      	bne.n	8001136 <GndScanOver+0xc2>
 8001130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001134:	e000      	b.n	8001138 <GndScanOver+0xc4>
 8001136:	2301      	movs	r3, #1
 8001138:	4619      	mov	r1, r3
 800113a:	4610      	mov	r0, r2
 800113c:	f001 fa54 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <GndScanOver+0xda>
	{
		CurrentKeyState = GND_OVER;	
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <GndScanOver+0xf0>)
 8001148:	2202      	movs	r2, #2
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <GndScanOver+0xe0>
	}
	else
	{
		CurrentKeyState = LINE1_START;
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <GndScanOver+0xf0>)
 8001150:	2203      	movs	r2, #3
 8001152:	701a      	strb	r2, [r3, #0]
	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020400 	.word	0x40020400
 8001160:	40020c00 	.word	0x40020c00
 8001164:	200001c4 	.word	0x200001c4

08001168 <Line1ScanStart>:
/* Scan line 1 */
static void Line1ScanStart(char side)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine1(side);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb8f 	bl	8000898 <ConfigurationLine1>

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b4c      	cmp	r3, #76	; 0x4c
 800117e:	d101      	bne.n	8001184 <Line1ScanStart+0x1c>
 8001180:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <Line1ScanStart+0x168>)
 8001182:	e000      	b.n	8001186 <Line1ScanStart+0x1e>
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <Line1ScanStart+0x16c>)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b4c      	cmp	r3, #76	; 0x4c
 800118a:	d102      	bne.n	8001192 <Line1ScanStart+0x2a>
 800118c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001190:	e000      	b.n	8001194 <Line1ScanStart+0x2c>
 8001192:	2308      	movs	r3, #8
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	f001 fa26 	bl	80025e8 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d03b      	beq.n	800121a <Line1ScanStart+0xb2>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b4c      	cmp	r3, #76	; 0x4c
 80011a6:	d101      	bne.n	80011ac <Line1ScanStart+0x44>
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <Line1ScanStart+0x168>)
 80011aa:	e000      	b.n	80011ae <Line1ScanStart+0x46>
 80011ac:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <Line1ScanStart+0x16c>)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b4c      	cmp	r3, #76	; 0x4c
 80011b2:	d102      	bne.n	80011ba <Line1ScanStart+0x52>
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	e000      	b.n	80011bc <Line1ScanStart+0x54>
 80011ba:	2304      	movs	r3, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f001 fa12 	bl	80025e8 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d027      	beq.n	800121a <Line1ScanStart+0xb2>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b4c      	cmp	r3, #76	; 0x4c
 80011ce:	d101      	bne.n	80011d4 <Line1ScanStart+0x6c>
 80011d0:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <Line1ScanStart+0x168>)
 80011d2:	e000      	b.n	80011d6 <Line1ScanStart+0x6e>
 80011d4:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <Line1ScanStart+0x16c>)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b4c      	cmp	r3, #76	; 0x4c
 80011da:	d102      	bne.n	80011e2 <Line1ScanStart+0x7a>
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	e000      	b.n	80011e4 <Line1ScanStart+0x7c>
 80011e2:	2302      	movs	r3, #2
 80011e4:	4619      	mov	r1, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f001 f9fe 	bl	80025e8 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d013      	beq.n	800121a <Line1ScanStart+0xb2>
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b4c      	cmp	r3, #76	; 0x4c
 80011f6:	d101      	bne.n	80011fc <Line1ScanStart+0x94>
 80011f8:	4a35      	ldr	r2, [pc, #212]	; (80012d0 <Line1ScanStart+0x168>)
 80011fa:	e000      	b.n	80011fe <Line1ScanStart+0x96>
 80011fc:	4a35      	ldr	r2, [pc, #212]	; (80012d4 <Line1ScanStart+0x16c>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b4c      	cmp	r3, #76	; 0x4c
 8001202:	d102      	bne.n	800120a <Line1ScanStart+0xa2>
 8001204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001208:	e000      	b.n	800120c <Line1ScanStart+0xa4>
 800120a:	2301      	movs	r3, #1
 800120c:	4619      	mov	r1, r3
 800120e:	4610      	mov	r0, r2
 8001210:	f001 f9ea 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d103      	bne.n	8001222 <Line1ScanStart+0xba>
	{
		CurrentKeyState = LINE1_DETECTION;	
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <Line1ScanStart+0x170>)
 800121c:	2204      	movs	r2, #4
 800121e:	701a      	strb	r2, [r3, #0]
	}
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
	{
		CurrentKeyState = LINE2_START;
	}		
}
 8001220:	e052      	b.n	80012c8 <Line1ScanStart+0x160>
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b4c      	cmp	r3, #76	; 0x4c
 8001226:	d101      	bne.n	800122c <Line1ScanStart+0xc4>
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <Line1ScanStart+0x168>)
 800122a:	e000      	b.n	800122e <Line1ScanStart+0xc6>
 800122c:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <Line1ScanStart+0x16c>)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b4c      	cmp	r3, #76	; 0x4c
 8001232:	d102      	bne.n	800123a <Line1ScanStart+0xd2>
 8001234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001238:	e000      	b.n	800123c <Line1ScanStart+0xd4>
 800123a:	2308      	movs	r3, #8
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f001 f9d2 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d03e      	beq.n	80012c8 <Line1ScanStart+0x160>
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b4c      	cmp	r3, #76	; 0x4c
 800124e:	d101      	bne.n	8001254 <Line1ScanStart+0xec>
 8001250:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <Line1ScanStart+0x168>)
 8001252:	e000      	b.n	8001256 <Line1ScanStart+0xee>
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <Line1ScanStart+0x16c>)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b4c      	cmp	r3, #76	; 0x4c
 800125a:	d102      	bne.n	8001262 <Line1ScanStart+0xfa>
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	e000      	b.n	8001264 <Line1ScanStart+0xfc>
 8001262:	2304      	movs	r3, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f001 f9be 	bl	80025e8 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d02a      	beq.n	80012c8 <Line1ScanStart+0x160>
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b4c      	cmp	r3, #76	; 0x4c
 8001276:	d101      	bne.n	800127c <Line1ScanStart+0x114>
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <Line1ScanStart+0x168>)
 800127a:	e000      	b.n	800127e <Line1ScanStart+0x116>
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <Line1ScanStart+0x16c>)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b4c      	cmp	r3, #76	; 0x4c
 8001282:	d102      	bne.n	800128a <Line1ScanStart+0x122>
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	e000      	b.n	800128c <Line1ScanStart+0x124>
 800128a:	2302      	movs	r3, #2
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f001 f9aa 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d016      	beq.n	80012c8 <Line1ScanStart+0x160>
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b4c      	cmp	r3, #76	; 0x4c
 800129e:	d101      	bne.n	80012a4 <Line1ScanStart+0x13c>
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <Line1ScanStart+0x168>)
 80012a2:	e000      	b.n	80012a6 <Line1ScanStart+0x13e>
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <Line1ScanStart+0x16c>)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b4c      	cmp	r3, #76	; 0x4c
 80012aa:	d102      	bne.n	80012b2 <Line1ScanStart+0x14a>
 80012ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b0:	e000      	b.n	80012b4 <Line1ScanStart+0x14c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f001 f996 	bl	80025e8 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d002      	beq.n	80012c8 <Line1ScanStart+0x160>
		CurrentKeyState = LINE2_START;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <Line1ScanStart+0x170>)
 80012c4:	2206      	movs	r2, #6
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	200001c4 	.word	0x200001c4

080012dc <Line1ScanDetection>:

static uint32_t Line1ScanDetection(char side)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b4c      	cmp	r3, #76	; 0x4c
 80012ea:	d101      	bne.n	80012f0 <Line1ScanDetection+0x14>
 80012ec:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <Line1ScanDetection+0x17c>)
 80012ee:	e000      	b.n	80012f2 <Line1ScanDetection+0x16>
 80012f0:	4a5a      	ldr	r2, [pc, #360]	; (800145c <Line1ScanDetection+0x180>)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b4c      	cmp	r3, #76	; 0x4c
 80012f6:	d102      	bne.n	80012fe <Line1ScanDetection+0x22>
 80012f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fc:	e000      	b.n	8001300 <Line1ScanDetection+0x24>
 80012fe:	2308      	movs	r3, #8
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f001 f970 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d03b      	beq.n	8001386 <Line1ScanDetection+0xaa>
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b4c      	cmp	r3, #76	; 0x4c
 8001312:	d101      	bne.n	8001318 <Line1ScanDetection+0x3c>
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <Line1ScanDetection+0x17c>)
 8001316:	e000      	b.n	800131a <Line1ScanDetection+0x3e>
 8001318:	4a50      	ldr	r2, [pc, #320]	; (800145c <Line1ScanDetection+0x180>)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b4c      	cmp	r3, #76	; 0x4c
 800131e:	d102      	bne.n	8001326 <Line1ScanDetection+0x4a>
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	e000      	b.n	8001328 <Line1ScanDetection+0x4c>
 8001326:	2304      	movs	r3, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f001 f95c 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d027      	beq.n	8001386 <Line1ScanDetection+0xaa>
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b4c      	cmp	r3, #76	; 0x4c
 800133a:	d101      	bne.n	8001340 <Line1ScanDetection+0x64>
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <Line1ScanDetection+0x17c>)
 800133e:	e000      	b.n	8001342 <Line1ScanDetection+0x66>
 8001340:	4a46      	ldr	r2, [pc, #280]	; (800145c <Line1ScanDetection+0x180>)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b4c      	cmp	r3, #76	; 0x4c
 8001346:	d102      	bne.n	800134e <Line1ScanDetection+0x72>
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	e000      	b.n	8001350 <Line1ScanDetection+0x74>
 800134e:	2302      	movs	r3, #2
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f001 f948 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d013      	beq.n	8001386 <Line1ScanDetection+0xaa>
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b4c      	cmp	r3, #76	; 0x4c
 8001362:	d101      	bne.n	8001368 <Line1ScanDetection+0x8c>
 8001364:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <Line1ScanDetection+0x17c>)
 8001366:	e000      	b.n	800136a <Line1ScanDetection+0x8e>
 8001368:	4a3c      	ldr	r2, [pc, #240]	; (800145c <Line1ScanDetection+0x180>)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b4c      	cmp	r3, #76	; 0x4c
 800136e:	d102      	bne.n	8001376 <Line1ScanDetection+0x9a>
 8001370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001374:	e000      	b.n	8001378 <Line1ScanDetection+0x9c>
 8001376:	2301      	movs	r3, #1
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f001 f934 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d15e      	bne.n	8001444 <Line1ScanDetection+0x168>
	{
		if(GET_IO_KEY_2(side) == 1)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b4c      	cmp	r3, #76	; 0x4c
 800138a:	d101      	bne.n	8001390 <Line1ScanDetection+0xb4>
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <Line1ScanDetection+0x17c>)
 800138e:	e000      	b.n	8001392 <Line1ScanDetection+0xb6>
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <Line1ScanDetection+0x180>)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b4c      	cmp	r3, #76	; 0x4c
 8001396:	d102      	bne.n	800139e <Line1ScanDetection+0xc2>
 8001398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139c:	e000      	b.n	80013a0 <Line1ScanDetection+0xc4>
 800139e:	2308      	movs	r3, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f001 f920 	bl	80025e8 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d102      	bne.n	80013b4 <Line1ScanDetection+0xd8>
		{
			ReValue = KEY_VALUE_ONE;	
 80013ae:	2306      	movs	r3, #6
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e043      	b.n	800143c <Line1ScanDetection+0x160>
		}
		else if(GET_IO_KEY_3(side) == 1)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b4c      	cmp	r3, #76	; 0x4c
 80013b8:	d101      	bne.n	80013be <Line1ScanDetection+0xe2>
 80013ba:	4a27      	ldr	r2, [pc, #156]	; (8001458 <Line1ScanDetection+0x17c>)
 80013bc:	e000      	b.n	80013c0 <Line1ScanDetection+0xe4>
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <Line1ScanDetection+0x180>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b4c      	cmp	r3, #76	; 0x4c
 80013c4:	d102      	bne.n	80013cc <Line1ScanDetection+0xf0>
 80013c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ca:	e000      	b.n	80013ce <Line1ScanDetection+0xf2>
 80013cc:	2304      	movs	r3, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f001 f909 	bl	80025e8 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <Line1ScanDetection+0x106>
		{
			ReValue = KEY_VALUE_TWO;
 80013dc:	2307      	movs	r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e02c      	b.n	800143c <Line1ScanDetection+0x160>
		}
		else if(GET_IO_KEY_4(side) == 1)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b4c      	cmp	r3, #76	; 0x4c
 80013e6:	d101      	bne.n	80013ec <Line1ScanDetection+0x110>
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <Line1ScanDetection+0x17c>)
 80013ea:	e000      	b.n	80013ee <Line1ScanDetection+0x112>
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <Line1ScanDetection+0x180>)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b4c      	cmp	r3, #76	; 0x4c
 80013f2:	d102      	bne.n	80013fa <Line1ScanDetection+0x11e>
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	e000      	b.n	80013fc <Line1ScanDetection+0x120>
 80013fa:	2302      	movs	r3, #2
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f001 f8f2 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d102      	bne.n	8001410 <Line1ScanDetection+0x134>
		{
			ReValue = KEY_VALUE_THREE;
 800140a:	2308      	movs	r3, #8
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e015      	b.n	800143c <Line1ScanDetection+0x160>
		}
		else if(GET_IO_KEY_5(side) == 1)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b4c      	cmp	r3, #76	; 0x4c
 8001414:	d101      	bne.n	800141a <Line1ScanDetection+0x13e>
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <Line1ScanDetection+0x17c>)
 8001418:	e000      	b.n	800141c <Line1ScanDetection+0x140>
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <Line1ScanDetection+0x180>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b4c      	cmp	r3, #76	; 0x4c
 8001420:	d102      	bne.n	8001428 <Line1ScanDetection+0x14c>
 8001422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001426:	e000      	b.n	800142a <Line1ScanDetection+0x14e>
 8001428:	2301      	movs	r3, #1
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f001 f8db 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <Line1ScanDetection+0x160>
		{
			ReValue = KEY_VALUE_FOUR;
 8001438:	2309      	movs	r3, #9
 800143a:	60fb      	str	r3, [r7, #12]
		}

		CurrentKeyState = LINE1_OVER;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <Line1ScanDetection+0x184>)
 800143e:	2205      	movs	r2, #5
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e004      	b.n	800144e <Line1ScanDetection+0x172>
	}
	else
	{
		CurrentKeyState = LINE2_START;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <Line1ScanDetection+0x184>)
 8001446:	2206      	movs	r2, #6
 8001448:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020400 	.word	0x40020400
 800145c:	40020c00 	.word	0x40020c00
 8001460:	200001c4 	.word	0x200001c4

08001464 <Line1ScanOver>:

static void Line1ScanOver(char side)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	if((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b4c      	cmp	r3, #76	; 0x4c
 8001472:	d101      	bne.n	8001478 <Line1ScanOver+0x14>
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <Line1ScanOver+0xc0>)
 8001476:	e000      	b.n	800147a <Line1ScanOver+0x16>
 8001478:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <Line1ScanOver+0xc4>)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b4c      	cmp	r3, #76	; 0x4c
 800147e:	d102      	bne.n	8001486 <Line1ScanOver+0x22>
 8001480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001484:	e000      	b.n	8001488 <Line1ScanOver+0x24>
 8001486:	2308      	movs	r3, #8
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f001 f8ac 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d03b      	beq.n	800150e <Line1ScanOver+0xaa>
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b4c      	cmp	r3, #76	; 0x4c
 800149a:	d101      	bne.n	80014a0 <Line1ScanOver+0x3c>
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <Line1ScanOver+0xc0>)
 800149e:	e000      	b.n	80014a2 <Line1ScanOver+0x3e>
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <Line1ScanOver+0xc4>)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b4c      	cmp	r3, #76	; 0x4c
 80014a6:	d102      	bne.n	80014ae <Line1ScanOver+0x4a>
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	e000      	b.n	80014b0 <Line1ScanOver+0x4c>
 80014ae:	2304      	movs	r3, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	f001 f898 	bl	80025e8 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d027      	beq.n	800150e <Line1ScanOver+0xaa>
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b4c      	cmp	r3, #76	; 0x4c
 80014c2:	d101      	bne.n	80014c8 <Line1ScanOver+0x64>
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <Line1ScanOver+0xc0>)
 80014c6:	e000      	b.n	80014ca <Line1ScanOver+0x66>
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <Line1ScanOver+0xc4>)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b4c      	cmp	r3, #76	; 0x4c
 80014ce:	d102      	bne.n	80014d6 <Line1ScanOver+0x72>
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	e000      	b.n	80014d8 <Line1ScanOver+0x74>
 80014d6:	2302      	movs	r3, #2
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f001 f884 	bl	80025e8 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d013      	beq.n	800150e <Line1ScanOver+0xaa>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b4c      	cmp	r3, #76	; 0x4c
 80014ea:	d101      	bne.n	80014f0 <Line1ScanOver+0x8c>
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <Line1ScanOver+0xc0>)
 80014ee:	e000      	b.n	80014f2 <Line1ScanOver+0x8e>
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <Line1ScanOver+0xc4>)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b4c      	cmp	r3, #76	; 0x4c
 80014f6:	d102      	bne.n	80014fe <Line1ScanOver+0x9a>
 80014f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fc:	e000      	b.n	8001500 <Line1ScanOver+0x9c>
 80014fe:	2301      	movs	r3, #1
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f001 f870 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d103      	bne.n	8001516 <Line1ScanOver+0xb2>
	{
		CurrentKeyState = LINE1_OVER;	
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <Line1ScanOver+0xc8>)
 8001510:	2205      	movs	r2, #5
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e002      	b.n	800151c <Line1ScanOver+0xb8>
	}
	else
	{
		CurrentKeyState = LINE2_START;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <Line1ScanOver+0xc8>)
 8001518:	2206      	movs	r2, #6
 800151a:	701a      	strb	r2, [r3, #0]
	}
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40020400 	.word	0x40020400
 8001528:	40020c00 	.word	0x40020c00
 800152c:	200001c4 	.word	0x200001c4

08001530 <Line2ScanStart>:
/* Scan line 2 */
static void Line2ScanStart(char side)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine2(side);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fa31 	bl	80009a4 <ConfigurationLine2>

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b4c      	cmp	r3, #76	; 0x4c
 8001546:	d101      	bne.n	800154c <Line2ScanStart+0x1c>
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <Line2ScanStart+0xa0>)
 800154a:	e000      	b.n	800154e <Line2ScanStart+0x1e>
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <Line2ScanStart+0xa4>)
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b4c      	cmp	r3, #76	; 0x4c
 8001552:	d102      	bne.n	800155a <Line2ScanStart+0x2a>
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	e000      	b.n	800155c <Line2ScanStart+0x2c>
 800155a:	2304      	movs	r3, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f001 f842 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d027      	beq.n	80015ba <Line2ScanStart+0x8a>
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b4c      	cmp	r3, #76	; 0x4c
 800156e:	d101      	bne.n	8001574 <Line2ScanStart+0x44>
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <Line2ScanStart+0xa0>)
 8001572:	e000      	b.n	8001576 <Line2ScanStart+0x46>
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <Line2ScanStart+0xa4>)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b4c      	cmp	r3, #76	; 0x4c
 800157a:	d102      	bne.n	8001582 <Line2ScanStart+0x52>
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	e000      	b.n	8001584 <Line2ScanStart+0x54>
 8001582:	2302      	movs	r3, #2
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f001 f82e 	bl	80025e8 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d013      	beq.n	80015ba <Line2ScanStart+0x8a>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b4c      	cmp	r3, #76	; 0x4c
 8001596:	d101      	bne.n	800159c <Line2ScanStart+0x6c>
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <Line2ScanStart+0xa0>)
 800159a:	e000      	b.n	800159e <Line2ScanStart+0x6e>
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <Line2ScanStart+0xa4>)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b4c      	cmp	r3, #76	; 0x4c
 80015a2:	d102      	bne.n	80015aa <Line2ScanStart+0x7a>
 80015a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a8:	e000      	b.n	80015ac <Line2ScanStart+0x7c>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f001 f81a 	bl	80025e8 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d103      	bne.n	80015c2 <Line2ScanStart+0x92>
	{
		CurrentKeyState = LINE2_DETECTION;	
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <Line2ScanStart+0xa8>)
 80015bc:	2207      	movs	r2, #7
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e002      	b.n	80015c8 <Line2ScanStart+0x98>
	}
	else
	{
		CurrentKeyState = LINE3_START;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Line2ScanStart+0xa8>)
 80015c4:	2209      	movs	r2, #9
 80015c6:	701a      	strb	r2, [r3, #0]
	}		
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	200001c4 	.word	0x200001c4

080015dc <Line2ScanDetection>:

static uint32_t Line2ScanDetection(char side)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b4c      	cmp	r3, #76	; 0x4c
 80015ea:	d101      	bne.n	80015f0 <Line2ScanDetection+0x14>
 80015ec:	4a45      	ldr	r2, [pc, #276]	; (8001704 <Line2ScanDetection+0x128>)
 80015ee:	e000      	b.n	80015f2 <Line2ScanDetection+0x16>
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <Line2ScanDetection+0x12c>)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b4c      	cmp	r3, #76	; 0x4c
 80015f6:	d102      	bne.n	80015fe <Line2ScanDetection+0x22>
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	e000      	b.n	8001600 <Line2ScanDetection+0x24>
 80015fe:	2304      	movs	r3, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f000 fff0 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d027      	beq.n	800165e <Line2ScanDetection+0x82>
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b4c      	cmp	r3, #76	; 0x4c
 8001612:	d101      	bne.n	8001618 <Line2ScanDetection+0x3c>
 8001614:	4a3b      	ldr	r2, [pc, #236]	; (8001704 <Line2ScanDetection+0x128>)
 8001616:	e000      	b.n	800161a <Line2ScanDetection+0x3e>
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <Line2ScanDetection+0x12c>)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b4c      	cmp	r3, #76	; 0x4c
 800161e:	d102      	bne.n	8001626 <Line2ScanDetection+0x4a>
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	e000      	b.n	8001628 <Line2ScanDetection+0x4c>
 8001626:	2302      	movs	r3, #2
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f000 ffdc 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d013      	beq.n	800165e <Line2ScanDetection+0x82>
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b4c      	cmp	r3, #76	; 0x4c
 800163a:	d101      	bne.n	8001640 <Line2ScanDetection+0x64>
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <Line2ScanDetection+0x128>)
 800163e:	e000      	b.n	8001642 <Line2ScanDetection+0x66>
 8001640:	4a31      	ldr	r2, [pc, #196]	; (8001708 <Line2ScanDetection+0x12c>)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b4c      	cmp	r3, #76	; 0x4c
 8001646:	d102      	bne.n	800164e <Line2ScanDetection+0x72>
 8001648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164c:	e000      	b.n	8001650 <Line2ScanDetection+0x74>
 800164e:	2301      	movs	r3, #1
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f000 ffc8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d147      	bne.n	80016ee <Line2ScanDetection+0x112>
	{
		if(GET_IO_KEY_3(side) == 1)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b4c      	cmp	r3, #76	; 0x4c
 8001662:	d101      	bne.n	8001668 <Line2ScanDetection+0x8c>
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <Line2ScanDetection+0x128>)
 8001666:	e000      	b.n	800166a <Line2ScanDetection+0x8e>
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <Line2ScanDetection+0x12c>)
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b4c      	cmp	r3, #76	; 0x4c
 800166e:	d102      	bne.n	8001676 <Line2ScanDetection+0x9a>
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	e000      	b.n	8001678 <Line2ScanDetection+0x9c>
 8001676:	2304      	movs	r3, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 ffb4 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <Line2ScanDetection+0xb0>
		{
			ReValue = KEY_VALUE_FIVE;	
 8001686:	230a      	movs	r3, #10
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e02c      	b.n	80016e6 <Line2ScanDetection+0x10a>
		}
		else if(GET_IO_KEY_4(side) == 1)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b4c      	cmp	r3, #76	; 0x4c
 8001690:	d101      	bne.n	8001696 <Line2ScanDetection+0xba>
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <Line2ScanDetection+0x128>)
 8001694:	e000      	b.n	8001698 <Line2ScanDetection+0xbc>
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <Line2ScanDetection+0x12c>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b4c      	cmp	r3, #76	; 0x4c
 800169c:	d102      	bne.n	80016a4 <Line2ScanDetection+0xc8>
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	e000      	b.n	80016a6 <Line2ScanDetection+0xca>
 80016a4:	2302      	movs	r3, #2
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f000 ff9d 	bl	80025e8 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <Line2ScanDetection+0xde>
		{
			ReValue = KEY_VALUE_SIX;
 80016b4:	230b      	movs	r3, #11
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e015      	b.n	80016e6 <Line2ScanDetection+0x10a>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b4c      	cmp	r3, #76	; 0x4c
 80016be:	d101      	bne.n	80016c4 <Line2ScanDetection+0xe8>
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <Line2ScanDetection+0x128>)
 80016c2:	e000      	b.n	80016c6 <Line2ScanDetection+0xea>
 80016c4:	4a10      	ldr	r2, [pc, #64]	; (8001708 <Line2ScanDetection+0x12c>)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b4c      	cmp	r3, #76	; 0x4c
 80016ca:	d102      	bne.n	80016d2 <Line2ScanDetection+0xf6>
 80016cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d0:	e000      	b.n	80016d4 <Line2ScanDetection+0xf8>
 80016d2:	2301      	movs	r3, #1
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f000 ff86 	bl	80025e8 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <Line2ScanDetection+0x10a>
		{
			ReValue = KEY_VALUE_SEVEN;
 80016e2:	230c      	movs	r3, #12
 80016e4:	60fb      	str	r3, [r7, #12]
		}

		CurrentKeyState = LINE2_OVER;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <Line2ScanDetection+0x130>)
 80016e8:	2208      	movs	r2, #8
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e004      	b.n	80016f8 <Line2ScanDetection+0x11c>
	}
	else
	{
		CurrentKeyState = LINE3_START;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <Line2ScanDetection+0x130>)
 80016f0:	2209      	movs	r2, #9
 80016f2:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020400 	.word	0x40020400
 8001708:	40020c00 	.word	0x40020c00
 800170c:	200001c4 	.word	0x200001c4

08001710 <Line2ScanOver>:

static void Line2ScanOver(char side)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b4c      	cmp	r3, #76	; 0x4c
 800171e:	d101      	bne.n	8001724 <Line2ScanOver+0x14>
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <Line2ScanOver+0x98>)
 8001722:	e000      	b.n	8001726 <Line2ScanOver+0x16>
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <Line2ScanOver+0x9c>)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b4c      	cmp	r3, #76	; 0x4c
 800172a:	d102      	bne.n	8001732 <Line2ScanOver+0x22>
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	e000      	b.n	8001734 <Line2ScanOver+0x24>
 8001732:	2304      	movs	r3, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f000 ff56 	bl	80025e8 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d027      	beq.n	8001792 <Line2ScanOver+0x82>
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b4c      	cmp	r3, #76	; 0x4c
 8001746:	d101      	bne.n	800174c <Line2ScanOver+0x3c>
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <Line2ScanOver+0x98>)
 800174a:	e000      	b.n	800174e <Line2ScanOver+0x3e>
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <Line2ScanOver+0x9c>)
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b4c      	cmp	r3, #76	; 0x4c
 8001752:	d102      	bne.n	800175a <Line2ScanOver+0x4a>
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	e000      	b.n	800175c <Line2ScanOver+0x4c>
 800175a:	2302      	movs	r3, #2
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f000 ff42 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d013      	beq.n	8001792 <Line2ScanOver+0x82>
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b4c      	cmp	r3, #76	; 0x4c
 800176e:	d101      	bne.n	8001774 <Line2ScanOver+0x64>
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <Line2ScanOver+0x98>)
 8001772:	e000      	b.n	8001776 <Line2ScanOver+0x66>
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <Line2ScanOver+0x9c>)
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b4c      	cmp	r3, #76	; 0x4c
 800177a:	d102      	bne.n	8001782 <Line2ScanOver+0x72>
 800177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001780:	e000      	b.n	8001784 <Line2ScanOver+0x74>
 8001782:	2301      	movs	r3, #1
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 ff2e 	bl	80025e8 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d103      	bne.n	800179a <Line2ScanOver+0x8a>
	{
		CurrentKeyState = LINE2_OVER;	
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <Line2ScanOver+0xa0>)
 8001794:	2208      	movs	r2, #8
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e002      	b.n	80017a0 <Line2ScanOver+0x90>
	}
	else
	{
		CurrentKeyState = LINE3_START;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <Line2ScanOver+0xa0>)
 800179c:	2209      	movs	r2, #9
 800179e:	701a      	strb	r2, [r3, #0]
	}
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	200001c4 	.word	0x200001c4

080017b4 <Line3ScanStart>:
/* Scan line 3 */
static void Line3ScanStart(char side)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine3(side);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f987 	bl	8000ad4 <ConfigurationLine3>

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b4c      	cmp	r3, #76	; 0x4c
 80017ca:	d101      	bne.n	80017d0 <Line3ScanStart+0x1c>
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <Line3ScanStart+0x78>)
 80017ce:	e000      	b.n	80017d2 <Line3ScanStart+0x1e>
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <Line3ScanStart+0x7c>)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b4c      	cmp	r3, #76	; 0x4c
 80017d6:	d102      	bne.n	80017de <Line3ScanStart+0x2a>
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	e000      	b.n	80017e0 <Line3ScanStart+0x2c>
 80017de:	2302      	movs	r3, #2
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f000 ff00 	bl	80025e8 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d013      	beq.n	8001816 <Line3ScanStart+0x62>
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b4c      	cmp	r3, #76	; 0x4c
 80017f2:	d101      	bne.n	80017f8 <Line3ScanStart+0x44>
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <Line3ScanStart+0x78>)
 80017f6:	e000      	b.n	80017fa <Line3ScanStart+0x46>
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <Line3ScanStart+0x7c>)
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b4c      	cmp	r3, #76	; 0x4c
 80017fe:	d102      	bne.n	8001806 <Line3ScanStart+0x52>
 8001800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001804:	e000      	b.n	8001808 <Line3ScanStart+0x54>
 8001806:	2301      	movs	r3, #1
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 feec 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	d103      	bne.n	800181e <Line3ScanStart+0x6a>
	{
		CurrentKeyState = LINE3_DETECTION;	
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <Line3ScanStart+0x80>)
 8001818:	220a      	movs	r2, #10
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e002      	b.n	8001824 <Line3ScanStart+0x70>
	}
	else
	{
		CurrentKeyState = LINE4_START;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <Line3ScanStart+0x80>)
 8001820:	220c      	movs	r2, #12
 8001822:	701a      	strb	r2, [r3, #0]
	}		
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40020400 	.word	0x40020400
 8001830:	40020c00 	.word	0x40020c00
 8001834:	200001c4 	.word	0x200001c4

08001838 <Line3ScanDetection>:

static uint32_t Line3ScanDetection(char side)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b4c      	cmp	r3, #76	; 0x4c
 8001846:	d101      	bne.n	800184c <Line3ScanDetection+0x14>
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <Line3ScanDetection+0xd0>)
 800184a:	e000      	b.n	800184e <Line3ScanDetection+0x16>
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <Line3ScanDetection+0xd4>)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b4c      	cmp	r3, #76	; 0x4c
 8001852:	d102      	bne.n	800185a <Line3ScanDetection+0x22>
 8001854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001858:	e000      	b.n	800185c <Line3ScanDetection+0x24>
 800185a:	2302      	movs	r3, #2
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f000 fec2 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	d013      	beq.n	8001892 <Line3ScanDetection+0x5a>
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b4c      	cmp	r3, #76	; 0x4c
 800186e:	d101      	bne.n	8001874 <Line3ScanDetection+0x3c>
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <Line3ScanDetection+0xd0>)
 8001872:	e000      	b.n	8001876 <Line3ScanDetection+0x3e>
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <Line3ScanDetection+0xd4>)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b4c      	cmp	r3, #76	; 0x4c
 800187a:	d102      	bne.n	8001882 <Line3ScanDetection+0x4a>
 800187c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001880:	e000      	b.n	8001884 <Line3ScanDetection+0x4c>
 8001882:	2301      	movs	r3, #1
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f000 feae 	bl	80025e8 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d130      	bne.n	80018f4 <Line3ScanDetection+0xbc>
	{
		if(GET_IO_KEY_4(side) == 1)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b4c      	cmp	r3, #76	; 0x4c
 8001896:	d101      	bne.n	800189c <Line3ScanDetection+0x64>
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <Line3ScanDetection+0xd0>)
 800189a:	e000      	b.n	800189e <Line3ScanDetection+0x66>
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <Line3ScanDetection+0xd4>)
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b4c      	cmp	r3, #76	; 0x4c
 80018a2:	d102      	bne.n	80018aa <Line3ScanDetection+0x72>
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	e000      	b.n	80018ac <Line3ScanDetection+0x74>
 80018aa:	2302      	movs	r3, #2
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 fe9a 	bl	80025e8 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <Line3ScanDetection+0x88>
		{
			ReValue = KEY_VALUE_EIGHT;	
 80018ba:	230d      	movs	r3, #13
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e015      	b.n	80018ec <Line3ScanDetection+0xb4>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b4c      	cmp	r3, #76	; 0x4c
 80018c4:	d101      	bne.n	80018ca <Line3ScanDetection+0x92>
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <Line3ScanDetection+0xd0>)
 80018c8:	e000      	b.n	80018cc <Line3ScanDetection+0x94>
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <Line3ScanDetection+0xd4>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b4c      	cmp	r3, #76	; 0x4c
 80018d0:	d102      	bne.n	80018d8 <Line3ScanDetection+0xa0>
 80018d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018d6:	e000      	b.n	80018da <Line3ScanDetection+0xa2>
 80018d8:	2301      	movs	r3, #1
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f000 fe83 	bl	80025e8 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <Line3ScanDetection+0xb4>
		{
			ReValue = KEY_VALUE_NINE;
 80018e8:	230e      	movs	r3, #14
 80018ea:	60fb      	str	r3, [r7, #12]
		}

		CurrentKeyState = LINE3_OVER;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <Line3ScanDetection+0xd8>)
 80018ee:	220b      	movs	r2, #11
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e004      	b.n	80018fe <Line3ScanDetection+0xc6>
	}
	else
	{
		CurrentKeyState = LINE4_START;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <Line3ScanDetection+0xd8>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020400 	.word	0x40020400
 800190c:	40020c00 	.word	0x40020c00
 8001910:	200001c4 	.word	0x200001c4

08001914 <Line3ScanOver>:

static void Line3ScanOver(char side)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b4c      	cmp	r3, #76	; 0x4c
 8001922:	d101      	bne.n	8001928 <Line3ScanOver+0x14>
 8001924:	4a17      	ldr	r2, [pc, #92]	; (8001984 <Line3ScanOver+0x70>)
 8001926:	e000      	b.n	800192a <Line3ScanOver+0x16>
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <Line3ScanOver+0x74>)
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b4c      	cmp	r3, #76	; 0x4c
 800192e:	d102      	bne.n	8001936 <Line3ScanOver+0x22>
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	e000      	b.n	8001938 <Line3ScanOver+0x24>
 8001936:	2302      	movs	r3, #2
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 fe54 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	2b01      	cmp	r3, #1
 8001944:	d013      	beq.n	800196e <Line3ScanOver+0x5a>
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b4c      	cmp	r3, #76	; 0x4c
 800194a:	d101      	bne.n	8001950 <Line3ScanOver+0x3c>
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <Line3ScanOver+0x70>)
 800194e:	e000      	b.n	8001952 <Line3ScanOver+0x3e>
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <Line3ScanOver+0x74>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b4c      	cmp	r3, #76	; 0x4c
 8001956:	d102      	bne.n	800195e <Line3ScanOver+0x4a>
 8001958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800195c:	e000      	b.n	8001960 <Line3ScanOver+0x4c>
 800195e:	2301      	movs	r3, #1
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f000 fe40 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d103      	bne.n	8001976 <Line3ScanOver+0x62>
	{
		CurrentKeyState = LINE3_OVER;	
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <Line3ScanOver+0x78>)
 8001970:	220b      	movs	r2, #11
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e002      	b.n	800197c <Line3ScanOver+0x68>
	}
	else
	{
		CurrentKeyState = LINE4_START;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <Line3ScanOver+0x78>)
 8001978:	220c      	movs	r2, #12
 800197a:	701a      	strb	r2, [r3, #0]
	}
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400
 8001988:	40020c00 	.word	0x40020c00
 800198c:	200001c4 	.word	0x200001c4

08001990 <Line4ScanStart>:
/* Scan line 4 */
static void Line4ScanStart(char side)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine4(side);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f93b 	bl	8000c18 <ConfigurationLine4>

	if(GET_IO_KEY_5(side) == 1)
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b4c      	cmp	r3, #76	; 0x4c
 80019a6:	d101      	bne.n	80019ac <Line4ScanStart+0x1c>
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <Line4ScanStart+0x50>)
 80019aa:	e000      	b.n	80019ae <Line4ScanStart+0x1e>
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <Line4ScanStart+0x54>)
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b4c      	cmp	r3, #76	; 0x4c
 80019b2:	d102      	bne.n	80019ba <Line4ScanStart+0x2a>
 80019b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b8:	e000      	b.n	80019bc <Line4ScanStart+0x2c>
 80019ba:	2301      	movs	r3, #1
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 fe12 	bl	80025e8 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d103      	bne.n	80019d2 <Line4ScanStart+0x42>
	{
		CurrentKeyState = LINE4_DETECTION;	
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <Line4ScanStart+0x58>)
 80019cc:	220d      	movs	r2, #13
 80019ce:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		CurrentKeyState = GND_START;
	}		
}
 80019d0:	e002      	b.n	80019d8 <Line4ScanStart+0x48>
		CurrentKeyState = GND_START;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <Line4ScanStart+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	200001c4 	.word	0x200001c4

080019ec <Line4ScanDetection>:

static uint32_t Line4ScanDetection(char side)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;

	if(GET_IO_KEY_5(side) == 1)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b4c      	cmp	r3, #76	; 0x4c
 80019fa:	d101      	bne.n	8001a00 <Line4ScanDetection+0x14>
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <Line4ScanDetection+0x54>)
 80019fe:	e000      	b.n	8001a02 <Line4ScanDetection+0x16>
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <Line4ScanDetection+0x58>)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b4c      	cmp	r3, #76	; 0x4c
 8001a06:	d102      	bne.n	8001a0e <Line4ScanDetection+0x22>
 8001a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0c:	e000      	b.n	8001a10 <Line4ScanDetection+0x24>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f000 fde8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <Line4ScanDetection+0x3e>
	{
		ReValue = KEY_VALUE_TEN;	
 8001a1e:	230f      	movs	r3, #15
 8001a20:	60fb      	str	r3, [r7, #12]

		CurrentKeyState = LINE4_OVER;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <Line4ScanDetection+0x5c>)
 8001a24:	220e      	movs	r2, #14
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e004      	b.n	8001a34 <Line4ScanDetection+0x48>
	}
	else
	{
		CurrentKeyState = GND_START;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <Line4ScanDetection+0x5c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	200001c4 	.word	0x200001c4

08001a4c <Line4ScanOver>:

static void Line4ScanOver(char side)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	if(GET_IO_KEY_5(side) == 1)
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b4c      	cmp	r3, #76	; 0x4c
 8001a5a:	d101      	bne.n	8001a60 <Line4ScanOver+0x14>
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <Line4ScanOver+0x48>)
 8001a5e:	e000      	b.n	8001a62 <Line4ScanOver+0x16>
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <Line4ScanOver+0x4c>)
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b4c      	cmp	r3, #76	; 0x4c
 8001a66:	d102      	bne.n	8001a6e <Line4ScanOver+0x22>
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	e000      	b.n	8001a70 <Line4ScanOver+0x24>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f000 fdb8 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d103      	bne.n	8001a86 <Line4ScanOver+0x3a>
	{
		CurrentKeyState = LINE4_OVER;	
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <Line4ScanOver+0x50>)
 8001a80:	220e      	movs	r2, #14
 8001a82:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		CurrentKeyState = GND_START;
	}
}
 8001a84:	e002      	b.n	8001a8c <Line4ScanOver+0x40>
		CurrentKeyState = GND_START;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <Line4ScanOver+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	200001c4 	.word	0x200001c4

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa4:	f000 fa60 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa8:	f000 f828 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aac:	f000 f890 	bl	8001bd0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001ab0:	f005 f9fc 	bl	8006eac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  dataSendBuffer[0] = 0;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <main+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
  dataSendBuffer[1] = 0;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <main+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	705a      	strb	r2, [r3, #1]
  dataSendBuffer[2] = 0;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <main+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  KeypadScanTest('L');
 8001ac6:	204c      	movs	r0, #76	; 0x4c
 8001ac8:	f7fe fdea 	bl	80006a0 <KeypadScanTest>
	  dataSendBuffer[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001acc:	2101      	movs	r1, #1
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <main+0x54>)
 8001ad0:	f000 fd8a 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <main+0x50>)
 8001ada:	701a      	strb	r2, [r3, #0]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, 3);
 8001adc:	2203      	movs	r2, #3
 8001ade:	4904      	ldr	r1, [pc, #16]	; (8001af0 <main+0x50>)
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <main+0x58>)
 8001ae2:	f003 fff3 	bl	8005acc <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
 8001ae8:	f000 fab0 	bl	800204c <HAL_Delay>
  {
 8001aec:	e7eb      	b.n	8001ac6 <main+0x26>
 8001aee:	bf00      	nop
 8001af0:	200001d8 	.word	0x200001d8
 8001af4:	40020000 	.word	0x40020000
 8001af8:	200001e0 	.word	0x200001e0

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b094      	sub	sp, #80	; 0x50
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	2230      	movs	r2, #48	; 0x30
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 fe52 	bl	80077b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <SystemClock_Config+0xcc>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <SystemClock_Config+0xd0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b70:	23a8      	movs	r3, #168	; 0xa8
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b74:	2302      	movs	r3, #2
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 fecd 	bl	8003920 <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b8c:	f000 f8aa 	bl	8001ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
 8001b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ba2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 f926 	bl	8003e00 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bba:	f000 f893 	bl	8001ce4 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3750      	adds	r7, #80	; 0x50
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a39      	ldr	r2, [pc, #228]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <MX_GPIO_Init+0x104>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <MX_GPIO_Init+0x108>)
 8001c5e:	f000 fcdb 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4819      	ldr	r0, [pc, #100]	; (8001cdc <MX_GPIO_Init+0x10c>)
 8001c76:	f000 fb1d 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001c7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <MX_GPIO_Init+0x110>)
 8001c90:	f000 fb10 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c94:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <MX_GPIO_Init+0x108>)
 8001cae:	f000 fb01 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cb2:	234f      	movs	r3, #79	; 0x4f
 8001cb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_GPIO_Init+0x108>)
 8001cc6:	f000 faf5 	bl	80022b4 <HAL_GPIO_Init>

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 f938 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <OTG_FS_IRQHandler+0x10>)
 8001da6:	f000 fda0 	bl	80028ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200006b0 	.word	0x200006b0

08001db4 <_read>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00a      	b.n	8001ddc <_read+0x28>
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4601      	mov	r1, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf0      	blt.n	8001dc6 <_read+0x12>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_write>:
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e009      	b.n	8001e14 <_write+0x26>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f3af 8000 	nop.w
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf1      	blt.n	8001e00 <_write+0x12>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_close>:
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_fstat>:
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	2300      	movs	r3, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_isatty>:
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	2301      	movs	r3, #1
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_lseek>:
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	2300      	movs	r3, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <_sbrk>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_sbrk+0x50>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x16>
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <_sbrk+0x50>)
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <_sbrk+0x54>)
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <_sbrk+0x50>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <_sbrk+0x50>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	466a      	mov	r2, sp
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d907      	bls.n	8001eca <_sbrk+0x3a>
 8001eba:	f005 fc41 	bl	8007740 <__errno>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	e006      	b.n	8001ed8 <_sbrk+0x48>
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <_sbrk+0x50>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <_sbrk+0x50>)
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200001c8 	.word	0x200001c8
 8001ee4:	20000ac0 	.word	0x20000ac0

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x28>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <SystemInit+0x28>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SystemInit+0x28>)
 8001efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f02:	609a      	str	r2, [r3, #8]
#endif
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopFillZerobss+0x14>
 8001f18:	2100      	movs	r1, #0
 8001f1a:	e003      	b.n	8001f24 <LoopCopyDataInit>

08001f1c <CopyDataInit>:
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <LoopFillZerobss+0x18>)
 8001f1e:	585b      	ldr	r3, [r3, r1]
 8001f20:	5043      	str	r3, [r0, r1]
 8001f22:	3104      	adds	r1, #4

08001f24 <LoopCopyDataInit>:
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <LoopFillZerobss+0x1c>)
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <LoopFillZerobss+0x20>)
 8001f28:	1842      	adds	r2, r0, r1
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3f6      	bcc.n	8001f1c <CopyDataInit>
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopFillZerobss+0x24>)
 8001f30:	e002      	b.n	8001f38 <LoopFillZerobss>

08001f32 <FillZerobss>:
 8001f32:	2300      	movs	r3, #0
 8001f34:	f842 3b04 	str.w	r3, [r2], #4

08001f38 <LoopFillZerobss>:
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <LoopFillZerobss+0x28>)
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3f9      	bcc.n	8001f32 <FillZerobss>
 8001f3e:	f7ff ffd3 	bl	8001ee8 <SystemInit>
 8001f42:	f005 fc03 	bl	800774c <__libc_init_array>
 8001f46:	f7ff fdab 	bl	8001aa0 <main>
 8001f4a:	4770      	bx	lr
 8001f4c:	20020000 	.word	0x20020000
 8001f50:	08008814 	.word	0x08008814
 8001f54:	20000000 	.word	0x20000000
 8001f58:	200001a8 	.word	0x200001a8
 8001f5c:	200001a8 	.word	0x200001a8
 8001f60:	20000abc 	.word	0x20000abc

08001f64 <ADC_IRQHandler>:
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_Init+0x40>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_Init+0x40>)
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x40>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 f94d 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff feaa 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f965 	bl	800229a <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 f92d 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000000 	.word	0x20000000
 8002004:	20000008 	.word	0x20000008
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	200001dc 	.word	0x200001dc

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200001dc 	.word	0x200001dc

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_Delay+0x40>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000008 	.word	0x20000008

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e16b      	b.n	80025a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 815a 	bne.w	80025a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d00b      	beq.n	800230e <HAL_GPIO_Init+0x5a>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002302:	2b11      	cmp	r3, #17
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b12      	cmp	r3, #18
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0xfc>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b12      	cmp	r3, #18
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80b4 	beq.w	80025a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <HAL_GPIO_Init+0x308>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a5e      	ldr	r2, [pc, #376]	; (80025bc <HAL_GPIO_Init+0x308>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_GPIO_Init+0x308>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_GPIO_Init+0x310>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02b      	beq.n	80024da <HAL_GPIO_Init+0x226>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_GPIO_Init+0x314>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x222>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x318>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x21e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_GPIO_Init+0x31c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x21a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x320>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x216>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x324>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x212>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_GPIO_Init+0x328>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x20e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_GPIO_Init+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x20a>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e00e      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024be:	2308      	movs	r3, #8
 80024c0:	e00c      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e00a      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024c6:	2305      	movs	r3, #5
 80024c8:	e008      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e006      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024ce:	2303      	movs	r3, #3
 80024d0:	e004      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_Init+0x228>
 80024da:	2300      	movs	r3, #0
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f002 0203 	and.w	r2, r2, #3
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	4093      	lsls	r3, r2
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ec:	4934      	ldr	r1, [pc, #208]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	3302      	adds	r3, #2
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_GPIO_Init+0x330>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251e:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_GPIO_Init+0x330>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_GPIO_Init+0x330>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <HAL_GPIO_Init+0x330>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_GPIO_Init+0x330>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_GPIO_Init+0x330>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_GPIO_Init+0x330>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_GPIO_Init+0x330>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3301      	adds	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b0f      	cmp	r3, #15
 80025ac:	f67f ae90 	bls.w	80022d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b0:	bf00      	nop
 80025b2:	3724      	adds	r7, #36	; 0x24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40013800 	.word	0x40013800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	40020400 	.word	0x40020400
 80025cc:	40020800 	.word	0x40020800
 80025d0:	40020c00 	.word	0x40020c00
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40021400 	.word	0x40021400
 80025dc:	40021800 	.word	0x40021800
 80025e0:	40021c00 	.word	0x40021c00
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800264a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800264c:	b08f      	sub	sp, #60	; 0x3c
 800264e:	af0a      	add	r7, sp, #40	; 0x28
 8002650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e10f      	b.n	800287c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f004 fd78 	bl	800716c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fe8f 	bl	80043be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	687e      	ldr	r6, [r7, #4]
 80026a8:	466d      	mov	r5, sp
 80026aa:	f106 0410 	add.w	r4, r6, #16
 80026ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80026be:	1d33      	adds	r3, r6, #4
 80026c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f001 fd66 	bl	8004194 <USB_CoreInit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0d0      	b.n	800287c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fe7d 	bl	80043e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e04a      	b.n	8002782 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	333d      	adds	r3, #61	; 0x3d
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	333c      	adds	r3, #60	; 0x3c
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	b298      	uxth	r0, r3
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3342      	adds	r3, #66	; 0x42
 8002728:	4602      	mov	r2, r0
 800272a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	333f      	adds	r3, #63	; 0x3f
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3344      	adds	r3, #68	; 0x44
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3348      	adds	r3, #72	; 0x48
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3350      	adds	r3, #80	; 0x50
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	3301      	adds	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d3af      	bcc.n	80026ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e044      	b.n	800281c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	3301      	adds	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d3b5      	bcc.n	8002792 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	687e      	ldr	r6, [r7, #4]
 800282e:	466d      	mov	r5, sp
 8002830:	f106 0410 	add.w	r4, r6, #16
 8002834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002840:	e885 0003 	stmia.w	r5, {r0, r1}
 8002844:	1d33      	adds	r3, r6, #4
 8002846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f001 fdf3 	bl	8004434 <USB_DevInit>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e00d      	b.n	800287c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fe32 	bl	80054de <USB_DevDisconnect>

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002884 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_Start+0x1c>
 800289c:	2302      	movs	r3, #2
 800289e:	e020      	b.n	80028e2 <HAL_PCD_Start+0x5e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d109      	bne.n	80028c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d005      	beq.n	80028c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 fdf0 	bl	80054ae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fd62 	bl	800439c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028ea:	b590      	push	{r4, r7, lr}
 80028ec:	b08d      	sub	sp, #52	; 0x34
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fe97 	bl	8005634 <USB_GetMode>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 839d 	bne.w	8003048 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fdfb 	bl	800550e <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8393 	beq.w	8003046 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fdf2 	bl	800550e <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d107      	bne.n	8002944 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f002 0202 	and.w	r2, r2, #2
 8002942:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f002 fde0 	bl	800550e <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b10      	cmp	r3, #16
 8002956:	d161      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0210 	bic.w	r2, r2, #16
 8002966:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	0c5b      	lsrs	r3, r3, #17
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	2b02      	cmp	r3, #2
 8002992:	d124      	bne.n	80029de <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d035      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	6a38      	ldr	r0, [r7, #32]
 80029b4:	f002 fc58 	bl	8005268 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c4:	441a      	add	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d6:	441a      	add	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	619a      	str	r2, [r3, #24]
 80029dc:	e016      	b.n	8002a0c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	0c5b      	lsrs	r3, r3, #17
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d110      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029f0:	2208      	movs	r2, #8
 80029f2:	4619      	mov	r1, r3
 80029f4:	6a38      	ldr	r0, [r7, #32]
 80029f6:	f002 fc37 	bl	8005268 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a06:	441a      	add	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0210 	orr.w	r2, r2, #16
 8002a1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fd74 	bl	800550e <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a30:	d16e      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fd7a 	bl	8005534 <USB_ReadDevAllOutEpInterrupt>
 8002a40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a42:	e062      	b.n	8002b0a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d057      	beq.n	8002afe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fd9f 	bl	800559c <USB_ReadDevOutEPInterrupt>
 8002a5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fd98 	bl	80035b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fe92 	bl	80037cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ada:	461a      	mov	r2, r3
 8002adc:	2320      	movs	r3, #32
 8002ade:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	461a      	mov	r2, r3
 8002af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d199      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 fcfa 	bl	800550e <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b24:	f040 80c0 	bne.w	8002ca8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fd1b 	bl	8005568 <USB_ReadDevAllInEpInterrupt>
 8002b32:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b38:	e0b2      	b.n	8002ca0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80a7 	beq.w	8002c94 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 fd41 	bl	80055d8 <USB_ReadDevInEPInterrupt>
 8002b56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d057      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69f9      	ldr	r1, [r7, #28]
 8002b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b82:	4013      	ands	r3, r2
 8002b84:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b92:	461a      	mov	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d132      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3348      	adds	r3, #72	; 0x48
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3344      	adds	r3, #68	; 0x44
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4419      	add	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4403      	add	r3, r0
 8002bd4:	3348      	adds	r3, #72	; 0x48
 8002bd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d113      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x31c>
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3350      	adds	r3, #80	; 0x50
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2101      	movs	r1, #1
 8002c02:	f002 fd49 	bl	8005698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f004 fb2e 	bl	800726e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c44:	461a      	mov	r2, r3
 8002c46:	2310      	movs	r3, #16
 8002c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c60:	461a      	mov	r2, r3
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2302      	movs	r3, #2
 8002c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fc03 	bl	800349a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f af49 	bne.w	8002b3a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fc2e 	bl	800550e <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cbc:	d122      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d108      	bne.n	8002cee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fe0e 	bl	8003908 <HAL_PCDEx_LPM_Callback>
 8002cec:	e002      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f004 fb34 	bl	800735c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fc00 	bl	800550e <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d18:	d112      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f004 faf0 	bl	8007310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fbe2 	bl	800550e <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	f040 80c7 	bne.w	8002ee6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2110      	movs	r1, #16
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fcc2 	bl	80046fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7c:	e056      	b.n	8002e2c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da2:	0151      	lsls	r1, r2, #5
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	440a      	add	r2, r1
 8002da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	0151      	lsls	r1, r2, #5
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	440a      	add	r2, r1
 8002dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	461a      	mov	r2, r3
 8002de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002de4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df6:	0151      	lsls	r1, r2, #5
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	440a      	add	r2, r1
 8002dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e16:	0151      	lsls	r1, r2, #5
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	440a      	add	r2, r1
 8002e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	3301      	adds	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3a3      	bcc.n	8002d7e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e62:	f043 030b 	orr.w	r3, r3, #11
 8002e66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e78:	f043 030b 	orr.w	r3, r3, #11
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	e015      	b.n	8002eac <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e92:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea6:	f043 030b 	orr.w	r3, r3, #11
 8002eaa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ebe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f002 fbe1 	bl	8005698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fb0f 	bl	800550e <USB_ReadInterrupts>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	d124      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fba5 	bl	8005650 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fc57 	bl	80047be <USB_GetDevSpeed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681c      	ldr	r4, [r3, #0]
 8002f1c:	f001 f92e 	bl	800417c <HAL_RCC_GetHCLKFreq>
 8002f20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f001 f994 	bl	8004258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f004 f9c4 	bl	80072be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fadf 	bl	800550e <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d10a      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f004 f9a1 	bl	80072a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f002 0208 	and.w	r2, r2, #8
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 faca 	bl	800550e <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f84:	d10f      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f004 fa03 	bl	800739c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 faaf 	bl	800550e <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fba:	d10f      	bne.n	8002fdc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f004 f9d6 	bl	8007378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 fa94 	bl	800550e <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d10a      	bne.n	8003008 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f004 f9e4 	bl	80073c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fa7e 	bl	800550e <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d115      	bne.n	8003048 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f004 f9d4 	bl	80073dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	e000      	b.n	8003048 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003046:	bf00      	nop
    }
  }
}
 8003048:	3734      	adds	r7, #52	; 0x34
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}

0800304e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_PCD_SetAddress+0x1a>
 8003064:	2302      	movs	r3, #2
 8003066:	e013      	b.n	8003090 <HAL_PCD_SetAddress+0x42>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f002 f9ee 	bl	8005462 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	70fb      	strb	r3, [r7, #3]
 80030aa:	460b      	mov	r3, r1
 80030ac:	803b      	strh	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0f      	bge.n	80030de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3338      	adds	r3, #56	; 0x38
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	705a      	strb	r2, [r3, #1]
 80030dc:	e00f      	b.n	80030fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800310a:	883a      	ldrh	r2, [r7, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	78ba      	ldrb	r2, [r7, #2]
 8003114:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003128:	78bb      	ldrb	r3, [r7, #2]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d102      	bne.n	8003134 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_PCD_EP_Open+0xaa>
 800313e:	2302      	movs	r3, #2
 8003140:	e00e      	b.n	8003160 <HAL_PCD_EP_Open+0xc8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	4618      	mov	r0, r3
 8003152:	f001 fb59 	bl	8004808 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800315e:	7afb      	ldrb	r3, [r7, #11]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0f      	bge.n	800319c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3338      	adds	r3, #56	; 0x38
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00f      	b.n	80031bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_EP_Close+0x6e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e00e      	b.n	80031f4 <HAL_PCD_EP_Close+0x8c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 fb97 	bl	8004918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	460b      	mov	r3, r1
 800320a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320c:	7afb      	ldrb	r3, [r7, #11]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2200      	movs	r2, #0
 800323c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	f001 fe72 	bl	8004f58 <USB_EP0StartXfer>
 8003274:	e008      	b.n	8003288 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	6979      	ldr	r1, [r7, #20]
 8003284:	f001 fc24 	bl	8004ad0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	460b      	mov	r3, r1
 80032a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3338      	adds	r3, #56	; 0x38
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	f001 fe28 	bl	8004f58 <USB_EP0StartXfer>
 8003308:	e008      	b.n	800331c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6979      	ldr	r1, [r7, #20]
 8003318:	f001 fbda 	bl	8004ad0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d901      	bls.n	8003344 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e050      	b.n	80033e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003348:	2b00      	cmp	r3, #0
 800334a:	da0f      	bge.n	800336c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	3338      	adds	r3, #56	; 0x38
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	705a      	strb	r2, [r3, #1]
 800336a:	e00d      	b.n	8003388 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PCD_EP_SetStall+0x82>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e01e      	b.n	80033e6 <HAL_PCD_EP_SetStall+0xc0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 ff7f 	bl	80052ba <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	b2d9      	uxtb	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d6:	461a      	mov	r2, r3
 80033d8:	f002 f95e 	bl	8005698 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	f003 020f 	and.w	r2, r3, #15
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	d901      	bls.n	800340c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e042      	b.n	8003492 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800340c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003410:	2b00      	cmp	r3, #0
 8003412:	da0f      	bge.n	8003434 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	3338      	adds	r3, #56	; 0x38
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	705a      	strb	r2, [r3, #1]
 8003432:	e00f      	b.n	8003454 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_PCD_EP_ClrStall+0x86>
 8003470:	2302      	movs	r3, #2
 8003472:	e00e      	b.n	8003492 <HAL_PCD_EP_ClrStall+0xa4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f001 ff87 	bl	8005396 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	; 0x28
 800349e:	af02      	add	r7, sp, #8
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3338      	adds	r3, #56	; 0x38
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d901      	bls.n	80034d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06c      	b.n	80035ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d902      	bls.n	80034ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3303      	adds	r3, #3
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f6:	e02b      	b.n	8003550 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	429a      	cmp	r2, r3
 800350c:	d902      	bls.n	8003514 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3303      	adds	r3, #3
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352c:	b2db      	uxtb	r3, r3
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4603      	mov	r3, r0
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f001 fe63 	bl	80051fe <USB_WritePacket>

    ep->xfer_buff  += len;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	441a      	add	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	b29b      	uxth	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	429a      	cmp	r2, r3
 8003564:	d809      	bhi.n	800357a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356e:	429a      	cmp	r2, r3
 8003570:	d203      	bcs.n	800357a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1be      	bne.n	80034f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	429a      	cmp	r2, r3
 8003584:	d811      	bhi.n	80035aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	2201      	movs	r2, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	43db      	mvns	r3, r3
 80035a0:	6939      	ldr	r1, [r7, #16]
 80035a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a6:	4013      	ands	r3, r2
 80035a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	333c      	adds	r3, #60	; 0x3c
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f040 80a0 	bne.w	800372c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a72      	ldr	r2, [pc, #456]	; (80037c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	f240 80dd 	bls.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80d7 	beq.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e0cb      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	2320      	movs	r3, #32
 800363c:	6093      	str	r3, [r2, #8]
 800363e:	e0bc      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80b7 	bne.w	80037ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d90f      	bls.n	8003674 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	e0a2      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003686:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	0159      	lsls	r1, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	440b      	add	r3, r1
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800369a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4403      	add	r3, r0
 80036d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4419      	add	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d114      	bne.n	800371e <PCD_EP_OutXfrComplete_int+0x16a>
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003716:	461a      	mov	r2, r3
 8003718:	2101      	movs	r1, #1
 800371a:	f001 ffbd 	bl	8005698 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f003 fd87 	bl	8007238 <HAL_PCD_DataOutStageCallback>
 800372a:	e046      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d124      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	e032      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	2320      	movs	r3, #32
 800376e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f003 fd5e 	bl	8007238 <HAL_PCD_DataOutStageCallback>
 800377c:	e01d      	b.n	80037ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037a6:	461a      	mov	r2, r3
 80037a8:	2100      	movs	r1, #0
 80037aa:	f001 ff75 	bl	8005698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f003 fd3f 	bl	8007238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	4f54300a 	.word	0x4f54300a
 80037c8:	4f54310a 	.word	0x4f54310a

080037cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	333c      	adds	r3, #60	; 0x3c
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <PCD_EP_OutSetupPacket_int+0x88>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d90e      	bls.n	8003820 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f003 fcf7 	bl	8007214 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <PCD_EP_OutSetupPacket_int+0x88>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90c      	bls.n	8003848 <PCD_EP_OutSetupPacket_int+0x7c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	f001 ff28 	bl	8005698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	4f54300a 	.word	0x4f54300a

08003858 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
 8003864:	4613      	mov	r3, r2
 8003866:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d107      	bne.n	8003886 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003876:	883b      	ldrh	r3, [r7, #0]
 8003878:	0419      	lsls	r1, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	430a      	orrs	r2, r1
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
 8003884:	e028      	b.n	80038d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4413      	add	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e00d      	b.n	80038b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	3340      	adds	r3, #64	; 0x40
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	3301      	adds	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	429a      	cmp	r2, r3
 80038be:	d3ec      	bcc.n	800389a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038c0:	883b      	ldrh	r3, [r7, #0]
 80038c2:	0418      	lsls	r0, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4302      	orrs	r2, r0
 80038d0:	3340      	adds	r3, #64	; 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	887a      	ldrh	r2, [r7, #2]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e25b      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d075      	beq.n	8003a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393e:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d00c      	beq.n	8003964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4ba0      	ldr	r3, [pc, #640]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d112      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b9d      	ldr	r3, [pc, #628]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d10b      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	4b99      	ldr	r3, [pc, #612]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x108>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d157      	bne.n	8003a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e236      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x74>
 8003986:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a90      	ldr	r2, [pc, #576]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e01d      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x98>
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a8a      	ldr	r2, [pc, #552]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fb2c 	bl	8002034 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe fb28 	bl	8002034 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1fb      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0xc0>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe fb18 	bl	8002034 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe fb14 	bl	8002034 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1e7      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0xe8>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b62      	ldr	r3, [pc, #392]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d11c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1bb      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b56      	ldr	r3, [pc, #344]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4952      	ldr	r1, [pc, #328]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e03a      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a90:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <HAL_RCC_OscConfig+0x2b0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fe facd 	bl	8002034 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fac9 	bl	8002034 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e19c      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4940      	ldr	r1, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_RCC_OscConfig+0x2b0>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe faac 	bl	8002034 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae0:	f7fe faa8 	bl	8002034 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e17b      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d030      	beq.n	8003b6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <HAL_RCC_OscConfig+0x2b4>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa8c 	bl	8002034 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fe fa88 	bl	8002034 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e15b      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x200>
 8003b3e:	e015      	b.n	8003b6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x2b4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fe fa75 	bl	8002034 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe fa71 	bl	8002034 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e144      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80a0 	beq.w	8003cba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d121      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_RCC_OscConfig+0x2b8>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fa37 	bl	8002034 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e011      	b.n	8003bee <HAL_RCC_OscConfig+0x2ce>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470000 	.word	0x42470000
 8003bd4:	42470e80 	.word	0x42470e80
 8003bd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fe fa2a 	bl	8002034 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0fd      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_OscConfig+0x4d4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2f0>
 8003c02:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a7c      	ldr	r2, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	e01c      	b.n	8003c4a <HAL_RCC_OscConfig+0x32a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_OscConfig+0x312>
 8003c18:	4b77      	ldr	r3, [pc, #476]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a76      	ldr	r2, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c1e:	f043 0304 	orr.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	4b74      	ldr	r3, [pc, #464]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a73      	ldr	r2, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	e00b      	b.n	8003c4a <HAL_RCC_OscConfig+0x32a>
 8003c32:	4b71      	ldr	r3, [pc, #452]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a70      	ldr	r2, [pc, #448]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a6d      	ldr	r2, [pc, #436]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe f9ef 	bl	8002034 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe f9eb 	bl	8002034 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e0bc      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ee      	beq.n	8003c5a <HAL_RCC_OscConfig+0x33a>
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7e:	f7fe f9d9 	bl	8002034 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe f9d5 	bl	8002034 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0a6      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ee      	bne.n	8003c86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b52      	ldr	r3, [pc, #328]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a51      	ldr	r2, [pc, #324]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8092 	beq.w	8003de8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d05c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d141      	bne.n	8003d5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fe f9a9 	bl	8002034 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fe f9a5 	bl	8002034 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e078      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf8:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	061b      	lsls	r3, r3, #24
 8003d28:	4933      	ldr	r1, [pc, #204]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe f97e 	bl	8002034 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fe f97a 	bl	8002034 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e04d      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x41c>
 8003d5a:	e045      	b.n	8003de8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe f967 	bl	8002034 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fe f963 	bl	8002034 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e036      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7c:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x44a>
 8003d88:	e02e      	b.n	8003de8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e029      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d115      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40007000 	.word	0x40007000
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470060 	.word	0x42470060

08003e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d90c      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d044      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d119      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e067      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4934      	ldr	r1, [pc, #208]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fe f8a0 	bl	8002034 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fe f89c 	bl	8002034 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e04f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d20c      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe f800 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	0800875c 	.word	0x0800875c
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	20000004 	.word	0x20000004

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d007      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x32>
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d008      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x38>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 80b4 	bne.w	8004160 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ffa:	60bb      	str	r3, [r7, #8]
       break;
 8003ffc:	e0b3      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffe:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004000:	60bb      	str	r3, [r7, #8]
      break;
 8004002:	e0b0      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004004:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b58      	ldr	r3, [pc, #352]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04a      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b55      	ldr	r3, [pc, #340]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	f04f 0400 	mov.w	r4, #0
 8004024:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	ea03 0501 	and.w	r5, r3, r1
 8004030:	ea04 0602 	and.w	r6, r4, r2
 8004034:	4629      	mov	r1, r5
 8004036:	4632      	mov	r2, r6
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	0154      	lsls	r4, r2, #5
 8004042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004046:	014b      	lsls	r3, r1, #5
 8004048:	4619      	mov	r1, r3
 800404a:	4622      	mov	r2, r4
 800404c:	1b49      	subs	r1, r1, r5
 800404e:	eb62 0206 	sbc.w	r2, r2, r6
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	f04f 0400 	mov.w	r4, #0
 800405a:	0194      	lsls	r4, r2, #6
 800405c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004060:	018b      	lsls	r3, r1, #6
 8004062:	1a5b      	subs	r3, r3, r1
 8004064:	eb64 0402 	sbc.w	r4, r4, r2
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	00e2      	lsls	r2, r4, #3
 8004072:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004076:	00d9      	lsls	r1, r3, #3
 8004078:	460b      	mov	r3, r1
 800407a:	4614      	mov	r4, r2
 800407c:	195b      	adds	r3, r3, r5
 800407e:	eb44 0406 	adc.w	r4, r4, r6
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	0262      	lsls	r2, r4, #9
 800408c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004090:	0259      	lsls	r1, r3, #9
 8004092:	460b      	mov	r3, r1
 8004094:	4614      	mov	r4, r2
 8004096:	4618      	mov	r0, r3
 8004098:	4621      	mov	r1, r4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f04f 0400 	mov.w	r4, #0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	f7fc f8e4 	bl	8000270 <__aeabi_uldivmod>
 80040a8:	4603      	mov	r3, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e049      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b0:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	f04f 0400 	mov.w	r4, #0
 80040ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	ea03 0501 	and.w	r5, r3, r1
 80040c6:	ea04 0602 	and.w	r6, r4, r2
 80040ca:	4629      	mov	r1, r5
 80040cc:	4632      	mov	r2, r6
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	f04f 0400 	mov.w	r4, #0
 80040d6:	0154      	lsls	r4, r2, #5
 80040d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040dc:	014b      	lsls	r3, r1, #5
 80040de:	4619      	mov	r1, r3
 80040e0:	4622      	mov	r2, r4
 80040e2:	1b49      	subs	r1, r1, r5
 80040e4:	eb62 0206 	sbc.w	r2, r2, r6
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	f04f 0400 	mov.w	r4, #0
 80040f0:	0194      	lsls	r4, r2, #6
 80040f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	1a5b      	subs	r3, r3, r1
 80040fa:	eb64 0402 	sbc.w	r4, r4, r2
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	00e2      	lsls	r2, r4, #3
 8004108:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800410c:	00d9      	lsls	r1, r3, #3
 800410e:	460b      	mov	r3, r1
 8004110:	4614      	mov	r4, r2
 8004112:	195b      	adds	r3, r3, r5
 8004114:	eb44 0406 	adc.w	r4, r4, r6
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	02a2      	lsls	r2, r4, #10
 8004122:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004126:	0299      	lsls	r1, r3, #10
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	4618      	mov	r0, r3
 800412e:	4621      	mov	r1, r4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f04f 0400 	mov.w	r4, #0
 8004136:	461a      	mov	r2, r3
 8004138:	4623      	mov	r3, r4
 800413a:	f7fc f899 	bl	8000270 <__aeabi_uldivmod>
 800413e:	4603      	mov	r3, r0
 8004140:	460c      	mov	r4, r1
 8004142:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	3301      	adds	r3, #1
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	60bb      	str	r3, [r7, #8]
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004162:	60bb      	str	r3, [r7, #8]
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	68bb      	ldr	r3, [r7, #8]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400
 8004178:	007a1200 	.word	0x007a1200

0800417c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_RCC_GetHCLKFreq+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000

08004194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004194:	b084      	sub	sp, #16
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	f107 001c 	add.w	r0, r7, #28
 80041a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d122      	bne.n	80041f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 fab4 	bl	8005754 <USB_CoreReset>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e01a      	b.n	8004228 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 faa8 	bl	8005754 <USB_CoreReset>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
 800421a:	e005      	b.n	8004228 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10b      	bne.n	8004246 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f043 0206 	orr.w	r2, r3, #6
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004252:	b004      	add	sp, #16
 8004254:	4770      	bx	lr
	...

08004258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d165      	bne.n	8004338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <USB_SetTurnaroundTime+0x11c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x2a>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d802      	bhi.n	8004282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800427c:	230f      	movs	r3, #15
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e062      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <USB_SetTurnaroundTime+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d906      	bls.n	8004298 <USB_SetTurnaroundTime+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a3b      	ldr	r2, [pc, #236]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004292:	230e      	movs	r3, #14
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e057      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a38      	ldr	r2, [pc, #224]	; (800437c <USB_SetTurnaroundTime+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0x56>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d802      	bhi.n	80042ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042a8:	230d      	movs	r3, #13
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e04c      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a33      	ldr	r2, [pc, #204]	; (8004380 <USB_SetTurnaroundTime+0x128>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d906      	bls.n	80042c4 <USB_SetTurnaroundTime+0x6c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a32      	ldr	r2, [pc, #200]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042be:	230c      	movs	r3, #12
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e041      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <USB_SetTurnaroundTime+0x12c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x82>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042d4:	230b      	movs	r3, #11
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e036      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <USB_SetTurnaroundTime+0x130>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x98>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a29      	ldr	r2, [pc, #164]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042ea:	230a      	movs	r3, #10
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e02b      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <USB_SetTurnaroundTime+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xae>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d802      	bhi.n	8004306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004300:	2309      	movs	r3, #9
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e020      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <USB_SetTurnaroundTime+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d906      	bls.n	800431c <USB_SetTurnaroundTime+0xc4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004316:	2308      	movs	r3, #8
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e015      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <USB_SetTurnaroundTime+0x13c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xda>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <USB_SetTurnaroundTime+0x140>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d802      	bhi.n	8004332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800432c:	2307      	movs	r3, #7
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004332:	2306      	movs	r3, #6
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e007      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800433e:	2309      	movs	r3, #9
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e001      	b.n	8004348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004344:	2309      	movs	r3, #9
 8004346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	00d8acbf 	.word	0x00d8acbf
 8004378:	00e4e1bf 	.word	0x00e4e1bf
 800437c:	00f423ff 	.word	0x00f423ff
 8004380:	0106737f 	.word	0x0106737f
 8004384:	011a499f 	.word	0x011a499f
 8004388:	01312cff 	.word	0x01312cff
 800438c:	014ca43f 	.word	0x014ca43f
 8004390:	016e35ff 	.word	0x016e35ff
 8004394:	01a6ab1f 	.word	0x01a6ab1f
 8004398:	01e847ff 	.word	0x01e847ff

0800439c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f043 0201 	orr.w	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d106      	bne.n	800440c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e00b      	b.n	8004424 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e001      	b.n	8004424 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e003      	b.n	800442c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004424:	2032      	movs	r0, #50	; 0x32
 8004426:	f7fd fe11 	bl	800204c <HAL_Delay>

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004434:	b084      	sub	sp, #16
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e009      	b.n	8004468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3340      	adds	r3, #64	; 0x40
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0e      	cmp	r3, #14
 800446c:	d9f2      	bls.n	8004454 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11c      	bne.n	80044ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004482:	f043 0302 	orr.w	r3, r3, #2
 8004486:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
 80044ac:	e00b      	b.n	80044c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044cc:	461a      	mov	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	4619      	mov	r1, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	461a      	mov	r2, r3
 80044e2:	680b      	ldr	r3, [r1, #0]
 80044e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044f2:	2100      	movs	r1, #0
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f949 	bl	800478c <USB_SetDevSpeed>
 80044fa:	e008      	b.n	800450e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044fc:	2101      	movs	r1, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f944 	bl	800478c <USB_SetDevSpeed>
 8004504:	e003      	b.n	800450e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004506:	2103      	movs	r1, #3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f93f 	bl	800478c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800450e:	2110      	movs	r1, #16
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8f3 	bl	80046fc <USB_FlushTxFifo>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f911 	bl	8004748 <USB_FlushRxFifo>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e043      	b.n	80045e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004570:	d118      	bne.n	80045a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e013      	b.n	80045b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	461a      	mov	r2, r3
 800459c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e008      	b.n	80045b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	2300      	movs	r3, #0
 80045b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	3301      	adds	r3, #1
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3b7      	bcc.n	800455a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e043      	b.n	8004678 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004606:	d118      	bne.n	800463a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e013      	b.n	800464c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e008      	b.n	800464c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	2300      	movs	r3, #0
 800464a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d3b7      	bcc.n	80045f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004692:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <USB_DevInit+0x2c4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	803c3800 	.word	0x803c3800

080046fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <USB_FlushTxFifo+0x48>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d0f0      	beq.n	8004716 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	00030d40 	.word	0x00030d40

08004748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2210      	movs	r2, #16
 8004758:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <USB_FlushRxFifo+0x40>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e006      	b.n	800477a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d0f0      	beq.n	800475a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	00030d40 	.word	0x00030d40

0800478c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0306 	and.w	r3, r3, #6
 80047d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047de:	2300      	movs	r3, #0
 80047e0:	75fb      	strb	r3, [r7, #23]
 80047e2:	e00a      	b.n	80047fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d002      	beq.n	80047f0 <USB_GetDevSpeed+0x32>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d102      	bne.n	80047f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047f0:	2302      	movs	r3, #2
 80047f2:	75fb      	strb	r3, [r7, #23]
 80047f4:	e001      	b.n	80047fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047f6:	230f      	movs	r3, #15
 80047f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d13a      	bne.n	800489a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	b29b      	uxth	r3, r3
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004842:	4313      	orrs	r3, r2
 8004844:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d155      	bne.n	8004908 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004878:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	4313      	orrs	r3, r2
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e036      	b.n	8004908 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11a      	bne.n	8004908 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ee:	430b      	orrs	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d161      	bne.n	80049f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494a:	d11f      	bne.n	800498c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800496a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800498a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ac:	4013      	ands	r3, r2
 80049ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d0:	4013      	ands	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	440b      	add	r3, r1
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	4619      	mov	r1, r3
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <USB_DeactivateEndpoint+0x1b0>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
 80049f6:	e060      	b.n	8004aba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0e:	d11f      	bne.n	8004a50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a70:	4013      	ands	r3, r2
 8004a72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a94:	4013      	ands	r3, r2
 8004a96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <USB_DeactivateEndpoint+0x1b4>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	ec337800 	.word	0xec337800
 8004acc:	eff37800 	.word	0xeff37800

08004ad0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 815c 	bne.w	8004daa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d132      	bne.n	8004b60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	0cdb      	lsrs	r3, r3, #19
 8004b5a:	04db      	lsls	r3, r3, #19
 8004b5c:	6113      	str	r3, [r2, #16]
 8004b5e:	e074      	b.n	8004c4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	0cdb      	lsrs	r3, r3, #19
 8004b7c:	04db      	lsls	r3, r3, #19
 8004b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6959      	ldr	r1, [r3, #20]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	440b      	add	r3, r1
 8004bbc:	1e59      	subs	r1, r3, #1
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc6:	04d9      	lsls	r1, r3, #19
 8004bc8:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <USB_EPStartXfer+0x370>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	0148      	lsls	r0, r1, #5
 8004bd0:	69f9      	ldr	r1, [r7, #28]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf2:	69b9      	ldr	r1, [r7, #24]
 8004bf4:	0148      	lsls	r0, r1, #5
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	4401      	add	r1, r0
 8004bfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d11f      	bne.n	8004c4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d14b      	bne.n	8004ce8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	78db      	ldrb	r3, [r3, #3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d128      	bne.n	8004cc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d110      	bne.n	8004ca6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e00f      	b.n	8004cc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e12f      	b.n	8004f48 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d015      	beq.n	8004d3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8117 	beq.w	8004f48 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	634b      	str	r3, [r1, #52]	; 0x34
 8004d3a:	e105      	b.n	8004f48 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d110      	bne.n	8004d6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e00f      	b.n	8004d8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	b298      	uxth	r0, r3
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4603      	mov	r3, r0
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa2b 	bl	80051fe <USB_WritePacket>
 8004da8:	e0ce      	b.n	8004f48 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	0cdb      	lsrs	r3, r3, #19
 8004dc6:	04db      	lsls	r3, r3, #19
 8004dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d126      	bne.n	8004e44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	0148      	lsls	r0, r1, #5
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	4401      	add	r1, r0
 8004e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e3a:	6113      	str	r3, [r2, #16]
 8004e3c:	e036      	b.n	8004eac <USB_EPStartXfer+0x3dc>
 8004e3e:	bf00      	nop
 8004e40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	04d9      	lsls	r1, r3, #19
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <USB_EPStartXfer+0x484>)
 8004e6e:	400b      	ands	r3, r1
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	8af9      	ldrh	r1, [r7, #22]
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	0148      	lsls	r0, r1, #5
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10d      	bne.n	8004ece <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	460a      	mov	r2, r1
 8004ecc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d128      	bne.n	8004f28 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d110      	bne.n	8004f08 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e00f      	b.n	8004f28 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	1ff80000 	.word	0x1ff80000

08004f58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 80cd 	bne.w	8005114 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d132      	bne.n	8004fe8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	0cdb      	lsrs	r3, r3, #19
 8004fe2:	04db      	lsls	r3, r3, #19
 8004fe4:	6113      	str	r3, [r2, #16]
 8004fe6:	e04e      	b.n	8005086 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005002:	0cdb      	lsrs	r3, r3, #19
 8005004:	04db      	lsls	r3, r3, #19
 8005006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800502a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	0148      	lsls	r0, r1, #5
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	4401      	add	r1, r0
 800507e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d11e      	bne.n	80050ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e092      	b.n	80051f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07e      	beq.n	80051f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f303 	lsl.w	r3, r1, r3
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510e:	4313      	orrs	r3, r2
 8005110:	634b      	str	r3, [r1, #52]	; 0x34
 8005112:	e06d      	b.n	80051f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	0cdb      	lsrs	r3, r3, #19
 8005130:	04db      	lsls	r3, r3, #19
 8005132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005156:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	0148      	lsls	r0, r1, #5
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	4401      	add	r1, r0
 80051a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051aa:	4313      	orrs	r3, r2
 80051ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10d      	bne.n	80051d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68d9      	ldr	r1, [r3, #12]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	460a      	mov	r2, r1
 80051ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051fe:	b480      	push	{r7}
 8005200:	b089      	sub	sp, #36	; 0x24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	4611      	mov	r1, r2
 800520a:	461a      	mov	r2, r3
 800520c:	460b      	mov	r3, r1
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	4613      	mov	r3, r2
 8005212:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800521c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11a      	bne.n	800525a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005224:	88bb      	ldrh	r3, [r7, #4]
 8005226:	3303      	adds	r3, #3
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e00f      	b.n	8005252 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	031a      	lsls	r2, r3, #12
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	461a      	mov	r2, r3
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	3301      	adds	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3eb      	bcc.n	8005232 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3724      	adds	r7, #36	; 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	3303      	adds	r3, #3
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e00b      	b.n	80052a4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	601a      	str	r2, [r3, #0]
    pDest++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3304      	adds	r3, #4
 800529c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3ef      	bcc.n	800528c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d12c      	bne.n	8005330 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db12      	blt.n	800530e <USB_EPSetStall+0x54>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00f      	beq.n	800530e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800530c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e02b      	b.n	8005388 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	db12      	blt.n	8005368 <USB_EPSetStall+0xae>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00f      	beq.n	8005368 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005366:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d128      	bne.n	8005404 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d003      	beq.n	80053e2 <USB_EPClearStall+0x4c>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d138      	bne.n	8005454 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e027      	b.n	8005454 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005422:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d003      	beq.n	8005434 <USB_EPClearStall+0x9e>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d10f      	bne.n	8005454 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005480:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005484:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80054ce:	2003      	movs	r0, #3
 80054d0:	f7fc fdbc 	bl	800204c <HAL_Delay>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80054fe:	2003      	movs	r0, #3
 8005500:	f7fc fda4 	bl	800204c <HAL_Delay>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	0c1b      	lsrs	r3, r3, #16
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	b29b      	uxth	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055ca:	68bb      	ldr	r3, [r7, #8]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	01db      	lsls	r3, r3, #7
 800560a:	b2db      	uxtb	r3, r3
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005626:	68bb      	ldr	r3, [r7, #8]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0301 	and.w	r3, r3, #1
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	460b      	mov	r3, r1
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	333c      	adds	r3, #60	; 0x3c
 80056ae:	3304      	adds	r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4a26      	ldr	r2, [pc, #152]	; (8005750 <USB_EP0_OutStart+0xb8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d90a      	bls.n	80056d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056cc:	d101      	bne.n	80056d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e037      	b.n	8005742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	2300      	movs	r3, #0
 80056dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 0318 	orr.w	r3, r3, #24
 8005704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005714:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d10f      	bne.n	8005740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800573e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	4f54300a 	.word	0x4f54300a

08005754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <USB_CoreReset+0x64>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e01b      	b.n	80057aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	daf2      	bge.n	8005760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <USB_CoreReset+0x64>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e006      	b.n	80057aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d0f0      	beq.n	800578a <USB_CoreReset+0x36>

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	00030d40 	.word	0x00030d40

080057bc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80057c8:	2018      	movs	r0, #24
 80057ca:	f001 ffe3 	bl	8007794 <malloc>
 80057ce:	4603      	mov	r3, r0
 80057d0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80057e0:	2302      	movs	r3, #2
 80057e2:	e038      	b.n	8005856 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1b      	ldrb	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2205      	movs	r2, #5
 80057f8:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2205      	movs	r2, #5
 80057fe:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005802:	e006      	b.n	8005812 <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2205      	movs	r2, #5
 8005808:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2205      	movs	r2, #5
 800580e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005812:	2302      	movs	r3, #2
 8005814:	2203      	movs	r2, #3
 8005816:	2181      	movs	r1, #129	; 0x81
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 fe54 	bl	80074c6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005824:	2302      	movs	r3, #2
 8005826:	2203      	movs	r2, #3
 8005828:	2101      	movs	r1, #1
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fe4b 	bl	80074c6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	2302      	movs	r3, #2
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 ff28 	bl	80076a4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	460b      	mov	r3, r1
 8005868:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800586a:	2181      	movs	r1, #129	; 0x81
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 fe50 	bl	8007512 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800587e:	2101      	movs	r1, #1
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fe46 	bl	8007512 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 ff77 	bl	80077a4 <free>
    pdev->pClassData = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d051      	beq.n	800599a <USBD_CUSTOM_HID_Setup+0xd2>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	f040 80d9 	bne.w	8005aae <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	3b02      	subs	r3, #2
 8005902:	2b09      	cmp	r3, #9
 8005904:	d841      	bhi.n	800598a <USBD_CUSTOM_HID_Setup+0xc2>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <USBD_CUSTOM_HID_Setup+0x44>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005943 	.word	0x08005943
 8005914:	0800598b 	.word	0x0800598b
 8005918:	0800598b 	.word	0x0800598b
 800591c:	0800598b 	.word	0x0800598b
 8005920:	0800598b 	.word	0x0800598b
 8005924:	0800598b 	.word	0x0800598b
 8005928:	08005975 	.word	0x08005975
 800592c:	08005953 	.word	0x08005953
 8005930:	08005935 	.word	0x08005935
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	885b      	ldrh	r3, [r3, #2]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]
      break;
 8005940:	e02a      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3304      	adds	r3, #4
 8005946:	2201      	movs	r2, #1
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fa2d 	bl	8006daa <USBD_CtlSendData>
      break;
 8005950:	e022      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	885b      	ldrh	r3, [r3, #2]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	b29b      	uxth	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	609a      	str	r2, [r3, #8]
      break;
 8005962:	e019      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3308      	adds	r3, #8
 8005968:	2201      	movs	r2, #1
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fa1c 	bl	8006daa <USBD_CtlSendData>
      break;
 8005972:	e011      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2201      	movs	r2, #1
 8005978:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	88db      	ldrh	r3, [r3, #6]
 8005980:	461a      	mov	r2, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fa3d 	bl	8006e02 <USBD_CtlPrepareRx>
      break;
 8005988:	e006      	b.n	8005998 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f99b 	bl	8006cc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	75fb      	strb	r3, [r7, #23]
      break;
 8005996:	bf00      	nop
    }
    break;
 8005998:	e090      	b.n	8005abc <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b0b      	cmp	r3, #11
 80059a0:	d87c      	bhi.n	8005a9c <USBD_CUSTOM_HID_Setup+0x1d4>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	08005aab 	.word	0x08005aab
 80059b0:	08005a9d 	.word	0x08005a9d
 80059b4:	08005a9d 	.word	0x08005a9d
 80059b8:	08005a9d 	.word	0x08005a9d
 80059bc:	08005a9d 	.word	0x08005a9d
 80059c0:	08005a01 	.word	0x08005a01
 80059c4:	08005a9d 	.word	0x08005a9d
 80059c8:	08005a9d 	.word	0x08005a9d
 80059cc:	08005a9d 	.word	0x08005a9d
 80059d0:	08005a4f 	.word	0x08005a4f
 80059d4:	08005a77 	.word	0x08005a77
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d107      	bne.n	80059f2 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059e2:	f107 030e 	add.w	r3, r7, #14
 80059e6:	2202      	movs	r2, #2
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 f9dd 	bl	8006daa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80059f0:	e05c      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f967 	bl	8006cc8 <USBD_CtlError>
        ret = USBD_FAIL;
 80059fa:	2303      	movs	r3, #3
 80059fc:	75fb      	strb	r3, [r7, #23]
      break;
 80059fe:	e055      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	885b      	ldrh	r3, [r3, #2]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b22      	cmp	r3, #34	; 0x22
 8005a0a:	d10b      	bne.n	8005a24 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	88db      	ldrh	r3, [r3, #6]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	bf28      	it	cs
 8005a14:	2302      	movcs	r3, #2
 8005a16:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e00d      	b.n	8005a40 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b21      	cmp	r3, #33	; 0x21
 8005a2e:	d107      	bne.n	8005a40 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <USBD_CUSTOM_HID_Setup+0x200>)
 8005a32:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	88db      	ldrh	r3, [r3, #6]
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	bf28      	it	cs
 8005a3c:	2309      	movcs	r3, #9
 8005a3e:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a40:	8bfb      	ldrh	r3, [r7, #30]
 8005a42:	461a      	mov	r2, r3
 8005a44:	69b9      	ldr	r1, [r7, #24]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 f9af 	bl	8006daa <USBD_CtlSendData>
      break;
 8005a4c:	e02e      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d107      	bne.n	8005a68 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 f9a2 	bl	8006daa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a66:	e021      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 f92c 	bl	8006cc8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	75fb      	strb	r3, [r7, #23]
      break;
 8005a74:	e01a      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d106      	bne.n	8005a8e <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a8c:	e00e      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f919 	bl	8006cc8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a96:	2303      	movs	r3, #3
 8005a98:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9a:	e007      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 f912 	bl	8006cc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa8:	e000      	b.n	8005aac <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 8005aaa:	bf00      	nop
    }
    break;
 8005aac:	e006      	b.n	8005abc <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 f909 	bl	8006cc8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	75fb      	strb	r3, [r7, #23]
    break;
 8005aba:	bf00      	nop
  }
  return (uint8_t)ret;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200000c8 	.word	0x200000c8

08005acc <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e019      	b.n	8005b1c <USBD_CUSTOM_HID_SendReport+0x50>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aee:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d10f      	bne.n	8005b1a <USBD_CUSTOM_HID_SendReport+0x4e>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	7d1b      	ldrb	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <USBD_CUSTOM_HID_SendReport+0x4a>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2201      	movs	r2, #1
 8005b06:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	2181      	movs	r1, #129	; 0x81
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f001 fda7 	bl	8007662 <USBD_LL_Transmit>
 8005b14:	e001      	b.n	8005b1a <USBD_CUSTOM_HID_SendReport+0x4e>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <USBD_CUSTOM_HID_SendReport+0x50>
    }
  }
  return (uint8_t)USBD_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2229      	movs	r2, #41	; 0x29
 8005b30:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005b32:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000044 	.word	0x20000044

08005b44 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2229      	movs	r2, #41	; 0x29
 8005b50:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005b52:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000070 	.word	0x20000070

08005b64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2229      	movs	r2, #41	; 0x29
 8005b70:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	2000009c 	.word	0x2000009c

08005b84 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b96:	2200      	movs	r2, #0
 8005b98:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00e      	b.n	8005be0 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	7810      	ldrb	r0, [r2, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	7852      	ldrb	r2, [r2, #1]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00a      	b.n	8005c14 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	2302      	movs	r3, #2
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fd49 	bl	80076a4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10c      	bne.n	8005c4e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	7810      	ldrb	r0, [r2, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	7852      	ldrb	r2, [r2, #1]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	220a      	movs	r2, #10
 8005c64:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005c66:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	200000d4 	.word	0x200000d4

08005c78 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e004      	b.n	8005c96 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e025      	b.n	8005d06 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	79fa      	ldrb	r2, [r7, #7]
 8005cf8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 fb7c 	bl	80073f8 <USBD_LL_Init>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e010      	b.n	8005d48 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	f107 020e 	add.w	r2, r7, #14
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4798      	blx	r3
 8005d3e:	4602      	mov	r2, r0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fb99 	bl	8007490 <USBD_LL_Start>
 8005d5e:	4603      	mov	r3, r0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	4611      	mov	r1, r2
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
  }

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 ff2b 	bl	8006c54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d00e      	beq.n	8005e40 <USBD_LL_SetupStage+0x5a>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d302      	bcc.n	8005e2c <USBD_LL_SetupStage+0x46>
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d014      	beq.n	8005e54 <USBD_LL_SetupStage+0x6e>
 8005e2a:	e01d      	b.n	8005e68 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa17 	bl	8006268 <USBD_StdDevReq>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3e:	e020      	b.n	8005e82 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fa7b 	bl	8006344 <USBD_StdItfReq>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
      break;
 8005e52:	e016      	b.n	8005e82 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fab7 	bl	80063d0 <USBD_StdEPReq>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]
      break;
 8005e66:	e00c      	b.n	8005e82 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fb6a 	bl	8007550 <USBD_LL_StallEP>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	bf00      	nop
  }

  return ret;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	460b      	mov	r3, r1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e9a:	7afb      	ldrb	r3, [r7, #11]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d137      	bne.n	8005f10 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ea6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d14a      	bne.n	8005f48 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d913      	bls.n	8005ee6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	461a      	mov	r2, r3
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 ffac 	bl	8006e3c <USBD_CtlContinueRx>
 8005ee4:	e030      	b.n	8005f48 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d105      	bne.n	8005f08 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 ffa8 	bl	8006e5e <USBD_CtlSendStatus>
 8005f0e:	e01b      	b.n	8005f48 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d10e      	bne.n	8005f44 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	7afa      	ldrb	r2, [r7, #11]
 8005f30:	4611      	mov	r1, r2
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	4798      	blx	r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	e002      	b.n	8005f4a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e000      	b.n	8005f4a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d16a      	bne.n	800603c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d155      	bne.n	8006022 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d914      	bls.n	8005fac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 ff21 	bl	8006de0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 fb7d 	bl	80076a4 <USBD_LL_PrepareReceive>
 8005faa:	e03a      	b.n	8006022 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d11c      	bne.n	8005ff2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d316      	bcc.n	8005ff2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d20f      	bcs.n	8005ff2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 ff02 	bl	8006de0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2100      	movs	r1, #0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fb5a 	bl	80076a4 <USBD_LL_PrepareReceive>
 8005ff0:	e017      	b.n	8006022 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006004:	2b03      	cmp	r3, #3
 8006006:	d105      	bne.n	8006014 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f001 fa9a 	bl	8007550 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 ff31 	bl	8006e84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d123      	bne.n	8006074 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fe9b 	bl	8005d68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800603a:	e01b      	b.n	8006074 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800604e:	2b03      	cmp	r3, #3
 8006050:	d10e      	bne.n	8006070 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	7afa      	ldrb	r2, [r7, #11]
 800605c:	4611      	mov	r1, r2
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	e002      	b.n	8006076 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006070:	2303      	movs	r3, #3
 8006072:	e000      	b.n	8006076 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6852      	ldr	r2, [r2, #4]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	4611      	mov	r1, r2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	2200      	movs	r2, #0
 80060c6:	2100      	movs	r1, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f9fc 	bl	80074c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2240      	movs	r2, #64	; 0x40
 80060da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060de:	2340      	movs	r3, #64	; 0x40
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 f9ee 	bl	80074c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2204      	movs	r2, #4
 8006138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006158:	2b04      	cmp	r3, #4
 800615a:	d105      	bne.n	8006168 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	2b03      	cmp	r3, #3
 8006186:	d10b      	bne.n	80061a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	4611      	mov	r1, r2
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
  }

  return USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	3301      	adds	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800624a:	8a3b      	ldrh	r3, [r7, #16]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	b21a      	sxth	r2, r3
 8006250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006254:	4313      	orrs	r3, r2
 8006256:	b21b      	sxth	r3, r3
 8006258:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800625a:	89fb      	ldrh	r3, [r7, #14]
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800627e:	2b20      	cmp	r3, #32
 8006280:	d004      	beq.n	800628c <USBD_StdDevReq+0x24>
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d002      	beq.n	800628c <USBD_StdDevReq+0x24>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <USBD_StdDevReq+0x38>
 800628a:	e050      	b.n	800632e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
    break;
 800629e:	e04b      	b.n	8006338 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d83c      	bhi.n	8006322 <USBD_StdDevReq+0xba>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <USBD_StdDevReq+0x48>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006319 	.word	0x08006319
 80062b8:	08006323 	.word	0x08006323
 80062bc:	0800630f 	.word	0x0800630f
 80062c0:	08006323 	.word	0x08006323
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	08006323 	.word	0x08006323
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	080062ed 	.word	0x080062ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9ce 	bl	800667c <USBD_GetDescriptor>
      break;
 80062e0:	e024      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb33 	bl	8006950 <USBD_SetAddress>
      break;
 80062ea:	e01f      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb70 	bl	80069d4 <USBD_SetConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e018      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc0d 	bl	8006b1c <USBD_GetConfig>
      break;
 8006302:	e013      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc3c 	bl	8006b84 <USBD_GetStatus>
      break;
 800630c:	e00e      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fc6a 	bl	8006bea <USBD_SetFeature>
      break;
 8006316:	e009      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fc79 	bl	8006c12 <USBD_ClrFeature>
      break;
 8006320:	e004      	b.n	800632c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fccf 	bl	8006cc8 <USBD_CtlError>
      break;
 800632a:	bf00      	nop
    }
    break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fcc9 	bl	8006cc8 <USBD_CtlError>
    break;
 8006336:	bf00      	nop
  }

  return ret;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800635a:	2b20      	cmp	r3, #32
 800635c:	d003      	beq.n	8006366 <USBD_StdItfReq+0x22>
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d001      	beq.n	8006366 <USBD_StdItfReq+0x22>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12a      	bne.n	80063bc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636c:	3b01      	subs	r3, #1
 800636e:	2b02      	cmp	r3, #2
 8006370:	d81d      	bhi.n	80063ae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	889b      	ldrh	r3, [r3, #4]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d813      	bhi.n	80063a4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <USBD_StdItfReq+0x74>
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10d      	bne.n	80063b8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd5e 	bl	8006e5e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80063a2:	e009      	b.n	80063b8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc8e 	bl	8006cc8 <USBD_CtlError>
      break;
 80063ac:	e004      	b.n	80063b8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc89 	bl	8006cc8 <USBD_CtlError>
      break;
 80063b6:	e000      	b.n	80063ba <USBD_StdItfReq+0x76>
      break;
 80063b8:	bf00      	nop
    }
    break;
 80063ba:	e004      	b.n	80063c6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc82 	bl	8006cc8 <USBD_CtlError>
    break;
 80063c4:	bf00      	nop
  }

  return ret;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	889b      	ldrh	r3, [r3, #4]
 80063e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d004      	beq.n	80063fa <USBD_StdEPReq+0x2a>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d002      	beq.n	80063fa <USBD_StdEPReq+0x2a>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <USBD_StdEPReq+0x3e>
 80063f8:	e135      	b.n	8006666 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
    break;
 800640c:	e130      	b.n	8006670 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d03e      	beq.n	8006494 <USBD_StdEPReq+0xc4>
 8006416:	2b03      	cmp	r3, #3
 8006418:	d002      	beq.n	8006420 <USBD_StdEPReq+0x50>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d077      	beq.n	800650e <USBD_StdEPReq+0x13e>
 800641e:	e11c      	b.n	800665a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006426:	2b02      	cmp	r3, #2
 8006428:	d002      	beq.n	8006430 <USBD_StdEPReq+0x60>
 800642a:	2b03      	cmp	r3, #3
 800642c:	d015      	beq.n	800645a <USBD_StdEPReq+0x8a>
 800642e:	e02b      	b.n	8006488 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <USBD_StdEPReq+0x80>
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d009      	beq.n	8006450 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f885 	bl	8007550 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f881 	bl	8007550 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800644e:	e020      	b.n	8006492 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc38 	bl	8006cc8 <USBD_CtlError>
        break;
 8006458:	e01b      	b.n	8006492 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	885b      	ldrh	r3, [r3, #2]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10e      	bne.n	8006480 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <USBD_StdEPReq+0xb0>
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	2b80      	cmp	r3, #128	; 0x80
 800646c:	d008      	beq.n	8006480 <USBD_StdEPReq+0xb0>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88db      	ldrh	r3, [r3, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f868 	bl	8007550 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fcec 	bl	8006e5e <USBD_CtlSendStatus>

        break;
 8006486:	e004      	b.n	8006492 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fc1c 	bl	8006cc8 <USBD_CtlError>
        break;
 8006490:	bf00      	nop
      }
      break;
 8006492:	e0e7      	b.n	8006664 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649a:	2b02      	cmp	r3, #2
 800649c:	d002      	beq.n	80064a4 <USBD_StdEPReq+0xd4>
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d015      	beq.n	80064ce <USBD_StdEPReq+0xfe>
 80064a2:	e02d      	b.n	8006500 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <USBD_StdEPReq+0xf4>
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d009      	beq.n	80064c4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f84b 	bl	8007550 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 f847 	bl	8007550 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80064c2:	e023      	b.n	800650c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fbfe 	bl	8006cc8 <USBD_CtlError>
        break;
 80064cc:	e01e      	b.n	800650c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	885b      	ldrh	r3, [r3, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d119      	bne.n	800650a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 f852 	bl	800758e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fcb7 	bl	8006e5e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
        }
        break;
 80064fe:	e004      	b.n	800650a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fbe0 	bl	8006cc8 <USBD_CtlError>
        break;
 8006508:	e000      	b.n	800650c <USBD_StdEPReq+0x13c>
        break;
 800650a:	bf00      	nop
      }
      break;
 800650c:	e0aa      	b.n	8006664 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	2b02      	cmp	r3, #2
 8006516:	d002      	beq.n	800651e <USBD_StdEPReq+0x14e>
 8006518:	2b03      	cmp	r3, #3
 800651a:	d032      	beq.n	8006582 <USBD_StdEPReq+0x1b2>
 800651c:	e097      	b.n	800664e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <USBD_StdEPReq+0x164>
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d004      	beq.n	8006534 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fbcb 	bl	8006cc8 <USBD_CtlError>
          break;
 8006532:	e091      	b.n	8006658 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da0b      	bge.n	8006554 <USBD_StdEPReq+0x184>
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3310      	adds	r3, #16
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	e00b      	b.n	800656c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2202      	movs	r2, #2
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fc15 	bl	8006daa <USBD_CtlSendData>
        break;
 8006580:	e06a      	b.n	8006658 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da11      	bge.n	80065ae <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3324      	adds	r3, #36	; 0x24
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d117      	bne.n	80065d4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb8e 	bl	8006cc8 <USBD_CtlError>
            break;
 80065ac:	e054      	b.n	8006658 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb7b 	bl	8006cc8 <USBD_CtlError>
            break;
 80065d2:	e041      	b.n	8006658 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	da0b      	bge.n	80065f4 <USBD_StdEPReq+0x224>
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	3310      	adds	r3, #16
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	3304      	adds	r3, #4
 80065f2:	e00b      	b.n	800660c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <USBD_StdEPReq+0x24a>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d103      	bne.n	8006622 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e00e      	b.n	8006640 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ffd0 	bl	80075cc <USBD_LL_IsStallEP>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	e002      	b.n	8006640 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2202      	movs	r2, #2
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fbaf 	bl	8006daa <USBD_CtlSendData>
          break;
 800664c:	e004      	b.n	8006658 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb39 	bl	8006cc8 <USBD_CtlError>
        break;
 8006656:	bf00      	nop
      }
      break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fb33 	bl	8006cc8 <USBD_CtlError>
      break;
 8006662:	bf00      	nop
    }
    break;
 8006664:	e004      	b.n	8006670 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb2d 	bl	8006cc8 <USBD_CtlError>
    break;
 800666e:	bf00      	nop
  }

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	2b06      	cmp	r3, #6
 800669e:	f200 8128 	bhi.w	80068f2 <USBD_GetDescriptor+0x276>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBD_GetDescriptor+0x2c>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	080068f3 	.word	0x080068f3
 80066b8:	080068f3 	.word	0x080068f3
 80066bc:	08006893 	.word	0x08006893
 80066c0:	080068bf 	.word	0x080068bf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
    break;
 80066da:	e112      	b.n	8006902 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7c1b      	ldrb	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10d      	bne.n	8006700 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f107 0208 	add.w	r2, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	2202      	movs	r2, #2
 80066fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80066fe:	e100      	b.n	8006902 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f107 0208 	add.w	r2, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
    break;
 800671a:	e0f2      	b.n	8006902 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b05      	cmp	r3, #5
 8006724:	f200 80ac 	bhi.w	8006880 <USBD_GetDescriptor+0x204>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <USBD_GetDescriptor+0xb4>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006749 	.word	0x08006749
 8006734:	0800677d 	.word	0x0800677d
 8006738:	080067b1 	.word	0x080067b1
 800673c:	080067e5 	.word	0x080067e5
 8006740:	08006819 	.word	0x08006819
 8006744:	0800684d 	.word	0x0800684d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800676a:	e091      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 faaa 	bl	8006cc8 <USBD_CtlError>
        err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
      break;
 800677a:	e089      	b.n	8006890 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800679e:	e077      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa90 	bl	8006cc8 <USBD_CtlError>
        err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
      break;
 80067ae:	e06f      	b.n	8006890 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d2:	e05d      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa76 	bl	8006cc8 <USBD_CtlError>
        err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
      break;
 80067e2:	e055      	b.n	8006890 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006806:	e043      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa5c 	bl	8006cc8 <USBD_CtlError>
        err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
      break;
 8006816:	e03b      	b.n	8006890 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800683a:	e029      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa42 	bl	8006cc8 <USBD_CtlError>
        err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
      break;
 800684a:	e021      	b.n	8006890 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7c12      	ldrb	r2, [r2, #16]
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800686e:	e00f      	b.n	8006890 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa28 	bl	8006cc8 <USBD_CtlError>
        err++;
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	3301      	adds	r3, #1
 800687c:	72fb      	strb	r3, [r7, #11]
      break;
 800687e:	e007      	b.n	8006890 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa20 	bl	8006cc8 <USBD_CtlError>
      err++;
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	3301      	adds	r3, #1
 800688c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800688e:	bf00      	nop
    }
    break;
 8006890:	e037      	b.n	8006902 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7c1b      	ldrb	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	f107 0208 	add.w	r2, r7, #8
 80068a6:	4610      	mov	r0, r2
 80068a8:	4798      	blx	r3
 80068aa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80068ac:	e029      	b.n	8006902 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa09 	bl	8006cc8 <USBD_CtlError>
      err++;
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	3301      	adds	r3, #1
 80068ba:	72fb      	strb	r3, [r7, #11]
    break;
 80068bc:	e021      	b.n	8006902 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	2207      	movs	r2, #7
 80068de:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80068e0:	e00f      	b.n	8006902 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9ef 	bl	8006cc8 <USBD_CtlError>
      err++;
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	3301      	adds	r3, #1
 80068ee:	72fb      	strb	r3, [r7, #11]
    break;
 80068f0:	e007      	b.n	8006902 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9e7 	bl	8006cc8 <USBD_CtlError>
    err++;
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	3301      	adds	r3, #1
 80068fe:	72fb      	strb	r3, [r7, #11]
    break;
 8006900:	bf00      	nop
  }

  if (err != 0U)
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11e      	bne.n	8006946 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	88db      	ldrh	r3, [r3, #6]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006910:	893b      	ldrh	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00e      	beq.n	8006934 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88da      	ldrh	r2, [r3, #6]
 800691a:	893b      	ldrh	r3, [r7, #8]
 800691c:	4293      	cmp	r3, r2
 800691e:	bf28      	it	cs
 8006920:	4613      	movcs	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	461a      	mov	r2, r3
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa3c 	bl	8006daa <USBD_CtlSendData>
 8006932:	e009      	b.n	8006948 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f9c6 	bl	8006cc8 <USBD_CtlError>
 800693c:	e004      	b.n	8006948 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa8d 	bl	8006e5e <USBD_CtlSendStatus>
 8006944:	e000      	b.n	8006948 <USBD_GetDescriptor+0x2cc>
    return;
 8006946:	bf00      	nop
    }
  }
}
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	889b      	ldrh	r3, [r3, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d130      	bne.n	80069c4 <USBD_SetAddress+0x74>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d12c      	bne.n	80069c4 <USBD_SetAddress+0x74>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	2b7f      	cmp	r3, #127	; 0x7f
 8006970:	d828      	bhi.n	80069c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	2b03      	cmp	r3, #3
 8006986:	d104      	bne.n	8006992 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f99c 	bl	8006cc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006990:	e01c      	b.n	80069cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fe40 	bl	8007624 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fa5a 	bl	8006e5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	e008      	b.n	80069cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e003      	b.n	80069cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f97e 	bl	8006cc8 <USBD_CtlError>
  }
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	885b      	ldrh	r3, [r3, #2]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b4b      	ldr	r3, [pc, #300]	; (8006b18 <USBD_SetConfig+0x144>)
 80069ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069ec:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <USBD_SetConfig+0x144>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d905      	bls.n	8006a00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f966 	bl	8006cc8 <USBD_CtlError>
    return USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e087      	b.n	8006b10 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d002      	beq.n	8006a10 <USBD_SetConfig+0x3c>
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d025      	beq.n	8006a5a <USBD_SetConfig+0x86>
 8006a0e:	e071      	b.n	8006af4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006a10:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01c      	beq.n	8006a52 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006a18:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff f9a8 	bl	8005d7e <USBD_SetClassConfig>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f944 	bl	8006cc8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a40:	e065      	b.n	8006b0e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa0b 	bl	8006e5e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a50:	e05d      	b.n	8006b0e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa03 	bl	8006e5e <USBD_CtlSendStatus>
    break;
 8006a58:	e059      	b.n	8006b0e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006a5a:	4b2f      	ldr	r3, [pc, #188]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d112      	bne.n	8006a88 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006a6a:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff f99b 	bl	8005db6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9ec 	bl	8006e5e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a86:	e042      	b.n	8006b0e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006a88:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <USBD_SetConfig+0x144>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d02a      	beq.n	8006aec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff f989 	bl	8005db6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006aa4:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <USBD_SetConfig+0x144>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aae:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <USBD_SetConfig+0x144>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff f962 	bl	8005d7e <USBD_SetClassConfig>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00f      	beq.n	8006ae4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8fe 	bl	8006cc8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff f96e 	bl	8005db6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ae2:	e014      	b.n	8006b0e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9ba 	bl	8006e5e <USBD_CtlSendStatus>
    break;
 8006aea:	e010      	b.n	8006b0e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9b6 	bl	8006e5e <USBD_CtlSendStatus>
    break;
 8006af2:	e00c      	b.n	8006b0e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8e6 	bl	8006cc8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <USBD_SetConfig+0x144>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff f957 	bl	8005db6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b0c:	bf00      	nop
  }

  return ret;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200001cc 	.word	0x200001cc

08006b1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	88db      	ldrh	r3, [r3, #6]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d004      	beq.n	8006b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8c9 	bl	8006cc8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006b36:	e021      	b.n	8006b7c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	db17      	blt.n	8006b72 <USBD_GetConfig+0x56>
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	dd02      	ble.n	8006b4c <USBD_GetConfig+0x30>
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d00b      	beq.n	8006b62 <USBD_GetConfig+0x46>
 8006b4a:	e012      	b.n	8006b72 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3308      	adds	r3, #8
 8006b56:	2201      	movs	r2, #1
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f925 	bl	8006daa <USBD_CtlSendData>
      break;
 8006b60:	e00c      	b.n	8006b7c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	2201      	movs	r2, #1
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f91d 	bl	8006daa <USBD_CtlSendData>
      break;
 8006b70:	e004      	b.n	8006b7c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f8a7 	bl	8006cc8 <USBD_CtlError>
      break;
 8006b7a:	bf00      	nop
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	3b01      	subs	r3, #1
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d81e      	bhi.n	8006bd8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d004      	beq.n	8006bac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f88f 	bl	8006cc8 <USBD_CtlError>
      break;
 8006baa:	e01a      	b.n	8006be2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f043 0202 	orr.w	r2, r3, #2
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	2202      	movs	r2, #2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f8ea 	bl	8006daa <USBD_CtlSendData>
    break;
 8006bd6:	e004      	b.n	8006be2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f874 	bl	8006cc8 <USBD_CtlError>
    break;
 8006be0:	bf00      	nop
  }
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	885b      	ldrh	r3, [r3, #2]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d106      	bne.n	8006c0a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f92a 	bl	8006e5e <USBD_CtlSendStatus>
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c22:	3b01      	subs	r3, #1
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d80b      	bhi.n	8006c40 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10c      	bne.n	8006c4a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f910 	bl	8006e5e <USBD_CtlSendStatus>
      }
      break;
 8006c3e:	e004      	b.n	8006c4a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f840 	bl	8006cc8 <USBD_CtlError>
      break;
 8006c48:	e000      	b.n	8006c4c <USBD_ClrFeature+0x3a>
      break;
 8006c4a:	bf00      	nop
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff fad4 	bl	800622c <SWAPBYTE>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff fac7 	bl	800622c <SWAPBYTE>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff faba 	bl	800622c <SWAPBYTE>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	80da      	strh	r2, [r3, #6]
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cd2:	2180      	movs	r1, #128	; 0x80
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc3b 	bl	8007550 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc37 	bl	8007550 <USBD_LL_StallEP>
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d036      	beq.n	8006d6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d04:	6938      	ldr	r0, [r7, #16]
 8006d06:	f000 f836 	bl	8006d76 <USBD_GetLen>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	7812      	ldrb	r2, [r2, #0]
 8006d22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	3301      	adds	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4413      	add	r3, r2
 8006d30:	2203      	movs	r2, #3
 8006d32:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	3301      	adds	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d3a:	e013      	b.n	8006d64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	613b      	str	r3, [r7, #16]
    idx++;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	3301      	adds	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	3301      	adds	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e7      	bne.n	8006d3c <USBD_GetString+0x52>
 8006d6c:	e000      	b.n	8006d70 <USBD_GetString+0x86>
    return;
 8006d6e:	bf00      	nop
  }
}
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d86:	e005      	b.n	8006d94 <USBD_GetLen+0x1e>
  {
    len++;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3301      	adds	r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f5      	bne.n	8006d88 <USBD_GetLen+0x12>
  }

  return len;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fc46 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	2100      	movs	r1, #0
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fc35 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2203      	movs	r2, #3
 8006e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fc39 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fc28 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbf4 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2205      	movs	r2, #5
 8006e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e94:	2300      	movs	r3, #0
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc02 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4912      	ldr	r1, [pc, #72]	; (8006efc <MX_USB_DEVICE_Init+0x50>)
 8006eb4:	4812      	ldr	r0, [pc, #72]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eb6:	f7fe fef4 	bl	8005ca2 <USBD_Init>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ec0:	f7fa ff10 	bl	8001ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006ec4:	490f      	ldr	r1, [pc, #60]	; (8006f04 <MX_USB_DEVICE_Init+0x58>)
 8006ec6:	480e      	ldr	r0, [pc, #56]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006ec8:	f7fe ff21 	bl	8005d0e <USBD_RegisterClass>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ed2:	f7fa ff07 	bl	8001ce4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006ed6:	490c      	ldr	r1, [pc, #48]	; (8006f08 <MX_USB_DEVICE_Init+0x5c>)
 8006ed8:	4809      	ldr	r0, [pc, #36]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eda:	f7fe fecd 	bl	8005c78 <USBD_CUSTOM_HID_RegisterInterface>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ee4:	f7fa fefe 	bl	8001ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ee8:	4805      	ldr	r0, [pc, #20]	; (8006f00 <MX_USB_DEVICE_Init+0x54>)
 8006eea:	f7fe ff31 	bl	8005d50 <USBD_Start>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ef4:	f7fa fef6 	bl	8001ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	200000f4 	.word	0x200000f4
 8006f00:	200001e0 	.word	0x200001e0
 8006f04:	2000000c 	.word	0x2000000c
 8006f08:	200000e4 	.word	0x200000e4

08006f0c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006f20:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	460a      	mov	r2, r1
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8006f3c:	4803      	ldr	r0, [pc, #12]	; (8006f4c <CUSTOM_HID_OutEvent_FS+0x20>)
 8006f3e:	f7fe fe53 	bl	8005be8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8006f42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	200001e0 	.word	0x200001e0

08006f50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2212      	movs	r2, #18
 8006f60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f62:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000110 	.word	0x20000110

08006f74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2204      	movs	r2, #4
 8006f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f86:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000124 	.word	0x20000124

08006f98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	6039      	str	r1, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4907      	ldr	r1, [pc, #28]	; (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006fae:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fb0:	f7ff fe9b 	bl	8006cea <USBD_GetString>
 8006fb4:	e004      	b.n	8006fc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4904      	ldr	r1, [pc, #16]	; (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006fba:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fbc:	f7ff fe95 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200004b0 	.word	0x200004b0
 8006fd0:	080086fc 	.word	0x080086fc

08006fd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	4904      	ldr	r1, [pc, #16]	; (8006ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fe4:	4804      	ldr	r0, [pc, #16]	; (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fe6:	f7ff fe80 	bl	8006cea <USBD_GetString>
  return USBD_StrDesc;
 8006fea:	4b02      	ldr	r3, [pc, #8]	; (8006ff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	200004b0 	.word	0x200004b0
 8006ff8:	0800871c 	.word	0x0800871c

08006ffc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	221a      	movs	r2, #26
 800700c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800700e:	f000 f843 	bl	8007098 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007012:	4b02      	ldr	r3, [pc, #8]	; (800701c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000128 	.word	0x20000128

08007020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4907      	ldr	r1, [pc, #28]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007036:	4808      	ldr	r0, [pc, #32]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007038:	f7ff fe57 	bl	8006cea <USBD_GetString>
 800703c:	e004      	b.n	8007048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4904      	ldr	r1, [pc, #16]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007042:	4805      	ldr	r0, [pc, #20]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007044:	f7ff fe51 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200004b0 	.word	0x200004b0
 8007058:	08008730 	.word	0x08008730

0800705c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	4907      	ldr	r1, [pc, #28]	; (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007072:	4808      	ldr	r0, [pc, #32]	; (8007094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007074:	f7ff fe39 	bl	8006cea <USBD_GetString>
 8007078:	e004      	b.n	8007084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	4904      	ldr	r1, [pc, #16]	; (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800707e:	4805      	ldr	r0, [pc, #20]	; (8007094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007080:	f7ff fe33 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	200004b0 	.word	0x200004b0
 8007094:	08008744 	.word	0x08008744

08007098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800709e:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <Get_SerialNum+0x44>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <Get_SerialNum+0x48>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <Get_SerialNum+0x4c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070be:	2208      	movs	r2, #8
 80070c0:	4909      	ldr	r1, [pc, #36]	; (80070e8 <Get_SerialNum+0x50>)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f814 	bl	80070f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070c8:	2204      	movs	r2, #4
 80070ca:	4908      	ldr	r1, [pc, #32]	; (80070ec <Get_SerialNum+0x54>)
 80070cc:	68b8      	ldr	r0, [r7, #8]
 80070ce:	f000 f80f 	bl	80070f0 <IntToUnicode>
  }
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	1fff7a10 	.word	0x1fff7a10
 80070e0:	1fff7a14 	.word	0x1fff7a14
 80070e4:	1fff7a18 	.word	0x1fff7a18
 80070e8:	2000012a 	.word	0x2000012a
 80070ec:	2000013a 	.word	0x2000013a

080070f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
 8007106:	e027      	b.n	8007158 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	2b09      	cmp	r3, #9
 800710e:	d80b      	bhi.n	8007128 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	0f1b      	lsrs	r3, r3, #28
 8007114:	b2da      	uxtb	r2, r3
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4619      	mov	r1, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	440b      	add	r3, r1
 8007120:	3230      	adds	r2, #48	; 0x30
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e00a      	b.n	800713e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4619      	mov	r1, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	440b      	add	r3, r1
 8007138:	3237      	adds	r2, #55	; 0x37
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	3301      	adds	r3, #1
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
 8007158:	7dfa      	ldrb	r2, [r7, #23]
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3d3      	bcc.n	8007108 <IntToUnicode+0x18>
  }
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	; 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007174:	f107 0314 	add.w	r3, r7, #20
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	605a      	str	r2, [r3, #4]
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800718c:	d13a      	bne.n	8007204 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_PCD_MspInit+0xa0>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	4a1d      	ldr	r2, [pc, #116]	; (800720c <HAL_PCD_MspInit+0xa0>)
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	6313      	str	r3, [r2, #48]	; 0x30
 800719e:	4b1b      	ldr	r3, [pc, #108]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b0:	2302      	movs	r3, #2
 80071b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b8:	2303      	movs	r3, #3
 80071ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071bc:	230a      	movs	r3, #10
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4619      	mov	r1, r3
 80071c6:	4812      	ldr	r0, [pc, #72]	; (8007210 <HAL_PCD_MspInit+0xa4>)
 80071c8:	f7fb f874 	bl	80022b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071cc:	4b0f      	ldr	r3, [pc, #60]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	4a0e      	ldr	r2, [pc, #56]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	6353      	str	r3, [r2, #52]	; 0x34
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071e6:	6453      	str	r3, [r2, #68]	; 0x44
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <HAL_PCD_MspInit+0xa0>)
 80071ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	2043      	movs	r0, #67	; 0x43
 80071fa:	f7fb f824 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071fe:	2043      	movs	r0, #67	; 0x43
 8007200:	f7fb f83d 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007204:	bf00      	nop
 8007206:	3728      	adds	r7, #40	; 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40023800 	.word	0x40023800
 8007210:	40020000 	.word	0x40020000

08007214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007228:	4619      	mov	r1, r3
 800722a:	4610      	mov	r0, r2
 800722c:	f7fe fddb 	bl	8005de6 <USBD_LL_SetupStage>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	4619      	mov	r1, r3
 8007262:	f7fe fe13 	bl	8005e8c <USBD_LL_DataOutStage>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	3348      	adds	r3, #72	; 0x48
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	4619      	mov	r1, r3
 8007296:	f7fe fe5c 	bl	8005f52 <USBD_LL_DataInStage>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe ff60 	bl	8006176 <USBD_LL_SOF>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e008      	b.n	80072ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d102      	bne.n	80072e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
 80072e4:	e001      	b.n	80072ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072e6:	f7fa fcfd 	bl	8001ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe ff03 	bl	8006100 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe febc 	bl	800607e <USBD_LL_Reset>
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fefe 	bl	8006120 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <HAL_PCD_SuspendCallback+0x48>)
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	4a03      	ldr	r2, [pc, #12]	; (8007358 <HAL_PCD_SuspendCallback+0x48>)
 800734a:	f043 0306 	orr.w	r3, r3, #6
 800734e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed00 	.word	0xe000ed00

0800735c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe feed 	bl	800614a <USBD_LL_Resume>
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe ff18 	bl	80061c4 <USBD_LL_IsoOUTIncomplete>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fef9 	bl	80061aa <USBD_LL_IsoINIncomplete>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe ff05 	bl	80061de <USBD_LL_DevConnected>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe ff02 	bl	80061f4 <USBD_LL_DevDisconnected>
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d13c      	bne.n	8007482 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007408:	4a20      	ldr	r2, [pc, #128]	; (800748c <USBD_LL_Init+0x94>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1e      	ldr	r2, [pc, #120]	; (800748c <USBD_LL_Init+0x94>)
 8007414:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007418:	4b1c      	ldr	r3, [pc, #112]	; (800748c <USBD_LL_Init+0x94>)
 800741a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800741e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <USBD_LL_Init+0x94>)
 8007422:	2204      	movs	r2, #4
 8007424:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <USBD_LL_Init+0x94>)
 8007428:	2202      	movs	r2, #2
 800742a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <USBD_LL_Init+0x94>)
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <USBD_LL_Init+0x94>)
 8007434:	2202      	movs	r2, #2
 8007436:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <USBD_LL_Init+0x94>)
 800743a:	2200      	movs	r2, #0
 800743c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <USBD_LL_Init+0x94>)
 8007440:	2200      	movs	r2, #0
 8007442:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <USBD_LL_Init+0x94>)
 8007446:	2200      	movs	r2, #0
 8007448:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <USBD_LL_Init+0x94>)
 800744c:	2200      	movs	r2, #0
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <USBD_LL_Init+0x94>)
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007456:	480d      	ldr	r0, [pc, #52]	; (800748c <USBD_LL_Init+0x94>)
 8007458:	f7fb f8f7 	bl	800264a <HAL_PCD_Init>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007462:	f7fa fc3f 	bl	8001ce4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	4808      	ldr	r0, [pc, #32]	; (800748c <USBD_LL_Init+0x94>)
 800746a:	f7fc fa3c 	bl	80038e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	2100      	movs	r1, #0
 8007472:	4806      	ldr	r0, [pc, #24]	; (800748c <USBD_LL_Init+0x94>)
 8007474:	f7fc f9f0 	bl	8003858 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	2101      	movs	r1, #1
 800747c:	4803      	ldr	r0, [pc, #12]	; (800748c <USBD_LL_Init+0x94>)
 800747e:	f7fc f9eb 	bl	8003858 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200006b0 	.word	0x200006b0

08007490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fb f9ec 	bl	8002884 <HAL_PCD_Start>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f918 	bl	80076e8 <USBD_Get_USB_Status>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	461a      	mov	r2, r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	70fb      	strb	r3, [r7, #3]
 80074d8:	460b      	mov	r3, r1
 80074da:	70bb      	strb	r3, [r7, #2]
 80074dc:	4613      	mov	r3, r2
 80074de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074ee:	78bb      	ldrb	r3, [r7, #2]
 80074f0:	883a      	ldrh	r2, [r7, #0]
 80074f2:	78f9      	ldrb	r1, [r7, #3]
 80074f4:	f7fb fdd0 	bl	8003098 <HAL_PCD_EP_Open>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f8f2 	bl	80076e8 <USBD_Get_USB_Status>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7fb fe19 	bl	8003168 <HAL_PCD_EP_Close>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f8d3 	bl	80076e8 <USBD_Get_USB_Status>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007546:	7bbb      	ldrb	r3, [r7, #14]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f7fb fed9 	bl	8003326 <HAL_PCD_EP_SetStall>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f8b4 	bl	80076e8 <USBD_Get_USB_Status>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007584:	7bbb      	ldrb	r3, [r7, #14]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb ff1e 	bl	80033ee <HAL_PCD_EP_ClrStall>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f895 	bl	80076e8 <USBD_Get_USB_Status>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80075e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0b      	bge.n	8007600 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	333e      	adds	r3, #62	; 0x3e
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	e00b      	b.n	8007618 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fb fd03 	bl	800304e <HAL_PCD_SetAddress>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f84a 	bl	80076e8 <USBD_Get_USB_Status>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007658:	7bbb      	ldrb	r3, [r7, #14]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007680:	7af9      	ldrb	r1, [r7, #11]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	f7fb fe04 	bl	8003292 <HAL_PCD_EP_Transmit>
 800768a:	4603      	mov	r3, r0
 800768c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f829 	bl	80076e8 <USBD_Get_USB_Status>
 8007696:	4603      	mov	r3, r0
 8007698:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800769a:	7dbb      	ldrb	r3, [r7, #22]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	460b      	mov	r3, r1
 80076b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076c2:	7af9      	ldrb	r1, [r7, #11]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f7fb fd98 	bl	80031fc <HAL_PCD_EP_Receive>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f808 	bl	80076e8 <USBD_Get_USB_Status>
 80076d8:	4603      	mov	r3, r0
 80076da:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d817      	bhi.n	800772c <USBD_Get_USB_Status+0x44>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBD_Get_USB_Status+0x1c>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007715 	.word	0x08007715
 8007708:	0800771b 	.word	0x0800771b
 800770c:	08007721 	.word	0x08007721
 8007710:	08007727 	.word	0x08007727
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73fb      	strb	r3, [r7, #15]
    break;
 8007718:	e00b      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
    break;
 800771e:	e008      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	e005      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007726:	2303      	movs	r3, #3
 8007728:	73fb      	strb	r3, [r7, #15]
    break;
 800772a:	e002      	b.n	8007732 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800772c:	2303      	movs	r3, #3
 800772e:	73fb      	strb	r3, [r7, #15]
    break;
 8007730:	bf00      	nop
  }
  return usb_status;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <__errno>:
 8007740:	4b01      	ldr	r3, [pc, #4]	; (8007748 <__errno+0x8>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000144 	.word	0x20000144

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4e0d      	ldr	r6, [pc, #52]	; (8007784 <__libc_init_array+0x38>)
 8007750:	4c0d      	ldr	r4, [pc, #52]	; (8007788 <__libc_init_array+0x3c>)
 8007752:	1ba4      	subs	r4, r4, r6
 8007754:	10a4      	asrs	r4, r4, #2
 8007756:	2500      	movs	r5, #0
 8007758:	42a5      	cmp	r5, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	4e0b      	ldr	r6, [pc, #44]	; (800778c <__libc_init_array+0x40>)
 800775e:	4c0c      	ldr	r4, [pc, #48]	; (8007790 <__libc_init_array+0x44>)
 8007760:	f000 ff78 	bl	8008654 <_init>
 8007764:	1ba4      	subs	r4, r4, r6
 8007766:	10a4      	asrs	r4, r4, #2
 8007768:	2500      	movs	r5, #0
 800776a:	42a5      	cmp	r5, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007774:	4798      	blx	r3
 8007776:	3501      	adds	r5, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800777e:	4798      	blx	r3
 8007780:	3501      	adds	r5, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	0800880c 	.word	0x0800880c
 8007788:	0800880c 	.word	0x0800880c
 800778c:	0800880c 	.word	0x0800880c
 8007790:	08008810 	.word	0x08008810

08007794 <malloc>:
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <malloc+0xc>)
 8007796:	4601      	mov	r1, r0
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f000 b861 	b.w	8007860 <_malloc_r>
 800779e:	bf00      	nop
 80077a0:	20000144 	.word	0x20000144

080077a4 <free>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <free+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 b80b 	b.w	80077c4 <_free_r>
 80077ae:	bf00      	nop
 80077b0:	20000144 	.word	0x20000144

080077b4 <memset>:
 80077b4:	4402      	add	r2, r0
 80077b6:	4603      	mov	r3, r0
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d100      	bne.n	80077be <memset+0xa>
 80077bc:	4770      	bx	lr
 80077be:	f803 1b01 	strb.w	r1, [r3], #1
 80077c2:	e7f9      	b.n	80077b8 <memset+0x4>

080077c4 <_free_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4605      	mov	r5, r0
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d045      	beq.n	8007858 <_free_r+0x94>
 80077cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d0:	1f0c      	subs	r4, r1, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfb8      	it	lt
 80077d6:	18e4      	addlt	r4, r4, r3
 80077d8:	f000 fbc6 	bl	8007f68 <__malloc_lock>
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <_free_r+0x98>)
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	4610      	mov	r0, r2
 80077e2:	b933      	cbnz	r3, 80077f2 <_free_r+0x2e>
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	6014      	str	r4, [r2, #0]
 80077e8:	4628      	mov	r0, r5
 80077ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ee:	f000 bbbc 	b.w	8007f6a <__malloc_unlock>
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	d90c      	bls.n	8007810 <_free_r+0x4c>
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	1862      	adds	r2, r4, r1
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bf04      	itt	eq
 80077fe:	681a      	ldreq	r2, [r3, #0]
 8007800:	685b      	ldreq	r3, [r3, #4]
 8007802:	6063      	str	r3, [r4, #4]
 8007804:	bf04      	itt	eq
 8007806:	1852      	addeq	r2, r2, r1
 8007808:	6022      	streq	r2, [r4, #0]
 800780a:	6004      	str	r4, [r0, #0]
 800780c:	e7ec      	b.n	80077e8 <_free_r+0x24>
 800780e:	4613      	mov	r3, r2
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	b10a      	cbz	r2, 8007818 <_free_r+0x54>
 8007814:	42a2      	cmp	r2, r4
 8007816:	d9fa      	bls.n	800780e <_free_r+0x4a>
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	1858      	adds	r0, r3, r1
 800781c:	42a0      	cmp	r0, r4
 800781e:	d10b      	bne.n	8007838 <_free_r+0x74>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	4401      	add	r1, r0
 8007824:	1858      	adds	r0, r3, r1
 8007826:	4282      	cmp	r2, r0
 8007828:	6019      	str	r1, [r3, #0]
 800782a:	d1dd      	bne.n	80077e8 <_free_r+0x24>
 800782c:	6810      	ldr	r0, [r2, #0]
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	4401      	add	r1, r0
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e7d7      	b.n	80077e8 <_free_r+0x24>
 8007838:	d902      	bls.n	8007840 <_free_r+0x7c>
 800783a:	230c      	movs	r3, #12
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	e7d3      	b.n	80077e8 <_free_r+0x24>
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	1821      	adds	r1, r4, r0
 8007844:	428a      	cmp	r2, r1
 8007846:	bf04      	itt	eq
 8007848:	6811      	ldreq	r1, [r2, #0]
 800784a:	6852      	ldreq	r2, [r2, #4]
 800784c:	6062      	str	r2, [r4, #4]
 800784e:	bf04      	itt	eq
 8007850:	1809      	addeq	r1, r1, r0
 8007852:	6021      	streq	r1, [r4, #0]
 8007854:	605c      	str	r4, [r3, #4]
 8007856:	e7c7      	b.n	80077e8 <_free_r+0x24>
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	bf00      	nop
 800785c:	200001d0 	.word	0x200001d0

08007860 <_malloc_r>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	1ccd      	adds	r5, r1, #3
 8007864:	f025 0503 	bic.w	r5, r5, #3
 8007868:	3508      	adds	r5, #8
 800786a:	2d0c      	cmp	r5, #12
 800786c:	bf38      	it	cc
 800786e:	250c      	movcc	r5, #12
 8007870:	2d00      	cmp	r5, #0
 8007872:	4606      	mov	r6, r0
 8007874:	db01      	blt.n	800787a <_malloc_r+0x1a>
 8007876:	42a9      	cmp	r1, r5
 8007878:	d903      	bls.n	8007882 <_malloc_r+0x22>
 800787a:	230c      	movs	r3, #12
 800787c:	6033      	str	r3, [r6, #0]
 800787e:	2000      	movs	r0, #0
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	f000 fb71 	bl	8007f68 <__malloc_lock>
 8007886:	4a21      	ldr	r2, [pc, #132]	; (800790c <_malloc_r+0xac>)
 8007888:	6814      	ldr	r4, [r2, #0]
 800788a:	4621      	mov	r1, r4
 800788c:	b991      	cbnz	r1, 80078b4 <_malloc_r+0x54>
 800788e:	4c20      	ldr	r4, [pc, #128]	; (8007910 <_malloc_r+0xb0>)
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	b91b      	cbnz	r3, 800789c <_malloc_r+0x3c>
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f8b9 	bl	8007a0c <_sbrk_r>
 800789a:	6020      	str	r0, [r4, #0]
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f8b4 	bl	8007a0c <_sbrk_r>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d124      	bne.n	80078f2 <_malloc_r+0x92>
 80078a8:	230c      	movs	r3, #12
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	4630      	mov	r0, r6
 80078ae:	f000 fb5c 	bl	8007f6a <__malloc_unlock>
 80078b2:	e7e4      	b.n	800787e <_malloc_r+0x1e>
 80078b4:	680b      	ldr	r3, [r1, #0]
 80078b6:	1b5b      	subs	r3, r3, r5
 80078b8:	d418      	bmi.n	80078ec <_malloc_r+0x8c>
 80078ba:	2b0b      	cmp	r3, #11
 80078bc:	d90f      	bls.n	80078de <_malloc_r+0x7e>
 80078be:	600b      	str	r3, [r1, #0]
 80078c0:	50cd      	str	r5, [r1, r3]
 80078c2:	18cc      	adds	r4, r1, r3
 80078c4:	4630      	mov	r0, r6
 80078c6:	f000 fb50 	bl	8007f6a <__malloc_unlock>
 80078ca:	f104 000b 	add.w	r0, r4, #11
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	f020 0007 	bic.w	r0, r0, #7
 80078d4:	1ac3      	subs	r3, r0, r3
 80078d6:	d0d3      	beq.n	8007880 <_malloc_r+0x20>
 80078d8:	425a      	negs	r2, r3
 80078da:	50e2      	str	r2, [r4, r3]
 80078dc:	e7d0      	b.n	8007880 <_malloc_r+0x20>
 80078de:	428c      	cmp	r4, r1
 80078e0:	684b      	ldr	r3, [r1, #4]
 80078e2:	bf16      	itet	ne
 80078e4:	6063      	strne	r3, [r4, #4]
 80078e6:	6013      	streq	r3, [r2, #0]
 80078e8:	460c      	movne	r4, r1
 80078ea:	e7eb      	b.n	80078c4 <_malloc_r+0x64>
 80078ec:	460c      	mov	r4, r1
 80078ee:	6849      	ldr	r1, [r1, #4]
 80078f0:	e7cc      	b.n	800788c <_malloc_r+0x2c>
 80078f2:	1cc4      	adds	r4, r0, #3
 80078f4:	f024 0403 	bic.w	r4, r4, #3
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d005      	beq.n	8007908 <_malloc_r+0xa8>
 80078fc:	1a21      	subs	r1, r4, r0
 80078fe:	4630      	mov	r0, r6
 8007900:	f000 f884 	bl	8007a0c <_sbrk_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d0cf      	beq.n	80078a8 <_malloc_r+0x48>
 8007908:	6025      	str	r5, [r4, #0]
 800790a:	e7db      	b.n	80078c4 <_malloc_r+0x64>
 800790c:	200001d0 	.word	0x200001d0
 8007910:	200001d4 	.word	0x200001d4

08007914 <iprintf>:
 8007914:	b40f      	push	{r0, r1, r2, r3}
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <iprintf+0x2c>)
 8007918:	b513      	push	{r0, r1, r4, lr}
 800791a:	681c      	ldr	r4, [r3, #0]
 800791c:	b124      	cbz	r4, 8007928 <iprintf+0x14>
 800791e:	69a3      	ldr	r3, [r4, #24]
 8007920:	b913      	cbnz	r3, 8007928 <iprintf+0x14>
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fa32 	bl	8007d8c <__sinit>
 8007928:	ab05      	add	r3, sp, #20
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	68a1      	ldr	r1, [r4, #8]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	4620      	mov	r0, r4
 8007932:	f000 fb45 	bl	8007fc0 <_vfiprintf_r>
 8007936:	b002      	add	sp, #8
 8007938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793c:	b004      	add	sp, #16
 800793e:	4770      	bx	lr
 8007940:	20000144 	.word	0x20000144

08007944 <_puts_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	460e      	mov	r6, r1
 8007948:	4605      	mov	r5, r0
 800794a:	b118      	cbz	r0, 8007954 <_puts_r+0x10>
 800794c:	6983      	ldr	r3, [r0, #24]
 800794e:	b90b      	cbnz	r3, 8007954 <_puts_r+0x10>
 8007950:	f000 fa1c 	bl	8007d8c <__sinit>
 8007954:	69ab      	ldr	r3, [r5, #24]
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	b913      	cbnz	r3, 8007960 <_puts_r+0x1c>
 800795a:	4628      	mov	r0, r5
 800795c:	f000 fa16 	bl	8007d8c <__sinit>
 8007960:	4b23      	ldr	r3, [pc, #140]	; (80079f0 <_puts_r+0xac>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d117      	bne.n	8007996 <_puts_r+0x52>
 8007966:	686c      	ldr	r4, [r5, #4]
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	071b      	lsls	r3, r3, #28
 800796c:	d51d      	bpl.n	80079aa <_puts_r+0x66>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	b1db      	cbz	r3, 80079aa <_puts_r+0x66>
 8007972:	3e01      	subs	r6, #1
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800797a:	3b01      	subs	r3, #1
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	b9e9      	cbnz	r1, 80079bc <_puts_r+0x78>
 8007980:	2b00      	cmp	r3, #0
 8007982:	da2e      	bge.n	80079e2 <_puts_r+0x9e>
 8007984:	4622      	mov	r2, r4
 8007986:	210a      	movs	r1, #10
 8007988:	4628      	mov	r0, r5
 800798a:	f000 f84f 	bl	8007a2c <__swbuf_r>
 800798e:	3001      	adds	r0, #1
 8007990:	d011      	beq.n	80079b6 <_puts_r+0x72>
 8007992:	200a      	movs	r0, #10
 8007994:	e011      	b.n	80079ba <_puts_r+0x76>
 8007996:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <_puts_r+0xb0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d101      	bne.n	80079a0 <_puts_r+0x5c>
 800799c:	68ac      	ldr	r4, [r5, #8]
 800799e:	e7e3      	b.n	8007968 <_puts_r+0x24>
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <_puts_r+0xb4>)
 80079a2:	429c      	cmp	r4, r3
 80079a4:	bf08      	it	eq
 80079a6:	68ec      	ldreq	r4, [r5, #12]
 80079a8:	e7de      	b.n	8007968 <_puts_r+0x24>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f88f 	bl	8007ad0 <__swsetup_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0dd      	beq.n	8007972 <_puts_r+0x2e>
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da04      	bge.n	80079ca <_puts_r+0x86>
 80079c0:	69a2      	ldr	r2, [r4, #24]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dc06      	bgt.n	80079d4 <_puts_r+0x90>
 80079c6:	290a      	cmp	r1, #10
 80079c8:	d004      	beq.n	80079d4 <_puts_r+0x90>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	7019      	strb	r1, [r3, #0]
 80079d2:	e7cf      	b.n	8007974 <_puts_r+0x30>
 80079d4:	4622      	mov	r2, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f828 	bl	8007a2c <__swbuf_r>
 80079dc:	3001      	adds	r0, #1
 80079de:	d1c9      	bne.n	8007974 <_puts_r+0x30>
 80079e0:	e7e9      	b.n	80079b6 <_puts_r+0x72>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	200a      	movs	r0, #10
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	7018      	strb	r0, [r3, #0]
 80079ec:	e7e5      	b.n	80079ba <_puts_r+0x76>
 80079ee:	bf00      	nop
 80079f0:	08008790 	.word	0x08008790
 80079f4:	080087b0 	.word	0x080087b0
 80079f8:	08008770 	.word	0x08008770

080079fc <puts>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <puts+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f7ff bf9f 	b.w	8007944 <_puts_r>
 8007a06:	bf00      	nop
 8007a08:	20000144 	.word	0x20000144

08007a0c <_sbrk_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4c06      	ldr	r4, [pc, #24]	; (8007a28 <_sbrk_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4605      	mov	r5, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	f7fa fa3a 	bl	8001e90 <_sbrk>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_sbrk_r+0x1a>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_sbrk_r+0x1a>
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000ab8 	.word	0x20000ab8

08007a2c <__swbuf_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	4605      	mov	r5, r0
 8007a34:	b118      	cbz	r0, 8007a3e <__swbuf_r+0x12>
 8007a36:	6983      	ldr	r3, [r0, #24]
 8007a38:	b90b      	cbnz	r3, 8007a3e <__swbuf_r+0x12>
 8007a3a:	f000 f9a7 	bl	8007d8c <__sinit>
 8007a3e:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <__swbuf_r+0x98>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d12a      	bne.n	8007a9a <__swbuf_r+0x6e>
 8007a44:	686c      	ldr	r4, [r5, #4]
 8007a46:	69a3      	ldr	r3, [r4, #24]
 8007a48:	60a3      	str	r3, [r4, #8]
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	071a      	lsls	r2, r3, #28
 8007a4e:	d52e      	bpl.n	8007aae <__swbuf_r+0x82>
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	b363      	cbz	r3, 8007aae <__swbuf_r+0x82>
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	6820      	ldr	r0, [r4, #0]
 8007a58:	1ac0      	subs	r0, r0, r3
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	b2f6      	uxtb	r6, r6
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	4637      	mov	r7, r6
 8007a62:	dc04      	bgt.n	8007a6e <__swbuf_r+0x42>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f926 	bl	8007cb8 <_fflush_r>
 8007a6c:	bb28      	cbnz	r0, 8007aba <__swbuf_r+0x8e>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	701e      	strb	r6, [r3, #0]
 8007a7c:	6963      	ldr	r3, [r4, #20]
 8007a7e:	3001      	adds	r0, #1
 8007a80:	4283      	cmp	r3, r0
 8007a82:	d004      	beq.n	8007a8e <__swbuf_r+0x62>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	07db      	lsls	r3, r3, #31
 8007a88:	d519      	bpl.n	8007abe <__swbuf_r+0x92>
 8007a8a:	2e0a      	cmp	r6, #10
 8007a8c:	d117      	bne.n	8007abe <__swbuf_r+0x92>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 f911 	bl	8007cb8 <_fflush_r>
 8007a96:	b190      	cbz	r0, 8007abe <__swbuf_r+0x92>
 8007a98:	e00f      	b.n	8007aba <__swbuf_r+0x8e>
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <__swbuf_r+0x9c>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d101      	bne.n	8007aa4 <__swbuf_r+0x78>
 8007aa0:	68ac      	ldr	r4, [r5, #8]
 8007aa2:	e7d0      	b.n	8007a46 <__swbuf_r+0x1a>
 8007aa4:	4b09      	ldr	r3, [pc, #36]	; (8007acc <__swbuf_r+0xa0>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	bf08      	it	eq
 8007aaa:	68ec      	ldreq	r4, [r5, #12]
 8007aac:	e7cb      	b.n	8007a46 <__swbuf_r+0x1a>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f80d 	bl	8007ad0 <__swsetup_r>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0cc      	beq.n	8007a54 <__swbuf_r+0x28>
 8007aba:	f04f 37ff 	mov.w	r7, #4294967295
 8007abe:	4638      	mov	r0, r7
 8007ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	08008790 	.word	0x08008790
 8007ac8:	080087b0 	.word	0x080087b0
 8007acc:	08008770 	.word	0x08008770

08007ad0 <__swsetup_r>:
 8007ad0:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <__swsetup_r+0xcc>)
 8007ad2:	b570      	push	{r4, r5, r6, lr}
 8007ad4:	681d      	ldr	r5, [r3, #0]
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b125      	cbz	r5, 8007ae6 <__swsetup_r+0x16>
 8007adc:	69ab      	ldr	r3, [r5, #24]
 8007ade:	b913      	cbnz	r3, 8007ae6 <__swsetup_r+0x16>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 f953 	bl	8007d8c <__sinit>
 8007ae6:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <__swsetup_r+0xd0>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d10f      	bne.n	8007b0c <__swsetup_r+0x3c>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	0715      	lsls	r5, r2, #28
 8007af6:	d42c      	bmi.n	8007b52 <__swsetup_r+0x82>
 8007af8:	06d0      	lsls	r0, r2, #27
 8007afa:	d411      	bmi.n	8007b20 <__swsetup_r+0x50>
 8007afc:	2209      	movs	r2, #9
 8007afe:	6032      	str	r2, [r6, #0]
 8007b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	e03e      	b.n	8007b8a <__swsetup_r+0xba>
 8007b0c:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <__swsetup_r+0xd4>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d101      	bne.n	8007b16 <__swsetup_r+0x46>
 8007b12:	68ac      	ldr	r4, [r5, #8]
 8007b14:	e7eb      	b.n	8007aee <__swsetup_r+0x1e>
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <__swsetup_r+0xd8>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	bf08      	it	eq
 8007b1c:	68ec      	ldreq	r4, [r5, #12]
 8007b1e:	e7e6      	b.n	8007aee <__swsetup_r+0x1e>
 8007b20:	0751      	lsls	r1, r2, #29
 8007b22:	d512      	bpl.n	8007b4a <__swsetup_r+0x7a>
 8007b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b26:	b141      	cbz	r1, 8007b3a <__swsetup_r+0x6a>
 8007b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x66>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe47 	bl	80077c4 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b94b      	cbnz	r3, 8007b6a <__swsetup_r+0x9a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d003      	beq.n	8007b6a <__swsetup_r+0x9a>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4630      	mov	r0, r6
 8007b66:	f000 f9bf 	bl	8007ee8 <__smakebuf_r>
 8007b6a:	89a2      	ldrh	r2, [r4, #12]
 8007b6c:	f012 0301 	ands.w	r3, r2, #1
 8007b70:	d00c      	beq.n	8007b8c <__swsetup_r+0xbc>
 8007b72:	2300      	movs	r3, #0
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	6963      	ldr	r3, [r4, #20]
 8007b78:	425b      	negs	r3, r3
 8007b7a:	61a3      	str	r3, [r4, #24]
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	b953      	cbnz	r3, 8007b96 <__swsetup_r+0xc6>
 8007b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b88:	d1ba      	bne.n	8007b00 <__swsetup_r+0x30>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	0792      	lsls	r2, r2, #30
 8007b8e:	bf58      	it	pl
 8007b90:	6963      	ldrpl	r3, [r4, #20]
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	e7f2      	b.n	8007b7c <__swsetup_r+0xac>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e7f7      	b.n	8007b8a <__swsetup_r+0xba>
 8007b9a:	bf00      	nop
 8007b9c:	20000144 	.word	0x20000144
 8007ba0:	08008790 	.word	0x08008790
 8007ba4:	080087b0 	.word	0x080087b0
 8007ba8:	08008770 	.word	0x08008770

08007bac <__sflush_r>:
 8007bac:	898a      	ldrh	r2, [r1, #12]
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	0710      	lsls	r0, r2, #28
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	d458      	bmi.n	8007c6c <__sflush_r+0xc0>
 8007bba:	684b      	ldr	r3, [r1, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dc05      	bgt.n	8007bcc <__sflush_r+0x20>
 8007bc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc02      	bgt.n	8007bcc <__sflush_r+0x20>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	d0f9      	beq.n	8007bc6 <__sflush_r+0x1a>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bd8:	682f      	ldr	r7, [r5, #0]
 8007bda:	6a21      	ldr	r1, [r4, #32]
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	d032      	beq.n	8007c46 <__sflush_r+0x9a>
 8007be0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	075a      	lsls	r2, r3, #29
 8007be6:	d505      	bpl.n	8007bf4 <__sflush_r+0x48>
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	1ac0      	subs	r0, r0, r3
 8007bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bee:	b10b      	cbz	r3, 8007bf4 <__sflush_r+0x48>
 8007bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf2:	1ac0      	subs	r0, r0, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfa:	6a21      	ldr	r1, [r4, #32]
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b0      	blx	r6
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	d106      	bne.n	8007c14 <__sflush_r+0x68>
 8007c06:	6829      	ldr	r1, [r5, #0]
 8007c08:	291d      	cmp	r1, #29
 8007c0a:	d848      	bhi.n	8007c9e <__sflush_r+0xf2>
 8007c0c:	4a29      	ldr	r2, [pc, #164]	; (8007cb4 <__sflush_r+0x108>)
 8007c0e:	40ca      	lsrs	r2, r1
 8007c10:	07d6      	lsls	r6, r2, #31
 8007c12:	d544      	bpl.n	8007c9e <__sflush_r+0xf2>
 8007c14:	2200      	movs	r2, #0
 8007c16:	6062      	str	r2, [r4, #4]
 8007c18:	04d9      	lsls	r1, r3, #19
 8007c1a:	6922      	ldr	r2, [r4, #16]
 8007c1c:	6022      	str	r2, [r4, #0]
 8007c1e:	d504      	bpl.n	8007c2a <__sflush_r+0x7e>
 8007c20:	1c42      	adds	r2, r0, #1
 8007c22:	d101      	bne.n	8007c28 <__sflush_r+0x7c>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b903      	cbnz	r3, 8007c2a <__sflush_r+0x7e>
 8007c28:	6560      	str	r0, [r4, #84]	; 0x54
 8007c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2c:	602f      	str	r7, [r5, #0]
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d0c9      	beq.n	8007bc6 <__sflush_r+0x1a>
 8007c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d002      	beq.n	8007c40 <__sflush_r+0x94>
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f7ff fdc2 	bl	80077c4 <_free_r>
 8007c40:	2000      	movs	r0, #0
 8007c42:	6360      	str	r0, [r4, #52]	; 0x34
 8007c44:	e7c0      	b.n	8007bc8 <__sflush_r+0x1c>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b0      	blx	r6
 8007c4c:	1c41      	adds	r1, r0, #1
 8007c4e:	d1c8      	bne.n	8007be2 <__sflush_r+0x36>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0c5      	beq.n	8007be2 <__sflush_r+0x36>
 8007c56:	2b1d      	cmp	r3, #29
 8007c58:	d001      	beq.n	8007c5e <__sflush_r+0xb2>
 8007c5a:	2b16      	cmp	r3, #22
 8007c5c:	d101      	bne.n	8007c62 <__sflush_r+0xb6>
 8007c5e:	602f      	str	r7, [r5, #0]
 8007c60:	e7b1      	b.n	8007bc6 <__sflush_r+0x1a>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	e7ad      	b.n	8007bc8 <__sflush_r+0x1c>
 8007c6c:	690f      	ldr	r7, [r1, #16]
 8007c6e:	2f00      	cmp	r7, #0
 8007c70:	d0a9      	beq.n	8007bc6 <__sflush_r+0x1a>
 8007c72:	0793      	lsls	r3, r2, #30
 8007c74:	680e      	ldr	r6, [r1, #0]
 8007c76:	bf08      	it	eq
 8007c78:	694b      	ldreq	r3, [r1, #20]
 8007c7a:	600f      	str	r7, [r1, #0]
 8007c7c:	bf18      	it	ne
 8007c7e:	2300      	movne	r3, #0
 8007c80:	eba6 0807 	sub.w	r8, r6, r7
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	f1b8 0f00 	cmp.w	r8, #0
 8007c8a:	dd9c      	ble.n	8007bc6 <__sflush_r+0x1a>
 8007c8c:	4643      	mov	r3, r8
 8007c8e:	463a      	mov	r2, r7
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b0      	blx	r6
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dc06      	bgt.n	8007caa <__sflush_r+0xfe>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e78e      	b.n	8007bc8 <__sflush_r+0x1c>
 8007caa:	4407      	add	r7, r0
 8007cac:	eba8 0800 	sub.w	r8, r8, r0
 8007cb0:	e7e9      	b.n	8007c86 <__sflush_r+0xda>
 8007cb2:	bf00      	nop
 8007cb4:	20400001 	.word	0x20400001

08007cb8 <_fflush_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	690b      	ldr	r3, [r1, #16]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	b1db      	cbz	r3, 8007cfa <_fflush_r+0x42>
 8007cc2:	b118      	cbz	r0, 8007ccc <_fflush_r+0x14>
 8007cc4:	6983      	ldr	r3, [r0, #24]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <_fflush_r+0x14>
 8007cc8:	f000 f860 	bl	8007d8c <__sinit>
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <_fflush_r+0x48>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d109      	bne.n	8007ce6 <_fflush_r+0x2e>
 8007cd2:	686c      	ldr	r4, [r5, #4]
 8007cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd8:	b17b      	cbz	r3, 8007cfa <_fflush_r+0x42>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce2:	f7ff bf63 	b.w	8007bac <__sflush_r>
 8007ce6:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <_fflush_r+0x4c>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d101      	bne.n	8007cf0 <_fflush_r+0x38>
 8007cec:	68ac      	ldr	r4, [r5, #8]
 8007cee:	e7f1      	b.n	8007cd4 <_fflush_r+0x1c>
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <_fflush_r+0x50>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	bf08      	it	eq
 8007cf6:	68ec      	ldreq	r4, [r5, #12]
 8007cf8:	e7ec      	b.n	8007cd4 <_fflush_r+0x1c>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	bd38      	pop	{r3, r4, r5, pc}
 8007cfe:	bf00      	nop
 8007d00:	08008790 	.word	0x08008790
 8007d04:	080087b0 	.word	0x080087b0
 8007d08:	08008770 	.word	0x08008770

08007d0c <std>:
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	4604      	mov	r4, r0
 8007d12:	e9c0 3300 	strd	r3, r3, [r0]
 8007d16:	6083      	str	r3, [r0, #8]
 8007d18:	8181      	strh	r1, [r0, #12]
 8007d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d1c:	81c2      	strh	r2, [r0, #14]
 8007d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d22:	6183      	str	r3, [r0, #24]
 8007d24:	4619      	mov	r1, r3
 8007d26:	2208      	movs	r2, #8
 8007d28:	305c      	adds	r0, #92	; 0x5c
 8007d2a:	f7ff fd43 	bl	80077b4 <memset>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <std+0x38>)
 8007d30:	6263      	str	r3, [r4, #36]	; 0x24
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <std+0x3c>)
 8007d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <std+0x40>)
 8007d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <std+0x44>)
 8007d3c:	6224      	str	r4, [r4, #32]
 8007d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	080084fd 	.word	0x080084fd
 8007d48:	0800851f 	.word	0x0800851f
 8007d4c:	08008557 	.word	0x08008557
 8007d50:	0800857b 	.word	0x0800857b

08007d54 <_cleanup_r>:
 8007d54:	4901      	ldr	r1, [pc, #4]	; (8007d5c <_cleanup_r+0x8>)
 8007d56:	f000 b885 	b.w	8007e64 <_fwalk_reent>
 8007d5a:	bf00      	nop
 8007d5c:	08007cb9 	.word	0x08007cb9

08007d60 <__sfmoreglue>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	1e4a      	subs	r2, r1, #1
 8007d64:	2568      	movs	r5, #104	; 0x68
 8007d66:	4355      	muls	r5, r2
 8007d68:	460e      	mov	r6, r1
 8007d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d6e:	f7ff fd77 	bl	8007860 <_malloc_r>
 8007d72:	4604      	mov	r4, r0
 8007d74:	b140      	cbz	r0, 8007d88 <__sfmoreglue+0x28>
 8007d76:	2100      	movs	r1, #0
 8007d78:	e9c0 1600 	strd	r1, r6, [r0]
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	60a0      	str	r0, [r4, #8]
 8007d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d84:	f7ff fd16 	bl	80077b4 <memset>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}

08007d8c <__sinit>:
 8007d8c:	6983      	ldr	r3, [r0, #24]
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	bb33      	cbnz	r3, 8007de2 <__sinit+0x56>
 8007d94:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d98:	6503      	str	r3, [r0, #80]	; 0x50
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <__sinit+0x58>)
 8007d9c:	4a12      	ldr	r2, [pc, #72]	; (8007de8 <__sinit+0x5c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6282      	str	r2, [r0, #40]	; 0x28
 8007da2:	4298      	cmp	r0, r3
 8007da4:	bf04      	itt	eq
 8007da6:	2301      	moveq	r3, #1
 8007da8:	6183      	streq	r3, [r0, #24]
 8007daa:	f000 f81f 	bl	8007dec <__sfp>
 8007dae:	6060      	str	r0, [r4, #4]
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 f81b 	bl	8007dec <__sfp>
 8007db6:	60a0      	str	r0, [r4, #8]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f817 	bl	8007dec <__sfp>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	60e0      	str	r0, [r4, #12]
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	6860      	ldr	r0, [r4, #4]
 8007dc6:	f7ff ffa1 	bl	8007d0c <std>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	2109      	movs	r1, #9
 8007dce:	68a0      	ldr	r0, [r4, #8]
 8007dd0:	f7ff ff9c 	bl	8007d0c <std>
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	2112      	movs	r1, #18
 8007dd8:	68e0      	ldr	r0, [r4, #12]
 8007dda:	f7ff ff97 	bl	8007d0c <std>
 8007dde:	2301      	movs	r3, #1
 8007de0:	61a3      	str	r3, [r4, #24]
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	0800876c 	.word	0x0800876c
 8007de8:	08007d55 	.word	0x08007d55

08007dec <__sfp>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <__sfp+0x70>)
 8007df0:	681e      	ldr	r6, [r3, #0]
 8007df2:	69b3      	ldr	r3, [r6, #24]
 8007df4:	4607      	mov	r7, r0
 8007df6:	b913      	cbnz	r3, 8007dfe <__sfp+0x12>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff ffc7 	bl	8007d8c <__sinit>
 8007dfe:	3648      	adds	r6, #72	; 0x48
 8007e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	d503      	bpl.n	8007e10 <__sfp+0x24>
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	b133      	cbz	r3, 8007e1a <__sfp+0x2e>
 8007e0c:	6836      	ldr	r6, [r6, #0]
 8007e0e:	e7f7      	b.n	8007e00 <__sfp+0x14>
 8007e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e14:	b16d      	cbz	r5, 8007e32 <__sfp+0x46>
 8007e16:	3468      	adds	r4, #104	; 0x68
 8007e18:	e7f4      	b.n	8007e04 <__sfp+0x18>
 8007e1a:	2104      	movs	r1, #4
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff ff9f 	bl	8007d60 <__sfmoreglue>
 8007e22:	6030      	str	r0, [r6, #0]
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1f1      	bne.n	8007e0c <__sfp+0x20>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <__sfp+0x74>)
 8007e34:	6665      	str	r5, [r4, #100]	; 0x64
 8007e36:	e9c4 5500 	strd	r5, r5, [r4]
 8007e3a:	60a5      	str	r5, [r4, #8]
 8007e3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e44:	2208      	movs	r2, #8
 8007e46:	4629      	mov	r1, r5
 8007e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e4c:	f7ff fcb2 	bl	80077b4 <memset>
 8007e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e58:	e7e9      	b.n	8007e2e <__sfp+0x42>
 8007e5a:	bf00      	nop
 8007e5c:	0800876c 	.word	0x0800876c
 8007e60:	ffff0001 	.word	0xffff0001

08007e64 <_fwalk_reent>:
 8007e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e68:	4680      	mov	r8, r0
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e70:	2600      	movs	r6, #0
 8007e72:	b914      	cbnz	r4, 8007e7a <_fwalk_reent+0x16>
 8007e74:	4630      	mov	r0, r6
 8007e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e7e:	3f01      	subs	r7, #1
 8007e80:	d501      	bpl.n	8007e86 <_fwalk_reent+0x22>
 8007e82:	6824      	ldr	r4, [r4, #0]
 8007e84:	e7f5      	b.n	8007e72 <_fwalk_reent+0xe>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d907      	bls.n	8007e9c <_fwalk_reent+0x38>
 8007e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e90:	3301      	adds	r3, #1
 8007e92:	d003      	beq.n	8007e9c <_fwalk_reent+0x38>
 8007e94:	4629      	mov	r1, r5
 8007e96:	4640      	mov	r0, r8
 8007e98:	47c8      	blx	r9
 8007e9a:	4306      	orrs	r6, r0
 8007e9c:	3568      	adds	r5, #104	; 0x68
 8007e9e:	e7ee      	b.n	8007e7e <_fwalk_reent+0x1a>

08007ea0 <__swhatbuf_r>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	b096      	sub	sp, #88	; 0x58
 8007eac:	4614      	mov	r4, r2
 8007eae:	461d      	mov	r5, r3
 8007eb0:	da07      	bge.n	8007ec2 <__swhatbuf_r+0x22>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	602b      	str	r3, [r5, #0]
 8007eb6:	89b3      	ldrh	r3, [r6, #12]
 8007eb8:	061a      	lsls	r2, r3, #24
 8007eba:	d410      	bmi.n	8007ede <__swhatbuf_r+0x3e>
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	e00e      	b.n	8007ee0 <__swhatbuf_r+0x40>
 8007ec2:	466a      	mov	r2, sp
 8007ec4:	f000 fb80 	bl	80085c8 <_fstat_r>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dbf2      	blt.n	8007eb2 <__swhatbuf_r+0x12>
 8007ecc:	9a01      	ldr	r2, [sp, #4]
 8007ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ed6:	425a      	negs	r2, r3
 8007ed8:	415a      	adcs	r2, r3
 8007eda:	602a      	str	r2, [r5, #0]
 8007edc:	e7ee      	b.n	8007ebc <__swhatbuf_r+0x1c>
 8007ede:	2340      	movs	r3, #64	; 0x40
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	b016      	add	sp, #88	; 0x58
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}

08007ee8 <__smakebuf_r>:
 8007ee8:	898b      	ldrh	r3, [r1, #12]
 8007eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eec:	079d      	lsls	r5, r3, #30
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	d507      	bpl.n	8007f04 <__smakebuf_r+0x1c>
 8007ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	2301      	movs	r3, #1
 8007efe:	6163      	str	r3, [r4, #20]
 8007f00:	b002      	add	sp, #8
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	ab01      	add	r3, sp, #4
 8007f06:	466a      	mov	r2, sp
 8007f08:	f7ff ffca 	bl	8007ea0 <__swhatbuf_r>
 8007f0c:	9900      	ldr	r1, [sp, #0]
 8007f0e:	4605      	mov	r5, r0
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff fca5 	bl	8007860 <_malloc_r>
 8007f16:	b948      	cbnz	r0, 8007f2c <__smakebuf_r+0x44>
 8007f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1c:	059a      	lsls	r2, r3, #22
 8007f1e:	d4ef      	bmi.n	8007f00 <__smakebuf_r+0x18>
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7e3      	b.n	8007ef4 <__smakebuf_r+0xc>
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <__smakebuf_r+0x7c>)
 8007f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	6020      	str	r0, [r4, #0]
 8007f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	9b00      	ldr	r3, [sp, #0]
 8007f3c:	6163      	str	r3, [r4, #20]
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	6120      	str	r0, [r4, #16]
 8007f42:	b15b      	cbz	r3, 8007f5c <__smakebuf_r+0x74>
 8007f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 fb4f 	bl	80085ec <_isatty_r>
 8007f4e:	b128      	cbz	r0, 8007f5c <__smakebuf_r+0x74>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	431d      	orrs	r5, r3
 8007f60:	81a5      	strh	r5, [r4, #12]
 8007f62:	e7cd      	b.n	8007f00 <__smakebuf_r+0x18>
 8007f64:	08007d55 	.word	0x08007d55

08007f68 <__malloc_lock>:
 8007f68:	4770      	bx	lr

08007f6a <__malloc_unlock>:
 8007f6a:	4770      	bx	lr

08007f6c <__sfputc_r>:
 8007f6c:	6893      	ldr	r3, [r2, #8]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	b410      	push	{r4}
 8007f74:	6093      	str	r3, [r2, #8]
 8007f76:	da08      	bge.n	8007f8a <__sfputc_r+0x1e>
 8007f78:	6994      	ldr	r4, [r2, #24]
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	db01      	blt.n	8007f82 <__sfputc_r+0x16>
 8007f7e:	290a      	cmp	r1, #10
 8007f80:	d103      	bne.n	8007f8a <__sfputc_r+0x1e>
 8007f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f86:	f7ff bd51 	b.w	8007a2c <__swbuf_r>
 8007f8a:	6813      	ldr	r3, [r2, #0]
 8007f8c:	1c58      	adds	r0, r3, #1
 8007f8e:	6010      	str	r0, [r2, #0]
 8007f90:	7019      	strb	r1, [r3, #0]
 8007f92:	4608      	mov	r0, r1
 8007f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <__sfputs_r>:
 8007f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	18d5      	adds	r5, r2, r3
 8007fa4:	42ac      	cmp	r4, r5
 8007fa6:	d101      	bne.n	8007fac <__sfputs_r+0x12>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e007      	b.n	8007fbc <__sfputs_r+0x22>
 8007fac:	463a      	mov	r2, r7
 8007fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffda 	bl	8007f6c <__sfputc_r>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d1f3      	bne.n	8007fa4 <__sfputs_r+0xa>
 8007fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fc0 <_vfiprintf_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	b09d      	sub	sp, #116	; 0x74
 8007fc8:	4617      	mov	r7, r2
 8007fca:	461d      	mov	r5, r3
 8007fcc:	4606      	mov	r6, r0
 8007fce:	b118      	cbz	r0, 8007fd8 <_vfiprintf_r+0x18>
 8007fd0:	6983      	ldr	r3, [r0, #24]
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <_vfiprintf_r+0x18>
 8007fd4:	f7ff feda 	bl	8007d8c <__sinit>
 8007fd8:	4b7c      	ldr	r3, [pc, #496]	; (80081cc <_vfiprintf_r+0x20c>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d158      	bne.n	8008090 <_vfiprintf_r+0xd0>
 8007fde:	6874      	ldr	r4, [r6, #4]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	0718      	lsls	r0, r3, #28
 8007fe4:	d55e      	bpl.n	80080a4 <_vfiprintf_r+0xe4>
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d05b      	beq.n	80080a4 <_vfiprintf_r+0xe4>
 8007fec:	2300      	movs	r3, #0
 8007fee:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ff6:	2330      	movs	r3, #48	; 0x30
 8007ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ffc:	9503      	str	r5, [sp, #12]
 8007ffe:	f04f 0b01 	mov.w	fp, #1
 8008002:	46b8      	mov	r8, r7
 8008004:	4645      	mov	r5, r8
 8008006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800800a:	b10b      	cbz	r3, 8008010 <_vfiprintf_r+0x50>
 800800c:	2b25      	cmp	r3, #37	; 0x25
 800800e:	d154      	bne.n	80080ba <_vfiprintf_r+0xfa>
 8008010:	ebb8 0a07 	subs.w	sl, r8, r7
 8008014:	d00b      	beq.n	800802e <_vfiprintf_r+0x6e>
 8008016:	4653      	mov	r3, sl
 8008018:	463a      	mov	r2, r7
 800801a:	4621      	mov	r1, r4
 800801c:	4630      	mov	r0, r6
 800801e:	f7ff ffbc 	bl	8007f9a <__sfputs_r>
 8008022:	3001      	adds	r0, #1
 8008024:	f000 80c2 	beq.w	80081ac <_vfiprintf_r+0x1ec>
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	4453      	add	r3, sl
 800802c:	9309      	str	r3, [sp, #36]	; 0x24
 800802e:	f898 3000 	ldrb.w	r3, [r8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80ba 	beq.w	80081ac <_vfiprintf_r+0x1ec>
 8008038:	2300      	movs	r3, #0
 800803a:	f04f 32ff 	mov.w	r2, #4294967295
 800803e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800804a:	931a      	str	r3, [sp, #104]	; 0x68
 800804c:	46a8      	mov	r8, r5
 800804e:	2205      	movs	r2, #5
 8008050:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008054:	485e      	ldr	r0, [pc, #376]	; (80081d0 <_vfiprintf_r+0x210>)
 8008056:	f7f8 f8bb 	bl	80001d0 <memchr>
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	bb78      	cbnz	r0, 80080be <_vfiprintf_r+0xfe>
 800805e:	06d9      	lsls	r1, r3, #27
 8008060:	bf44      	itt	mi
 8008062:	2220      	movmi	r2, #32
 8008064:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008068:	071a      	lsls	r2, r3, #28
 800806a:	bf44      	itt	mi
 800806c:	222b      	movmi	r2, #43	; 0x2b
 800806e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008072:	782a      	ldrb	r2, [r5, #0]
 8008074:	2a2a      	cmp	r2, #42	; 0x2a
 8008076:	d02a      	beq.n	80080ce <_vfiprintf_r+0x10e>
 8008078:	9a07      	ldr	r2, [sp, #28]
 800807a:	46a8      	mov	r8, r5
 800807c:	2000      	movs	r0, #0
 800807e:	250a      	movs	r5, #10
 8008080:	4641      	mov	r1, r8
 8008082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008086:	3b30      	subs	r3, #48	; 0x30
 8008088:	2b09      	cmp	r3, #9
 800808a:	d969      	bls.n	8008160 <_vfiprintf_r+0x1a0>
 800808c:	b360      	cbz	r0, 80080e8 <_vfiprintf_r+0x128>
 800808e:	e024      	b.n	80080da <_vfiprintf_r+0x11a>
 8008090:	4b50      	ldr	r3, [pc, #320]	; (80081d4 <_vfiprintf_r+0x214>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <_vfiprintf_r+0xda>
 8008096:	68b4      	ldr	r4, [r6, #8]
 8008098:	e7a2      	b.n	8007fe0 <_vfiprintf_r+0x20>
 800809a:	4b4f      	ldr	r3, [pc, #316]	; (80081d8 <_vfiprintf_r+0x218>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68f4      	ldreq	r4, [r6, #12]
 80080a2:	e79d      	b.n	8007fe0 <_vfiprintf_r+0x20>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7ff fd12 	bl	8007ad0 <__swsetup_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d09d      	beq.n	8007fec <_vfiprintf_r+0x2c>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	b01d      	add	sp, #116	; 0x74
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	46a8      	mov	r8, r5
 80080bc:	e7a2      	b.n	8008004 <_vfiprintf_r+0x44>
 80080be:	4a44      	ldr	r2, [pc, #272]	; (80081d0 <_vfiprintf_r+0x210>)
 80080c0:	1a80      	subs	r0, r0, r2
 80080c2:	fa0b f000 	lsl.w	r0, fp, r0
 80080c6:	4318      	orrs	r0, r3
 80080c8:	9004      	str	r0, [sp, #16]
 80080ca:	4645      	mov	r5, r8
 80080cc:	e7be      	b.n	800804c <_vfiprintf_r+0x8c>
 80080ce:	9a03      	ldr	r2, [sp, #12]
 80080d0:	1d11      	adds	r1, r2, #4
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	9103      	str	r1, [sp, #12]
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	db01      	blt.n	80080de <_vfiprintf_r+0x11e>
 80080da:	9207      	str	r2, [sp, #28]
 80080dc:	e004      	b.n	80080e8 <_vfiprintf_r+0x128>
 80080de:	4252      	negs	r2, r2
 80080e0:	f043 0302 	orr.w	r3, r3, #2
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	f898 3000 	ldrb.w	r3, [r8]
 80080ec:	2b2e      	cmp	r3, #46	; 0x2e
 80080ee:	d10e      	bne.n	800810e <_vfiprintf_r+0x14e>
 80080f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080f4:	2b2a      	cmp	r3, #42	; 0x2a
 80080f6:	d138      	bne.n	800816a <_vfiprintf_r+0x1aa>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9203      	str	r2, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfb8      	it	lt
 8008104:	f04f 33ff 	movlt.w	r3, #4294967295
 8008108:	f108 0802 	add.w	r8, r8, #2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	4d33      	ldr	r5, [pc, #204]	; (80081dc <_vfiprintf_r+0x21c>)
 8008110:	f898 1000 	ldrb.w	r1, [r8]
 8008114:	2203      	movs	r2, #3
 8008116:	4628      	mov	r0, r5
 8008118:	f7f8 f85a 	bl	80001d0 <memchr>
 800811c:	b140      	cbz	r0, 8008130 <_vfiprintf_r+0x170>
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	1b40      	subs	r0, r0, r5
 8008122:	fa03 f000 	lsl.w	r0, r3, r0
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	4303      	orrs	r3, r0
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	f898 1000 	ldrb.w	r1, [r8]
 8008134:	482a      	ldr	r0, [pc, #168]	; (80081e0 <_vfiprintf_r+0x220>)
 8008136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813a:	2206      	movs	r2, #6
 800813c:	f108 0701 	add.w	r7, r8, #1
 8008140:	f7f8 f846 	bl	80001d0 <memchr>
 8008144:	2800      	cmp	r0, #0
 8008146:	d037      	beq.n	80081b8 <_vfiprintf_r+0x1f8>
 8008148:	4b26      	ldr	r3, [pc, #152]	; (80081e4 <_vfiprintf_r+0x224>)
 800814a:	bb1b      	cbnz	r3, 8008194 <_vfiprintf_r+0x1d4>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	3307      	adds	r3, #7
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	3308      	adds	r3, #8
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	444b      	add	r3, r9
 800815c:	9309      	str	r3, [sp, #36]	; 0x24
 800815e:	e750      	b.n	8008002 <_vfiprintf_r+0x42>
 8008160:	fb05 3202 	mla	r2, r5, r2, r3
 8008164:	2001      	movs	r0, #1
 8008166:	4688      	mov	r8, r1
 8008168:	e78a      	b.n	8008080 <_vfiprintf_r+0xc0>
 800816a:	2300      	movs	r3, #0
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	4619      	mov	r1, r3
 8008174:	250a      	movs	r5, #10
 8008176:	4640      	mov	r0, r8
 8008178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817c:	3a30      	subs	r2, #48	; 0x30
 800817e:	2a09      	cmp	r2, #9
 8008180:	d903      	bls.n	800818a <_vfiprintf_r+0x1ca>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0c3      	beq.n	800810e <_vfiprintf_r+0x14e>
 8008186:	9105      	str	r1, [sp, #20]
 8008188:	e7c1      	b.n	800810e <_vfiprintf_r+0x14e>
 800818a:	fb05 2101 	mla	r1, r5, r1, r2
 800818e:	2301      	movs	r3, #1
 8008190:	4680      	mov	r8, r0
 8008192:	e7f0      	b.n	8008176 <_vfiprintf_r+0x1b6>
 8008194:	ab03      	add	r3, sp, #12
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4622      	mov	r2, r4
 800819a:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <_vfiprintf_r+0x228>)
 800819c:	a904      	add	r1, sp, #16
 800819e:	4630      	mov	r0, r6
 80081a0:	f3af 8000 	nop.w
 80081a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081a8:	4681      	mov	r9, r0
 80081aa:	d1d5      	bne.n	8008158 <_vfiprintf_r+0x198>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	065b      	lsls	r3, r3, #25
 80081b0:	f53f af7e 	bmi.w	80080b0 <_vfiprintf_r+0xf0>
 80081b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b6:	e77d      	b.n	80080b4 <_vfiprintf_r+0xf4>
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4622      	mov	r2, r4
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <_vfiprintf_r+0x228>)
 80081c0:	a904      	add	r1, sp, #16
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 f888 	bl	80082d8 <_printf_i>
 80081c8:	e7ec      	b.n	80081a4 <_vfiprintf_r+0x1e4>
 80081ca:	bf00      	nop
 80081cc:	08008790 	.word	0x08008790
 80081d0:	080087d0 	.word	0x080087d0
 80081d4:	080087b0 	.word	0x080087b0
 80081d8:	08008770 	.word	0x08008770
 80081dc:	080087d6 	.word	0x080087d6
 80081e0:	080087da 	.word	0x080087da
 80081e4:	00000000 	.word	0x00000000
 80081e8:	08007f9b 	.word	0x08007f9b

080081ec <_printf_common>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	4691      	mov	r9, r2
 80081f2:	461f      	mov	r7, r3
 80081f4:	688a      	ldr	r2, [r1, #8]
 80081f6:	690b      	ldr	r3, [r1, #16]
 80081f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	bfb8      	it	lt
 8008200:	4613      	movlt	r3, r2
 8008202:	f8c9 3000 	str.w	r3, [r9]
 8008206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800820a:	4606      	mov	r6, r0
 800820c:	460c      	mov	r4, r1
 800820e:	b112      	cbz	r2, 8008216 <_printf_common+0x2a>
 8008210:	3301      	adds	r3, #1
 8008212:	f8c9 3000 	str.w	r3, [r9]
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	0699      	lsls	r1, r3, #26
 800821a:	bf42      	ittt	mi
 800821c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008220:	3302      	addmi	r3, #2
 8008222:	f8c9 3000 	strmi.w	r3, [r9]
 8008226:	6825      	ldr	r5, [r4, #0]
 8008228:	f015 0506 	ands.w	r5, r5, #6
 800822c:	d107      	bne.n	800823e <_printf_common+0x52>
 800822e:	f104 0a19 	add.w	sl, r4, #25
 8008232:	68e3      	ldr	r3, [r4, #12]
 8008234:	f8d9 2000 	ldr.w	r2, [r9]
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	42ab      	cmp	r3, r5
 800823c:	dc28      	bgt.n	8008290 <_printf_common+0xa4>
 800823e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	3300      	adds	r3, #0
 8008246:	bf18      	it	ne
 8008248:	2301      	movne	r3, #1
 800824a:	0692      	lsls	r2, r2, #26
 800824c:	d42d      	bmi.n	80082aa <_printf_common+0xbe>
 800824e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008252:	4639      	mov	r1, r7
 8008254:	4630      	mov	r0, r6
 8008256:	47c0      	blx	r8
 8008258:	3001      	adds	r0, #1
 800825a:	d020      	beq.n	800829e <_printf_common+0xb2>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	68e5      	ldr	r5, [r4, #12]
 8008260:	f8d9 2000 	ldr.w	r2, [r9]
 8008264:	f003 0306 	and.w	r3, r3, #6
 8008268:	2b04      	cmp	r3, #4
 800826a:	bf08      	it	eq
 800826c:	1aad      	subeq	r5, r5, r2
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	bf0c      	ite	eq
 8008274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008278:	2500      	movne	r5, #0
 800827a:	4293      	cmp	r3, r2
 800827c:	bfc4      	itt	gt
 800827e:	1a9b      	subgt	r3, r3, r2
 8008280:	18ed      	addgt	r5, r5, r3
 8008282:	f04f 0900 	mov.w	r9, #0
 8008286:	341a      	adds	r4, #26
 8008288:	454d      	cmp	r5, r9
 800828a:	d11a      	bne.n	80082c2 <_printf_common+0xd6>
 800828c:	2000      	movs	r0, #0
 800828e:	e008      	b.n	80082a2 <_printf_common+0xb6>
 8008290:	2301      	movs	r3, #1
 8008292:	4652      	mov	r2, sl
 8008294:	4639      	mov	r1, r7
 8008296:	4630      	mov	r0, r6
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d103      	bne.n	80082a6 <_printf_common+0xba>
 800829e:	f04f 30ff 	mov.w	r0, #4294967295
 80082a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a6:	3501      	adds	r5, #1
 80082a8:	e7c3      	b.n	8008232 <_printf_common+0x46>
 80082aa:	18e1      	adds	r1, r4, r3
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	2030      	movs	r0, #48	; 0x30
 80082b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b4:	4422      	add	r2, r4
 80082b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082be:	3302      	adds	r3, #2
 80082c0:	e7c5      	b.n	800824e <_printf_common+0x62>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4622      	mov	r2, r4
 80082c6:	4639      	mov	r1, r7
 80082c8:	4630      	mov	r0, r6
 80082ca:	47c0      	blx	r8
 80082cc:	3001      	adds	r0, #1
 80082ce:	d0e6      	beq.n	800829e <_printf_common+0xb2>
 80082d0:	f109 0901 	add.w	r9, r9, #1
 80082d4:	e7d8      	b.n	8008288 <_printf_common+0x9c>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082e0:	460c      	mov	r4, r1
 80082e2:	7e09      	ldrb	r1, [r1, #24]
 80082e4:	b085      	sub	sp, #20
 80082e6:	296e      	cmp	r1, #110	; 0x6e
 80082e8:	4617      	mov	r7, r2
 80082ea:	4606      	mov	r6, r0
 80082ec:	4698      	mov	r8, r3
 80082ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f0:	f000 80b3 	beq.w	800845a <_printf_i+0x182>
 80082f4:	d822      	bhi.n	800833c <_printf_i+0x64>
 80082f6:	2963      	cmp	r1, #99	; 0x63
 80082f8:	d036      	beq.n	8008368 <_printf_i+0x90>
 80082fa:	d80a      	bhi.n	8008312 <_printf_i+0x3a>
 80082fc:	2900      	cmp	r1, #0
 80082fe:	f000 80b9 	beq.w	8008474 <_printf_i+0x19c>
 8008302:	2958      	cmp	r1, #88	; 0x58
 8008304:	f000 8083 	beq.w	800840e <_printf_i+0x136>
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008310:	e032      	b.n	8008378 <_printf_i+0xa0>
 8008312:	2964      	cmp	r1, #100	; 0x64
 8008314:	d001      	beq.n	800831a <_printf_i+0x42>
 8008316:	2969      	cmp	r1, #105	; 0x69
 8008318:	d1f6      	bne.n	8008308 <_printf_i+0x30>
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	0605      	lsls	r5, r0, #24
 8008320:	f103 0104 	add.w	r1, r3, #4
 8008324:	d52a      	bpl.n	800837c <_printf_i+0xa4>
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6011      	str	r1, [r2, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	da03      	bge.n	8008336 <_printf_i+0x5e>
 800832e:	222d      	movs	r2, #45	; 0x2d
 8008330:	425b      	negs	r3, r3
 8008332:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008336:	486f      	ldr	r0, [pc, #444]	; (80084f4 <_printf_i+0x21c>)
 8008338:	220a      	movs	r2, #10
 800833a:	e039      	b.n	80083b0 <_printf_i+0xd8>
 800833c:	2973      	cmp	r1, #115	; 0x73
 800833e:	f000 809d 	beq.w	800847c <_printf_i+0x1a4>
 8008342:	d808      	bhi.n	8008356 <_printf_i+0x7e>
 8008344:	296f      	cmp	r1, #111	; 0x6f
 8008346:	d020      	beq.n	800838a <_printf_i+0xb2>
 8008348:	2970      	cmp	r1, #112	; 0x70
 800834a:	d1dd      	bne.n	8008308 <_printf_i+0x30>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	f043 0320 	orr.w	r3, r3, #32
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	e003      	b.n	800835e <_printf_i+0x86>
 8008356:	2975      	cmp	r1, #117	; 0x75
 8008358:	d017      	beq.n	800838a <_printf_i+0xb2>
 800835a:	2978      	cmp	r1, #120	; 0x78
 800835c:	d1d4      	bne.n	8008308 <_printf_i+0x30>
 800835e:	2378      	movs	r3, #120	; 0x78
 8008360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008364:	4864      	ldr	r0, [pc, #400]	; (80084f8 <_printf_i+0x220>)
 8008366:	e055      	b.n	8008414 <_printf_i+0x13c>
 8008368:	6813      	ldr	r3, [r2, #0]
 800836a:	1d19      	adds	r1, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6011      	str	r1, [r2, #0]
 8008370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008378:	2301      	movs	r3, #1
 800837a:	e08c      	b.n	8008496 <_printf_i+0x1be>
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6011      	str	r1, [r2, #0]
 8008380:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008384:	bf18      	it	ne
 8008386:	b21b      	sxthne	r3, r3
 8008388:	e7cf      	b.n	800832a <_printf_i+0x52>
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	6825      	ldr	r5, [r4, #0]
 800838e:	1d18      	adds	r0, r3, #4
 8008390:	6010      	str	r0, [r2, #0]
 8008392:	0628      	lsls	r0, r5, #24
 8008394:	d501      	bpl.n	800839a <_printf_i+0xc2>
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	e002      	b.n	80083a0 <_printf_i+0xc8>
 800839a:	0668      	lsls	r0, r5, #25
 800839c:	d5fb      	bpl.n	8008396 <_printf_i+0xbe>
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	4854      	ldr	r0, [pc, #336]	; (80084f4 <_printf_i+0x21c>)
 80083a2:	296f      	cmp	r1, #111	; 0x6f
 80083a4:	bf14      	ite	ne
 80083a6:	220a      	movne	r2, #10
 80083a8:	2208      	moveq	r2, #8
 80083aa:	2100      	movs	r1, #0
 80083ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b0:	6865      	ldr	r5, [r4, #4]
 80083b2:	60a5      	str	r5, [r4, #8]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	f2c0 8095 	blt.w	80084e4 <_printf_i+0x20c>
 80083ba:	6821      	ldr	r1, [r4, #0]
 80083bc:	f021 0104 	bic.w	r1, r1, #4
 80083c0:	6021      	str	r1, [r4, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d13d      	bne.n	8008442 <_printf_i+0x16a>
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	f040 808e 	bne.w	80084e8 <_printf_i+0x210>
 80083cc:	4665      	mov	r5, ip
 80083ce:	2a08      	cmp	r2, #8
 80083d0:	d10b      	bne.n	80083ea <_printf_i+0x112>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	07db      	lsls	r3, r3, #31
 80083d6:	d508      	bpl.n	80083ea <_printf_i+0x112>
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	6862      	ldr	r2, [r4, #4]
 80083dc:	429a      	cmp	r2, r3
 80083de:	bfde      	ittt	le
 80083e0:	2330      	movle	r3, #48	; 0x30
 80083e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083ea:	ebac 0305 	sub.w	r3, ip, r5
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	f8cd 8000 	str.w	r8, [sp]
 80083f4:	463b      	mov	r3, r7
 80083f6:	aa03      	add	r2, sp, #12
 80083f8:	4621      	mov	r1, r4
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff fef6 	bl	80081ec <_printf_common>
 8008400:	3001      	adds	r0, #1
 8008402:	d14d      	bne.n	80084a0 <_printf_i+0x1c8>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	b005      	add	sp, #20
 800840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840e:	4839      	ldr	r0, [pc, #228]	; (80084f4 <_printf_i+0x21c>)
 8008410:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008414:	6813      	ldr	r3, [r2, #0]
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	1d1d      	adds	r5, r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6015      	str	r5, [r2, #0]
 800841e:	060a      	lsls	r2, r1, #24
 8008420:	d50b      	bpl.n	800843a <_printf_i+0x162>
 8008422:	07ca      	lsls	r2, r1, #31
 8008424:	bf44      	itt	mi
 8008426:	f041 0120 	orrmi.w	r1, r1, #32
 800842a:	6021      	strmi	r1, [r4, #0]
 800842c:	b91b      	cbnz	r3, 8008436 <_printf_i+0x15e>
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	f022 0220 	bic.w	r2, r2, #32
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	2210      	movs	r2, #16
 8008438:	e7b7      	b.n	80083aa <_printf_i+0xd2>
 800843a:	064d      	lsls	r5, r1, #25
 800843c:	bf48      	it	mi
 800843e:	b29b      	uxthmi	r3, r3
 8008440:	e7ef      	b.n	8008422 <_printf_i+0x14a>
 8008442:	4665      	mov	r5, ip
 8008444:	fbb3 f1f2 	udiv	r1, r3, r2
 8008448:	fb02 3311 	mls	r3, r2, r1, r3
 800844c:	5cc3      	ldrb	r3, [r0, r3]
 800844e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008452:	460b      	mov	r3, r1
 8008454:	2900      	cmp	r1, #0
 8008456:	d1f5      	bne.n	8008444 <_printf_i+0x16c>
 8008458:	e7b9      	b.n	80083ce <_printf_i+0xf6>
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	6825      	ldr	r5, [r4, #0]
 800845e:	6961      	ldr	r1, [r4, #20]
 8008460:	1d18      	adds	r0, r3, #4
 8008462:	6010      	str	r0, [r2, #0]
 8008464:	0628      	lsls	r0, r5, #24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	d501      	bpl.n	800846e <_printf_i+0x196>
 800846a:	6019      	str	r1, [r3, #0]
 800846c:	e002      	b.n	8008474 <_printf_i+0x19c>
 800846e:	066a      	lsls	r2, r5, #25
 8008470:	d5fb      	bpl.n	800846a <_printf_i+0x192>
 8008472:	8019      	strh	r1, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	4665      	mov	r5, ip
 800847a:	e7b9      	b.n	80083f0 <_printf_i+0x118>
 800847c:	6813      	ldr	r3, [r2, #0]
 800847e:	1d19      	adds	r1, r3, #4
 8008480:	6011      	str	r1, [r2, #0]
 8008482:	681d      	ldr	r5, [r3, #0]
 8008484:	6862      	ldr	r2, [r4, #4]
 8008486:	2100      	movs	r1, #0
 8008488:	4628      	mov	r0, r5
 800848a:	f7f7 fea1 	bl	80001d0 <memchr>
 800848e:	b108      	cbz	r0, 8008494 <_printf_i+0x1bc>
 8008490:	1b40      	subs	r0, r0, r5
 8008492:	6060      	str	r0, [r4, #4]
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	2300      	movs	r3, #0
 800849a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849e:	e7a7      	b.n	80083f0 <_printf_i+0x118>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	462a      	mov	r2, r5
 80084a4:	4639      	mov	r1, r7
 80084a6:	4630      	mov	r0, r6
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d0aa      	beq.n	8008404 <_printf_i+0x12c>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	079b      	lsls	r3, r3, #30
 80084b2:	d413      	bmi.n	80084dc <_printf_i+0x204>
 80084b4:	68e0      	ldr	r0, [r4, #12]
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	4298      	cmp	r0, r3
 80084ba:	bfb8      	it	lt
 80084bc:	4618      	movlt	r0, r3
 80084be:	e7a3      	b.n	8008408 <_printf_i+0x130>
 80084c0:	2301      	movs	r3, #1
 80084c2:	464a      	mov	r2, r9
 80084c4:	4639      	mov	r1, r7
 80084c6:	4630      	mov	r0, r6
 80084c8:	47c0      	blx	r8
 80084ca:	3001      	adds	r0, #1
 80084cc:	d09a      	beq.n	8008404 <_printf_i+0x12c>
 80084ce:	3501      	adds	r5, #1
 80084d0:	68e3      	ldr	r3, [r4, #12]
 80084d2:	9a03      	ldr	r2, [sp, #12]
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	42ab      	cmp	r3, r5
 80084d8:	dcf2      	bgt.n	80084c0 <_printf_i+0x1e8>
 80084da:	e7eb      	b.n	80084b4 <_printf_i+0x1dc>
 80084dc:	2500      	movs	r5, #0
 80084de:	f104 0919 	add.w	r9, r4, #25
 80084e2:	e7f5      	b.n	80084d0 <_printf_i+0x1f8>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1ac      	bne.n	8008442 <_printf_i+0x16a>
 80084e8:	7803      	ldrb	r3, [r0, #0]
 80084ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f2:	e76c      	b.n	80083ce <_printf_i+0xf6>
 80084f4:	080087e1 	.word	0x080087e1
 80084f8:	080087f2 	.word	0x080087f2

080084fc <__sread>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	460c      	mov	r4, r1
 8008500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008504:	f000 f894 	bl	8008630 <_read_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	bfab      	itete	ge
 800850c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800850e:	89a3      	ldrhlt	r3, [r4, #12]
 8008510:	181b      	addge	r3, r3, r0
 8008512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008516:	bfac      	ite	ge
 8008518:	6563      	strge	r3, [r4, #84]	; 0x54
 800851a:	81a3      	strhlt	r3, [r4, #12]
 800851c:	bd10      	pop	{r4, pc}

0800851e <__swrite>:
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	461f      	mov	r7, r3
 8008524:	898b      	ldrh	r3, [r1, #12]
 8008526:	05db      	lsls	r3, r3, #23
 8008528:	4605      	mov	r5, r0
 800852a:	460c      	mov	r4, r1
 800852c:	4616      	mov	r6, r2
 800852e:	d505      	bpl.n	800853c <__swrite+0x1e>
 8008530:	2302      	movs	r3, #2
 8008532:	2200      	movs	r2, #0
 8008534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008538:	f000 f868 	bl	800860c <_lseek_r>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	4632      	mov	r2, r6
 800854a:	463b      	mov	r3, r7
 800854c:	4628      	mov	r0, r5
 800854e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008552:	f000 b817 	b.w	8008584 <_write_r>

08008556 <__sseek>:
 8008556:	b510      	push	{r4, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800855e:	f000 f855 	bl	800860c <_lseek_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	bf15      	itete	ne
 8008568:	6560      	strne	r0, [r4, #84]	; 0x54
 800856a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800856e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008572:	81a3      	strheq	r3, [r4, #12]
 8008574:	bf18      	it	ne
 8008576:	81a3      	strhne	r3, [r4, #12]
 8008578:	bd10      	pop	{r4, pc}

0800857a <__sclose>:
 800857a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857e:	f000 b813 	b.w	80085a8 <_close_r>
	...

08008584 <_write_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4c07      	ldr	r4, [pc, #28]	; (80085a4 <_write_r+0x20>)
 8008588:	4605      	mov	r5, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7f9 fc2b 	bl	8001dee <_write>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_write_r+0x1e>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_write_r+0x1e>
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20000ab8 	.word	0x20000ab8

080085a8 <_close_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4c06      	ldr	r4, [pc, #24]	; (80085c4 <_close_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4605      	mov	r5, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	f7f9 fc37 	bl	8001e26 <_close>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_close_r+0x1a>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_close_r+0x1a>
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	20000ab8 	.word	0x20000ab8

080085c8 <_fstat_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4c07      	ldr	r4, [pc, #28]	; (80085e8 <_fstat_r+0x20>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4605      	mov	r5, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	f7f9 fc32 	bl	8001e3e <_fstat>
 80085da:	1c43      	adds	r3, r0, #1
 80085dc:	d102      	bne.n	80085e4 <_fstat_r+0x1c>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	b103      	cbz	r3, 80085e4 <_fstat_r+0x1c>
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	20000ab8 	.word	0x20000ab8

080085ec <_isatty_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4c06      	ldr	r4, [pc, #24]	; (8008608 <_isatty_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4605      	mov	r5, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	f7f9 fc31 	bl	8001e5e <_isatty>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_isatty_r+0x1a>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	b103      	cbz	r3, 8008606 <_isatty_r+0x1a>
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20000ab8 	.word	0x20000ab8

0800860c <_lseek_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4c07      	ldr	r4, [pc, #28]	; (800862c <_lseek_r+0x20>)
 8008610:	4605      	mov	r5, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7f9 fc2a 	bl	8001e74 <_lseek>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_lseek_r+0x1e>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b103      	cbz	r3, 800862a <_lseek_r+0x1e>
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000ab8 	.word	0x20000ab8

08008630 <_read_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4c07      	ldr	r4, [pc, #28]	; (8008650 <_read_r+0x20>)
 8008634:	4605      	mov	r5, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f9 fbb8 	bl	8001db4 <_read>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_read_r+0x1e>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	b103      	cbz	r3, 800864e <_read_r+0x1e>
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20000ab8 	.word	0x20000ab8

08008654 <_init>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr

08008660 <_fini>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr
