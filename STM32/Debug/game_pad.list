
game_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  200001d4  08007d80  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  08007d80  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b7d  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc2  00000000  00000000  00032d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00035a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00036608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002361e  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dbd1  00000000  00000000  0005a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3ed7  00000000  00000000  0006825f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  0012c1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ab4 	.word	0x08007ab4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	08007ab4 	.word	0x08007ab4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <KeypadScan>:
void Line4ScanStart(KeypadSide side);
uint32_t Line4ScanDetection(KeypadSide side);
void Line4ScanOver(KeypadSide side);

uint32_t KeypadScan(KeypadSide side)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d101      	bne.n	80004dc <KeypadScan+0x14>
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <KeypadScan+0x138>)
 80004da:	e000      	b.n	80004de <KeypadScan+0x16>
 80004dc:	4b49      	ldr	r3, [pc, #292]	; (8000604 <KeypadScan+0x13c>)
 80004de:	60bb      	str	r3, [r7, #8]

	switch(*CurrentKeyState)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b0e      	cmp	r3, #14
 80004e6:	f200 8085 	bhi.w	80005f4 <KeypadScan+0x12c>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <KeypadScan+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	0800052d 	.word	0x0800052d
 80004f4:	0800053b 	.word	0x0800053b
 80004f8:	08000547 	.word	0x08000547
 80004fc:	08000555 	.word	0x08000555
 8000500:	08000563 	.word	0x08000563
 8000504:	0800056f 	.word	0x0800056f
 8000508:	0800057d 	.word	0x0800057d
 800050c:	0800058b 	.word	0x0800058b
 8000510:	08000597 	.word	0x08000597
 8000514:	080005a5 	.word	0x080005a5
 8000518:	080005b3 	.word	0x080005b3
 800051c:	080005bf 	.word	0x080005bf
 8000520:	080005cd 	.word	0x080005cd
 8000524:	080005db 	.word	0x080005db
 8000528:	080005e7 	.word	0x080005e7
	{
		case GND_START: ReValue = KEY_VALUE_NULL; GndScanStart(side); break;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fb3a 	bl	8000bac <GndScanStart>
 8000538:	e05c      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_DETECTION: ReValue = GndScanDetection(side); break;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fbbd 	bl	8000cbc <GndScanDetection>
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	e056      	b.n	80005f4 <KeypadScan+0x12c>
		case GND_OVER: ReValue = KEY_VALUE_NULL; GndScanOver(side); break;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fcc3 	bl	8000ed8 <GndScanOver>
 8000552:	e04f      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE1_START: ReValue = KEY_VALUE_NULL; Line1ScanStart(side); break;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd40 	bl	8000fe0 <Line1ScanStart>
 8000560:	e048      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_DETECTION: ReValue = Line1ScanDetection(side); break;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fdff 	bl	8001168 <Line1ScanDetection>
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	e042      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE1_OVER: ReValue = KEY_VALUE_NULL; Line1ScanOver(side); break;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fec5 	bl	8001304 <Line1ScanOver>
 800057a:	e03b      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE2_START: ReValue = KEY_VALUE_NULL; Line2ScanStart(side); break;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ff2e 	bl	80013e4 <Line2ScanStart>
 8000588:	e034      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_DETECTION: ReValue = Line2ScanDetection(side); break;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff89 	bl	80014a4 <Line2ScanDetection>
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	e02e      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE2_OVER: ReValue = KEY_VALUE_NULL; Line2ScanOver(side); break;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f823 	bl	80015e8 <Line2ScanOver>
 80005a2:	e027      	b.n	80005f4 <KeypadScan+0x12c>
		
		case LINE3_START: ReValue = KEY_VALUE_NULL; Line3ScanStart(side); break;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f878 	bl	80016a0 <Line3ScanStart>
 80005b0:	e020      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_DETECTION: ReValue = Line3ScanDetection(side); break;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f8bf 	bl	8001738 <Line3ScanDetection>
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	e01a      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE3_OVER: ReValue = KEY_VALUE_NULL; Line3ScanOver(side); break;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f92f 	bl	8001828 <Line3ScanOver>
 80005ca:	e013      	b.n	80005f4 <KeypadScan+0x12c>

		case LINE4_START: ReValue = KEY_VALUE_NULL; Line4ScanStart(side); break;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f970 	bl	80018b8 <Line4ScanStart>
 80005d8:	e00c      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_DETECTION: ReValue = Line4ScanDetection(side); break;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f9a3 	bl	8001928 <Line4ScanDetection>
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	e006      	b.n	80005f4 <KeypadScan+0x12c>
		case LINE4_OVER: ReValue = KEY_VALUE_NULL; Line4ScanOver(side); break;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f9d3 	bl	8001998 <Line4ScanOver>
 80005f2:	bf00      	nop
	}

	return ReValue;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0
 8000604:	200001f1 	.word	0x200001f1

08000608 <ConfigurationGnd>:
	}
}


void ConfigurationGnd(KeypadSide side)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <ConfigurationGnd+0xc0>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <ConfigurationGnd+0xc0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <ConfigurationGnd+0x4e>
 8000650:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000654:	e000      	b.n	8000658 <ConfigurationGnd+0x50>
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <ConfigurationGnd+0x5c>
 800065e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000662:	e000      	b.n	8000666 <ConfigurationGnd+0x5e>
 8000664:	2308      	movs	r3, #8
 8000666:	4313      	orrs	r3, r2
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	2a00      	cmp	r2, #0
 800066c:	d102      	bne.n	8000674 <ConfigurationGnd+0x6c>
 800066e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000672:	e000      	b.n	8000676 <ConfigurationGnd+0x6e>
 8000674:	2204      	movs	r2, #4
 8000676:	4313      	orrs	r3, r2
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	2a00      	cmp	r2, #0
 800067c:	d102      	bne.n	8000684 <ConfigurationGnd+0x7c>
 800067e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000682:	e000      	b.n	8000686 <ConfigurationGnd+0x7e>
 8000684:	2202      	movs	r2, #2
 8000686:	4313      	orrs	r3, r2
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	2a00      	cmp	r2, #0
 800068c:	d102      	bne.n	8000694 <ConfigurationGnd+0x8c>
 800068e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000692:	e000      	b.n	8000696 <ConfigurationGnd+0x8e>
 8000694:	2201      	movs	r2, #1
 8000696:	4313      	orrs	r3, r2
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2302      	movs	r3, #2
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLUP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <ConfigurationGnd+0xa8>
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <ConfigurationGnd+0xc4>)
 80006ae:	e000      	b.n	80006b2 <ConfigurationGnd+0xaa>
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <ConfigurationGnd+0xc8>)
 80006b2:	f107 0214 	add.w	r2, r7, #20
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 feb9 	bl	8002430 <HAL_GPIO_Init>
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <ConfigurationLine1>:

void ConfigurationLine1(KeypadSide side)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a3b      	ldr	r2, [pc, #236]	; (80007d4 <ConfigurationLine1+0x100>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <ConfigurationLine1+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <ConfigurationLine1+0x100>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a34      	ldr	r2, [pc, #208]	; (80007d4 <ConfigurationLine1+0x100>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <ConfigurationLine1+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <ConfigurationLine1+0x4e>
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	e000      	b.n	8000724 <ConfigurationLine1+0x50>
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <ConfigurationLine1+0x64>
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <ConfigurationLine1+0x104>)
 8000736:	e000      	b.n	800073a <ConfigurationLine1+0x66>
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <ConfigurationLine1+0x108>)
 800073a:	f107 0214 	add.w	r2, r7, #20
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fe75 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <ConfigurationLine1+0x7e>
 800074c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000750:	e000      	b.n	8000754 <ConfigurationLine1+0x80>
 8000752:	2208      	movs	r2, #8
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <ConfigurationLine1+0x8c>
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	e000      	b.n	8000762 <ConfigurationLine1+0x8e>
 8000760:	2304      	movs	r3, #4
 8000762:	4313      	orrs	r3, r2
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	2a00      	cmp	r2, #0
 8000768:	d102      	bne.n	8000770 <ConfigurationLine1+0x9c>
 800076a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800076e:	e000      	b.n	8000772 <ConfigurationLine1+0x9e>
 8000770:	2202      	movs	r2, #2
 8000772:	4313      	orrs	r3, r2
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	2a00      	cmp	r2, #0
 8000778:	d102      	bne.n	8000780 <ConfigurationLine1+0xac>
 800077a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800077e:	e000      	b.n	8000782 <ConfigurationLine1+0xae>
 8000780:	2201      	movs	r2, #1
 8000782:	4313      	orrs	r3, r2
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <ConfigurationLine1+0xc8>
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ConfigurationLine1+0x104>)
 800079a:	e000      	b.n	800079e <ConfigurationLine1+0xca>
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <ConfigurationLine1+0x108>)
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe43 	bl	8002430 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_SET);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <ConfigurationLine1+0xe0>
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <ConfigurationLine1+0x104>)
 80007b2:	e000      	b.n	80007b6 <ConfigurationLine1+0xe2>
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <ConfigurationLine1+0x108>)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <ConfigurationLine1+0xee>
 80007bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c0:	e000      	b.n	80007c4 <ConfigurationLine1+0xf0>
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f001 ffe4 	bl	8002794 <HAL_GPIO_WritePin>
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <ConfigurationLine2>:

void ConfigurationLine2(KeypadSide side)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <ConfigurationLine2+0x124>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a44      	ldr	r2, [pc, #272]	; (8000904 <ConfigurationLine2+0x124>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <ConfigurationLine2+0x124>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <ConfigurationLine2+0x124>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <ConfigurationLine2+0x124>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <ConfigurationLine2+0x124>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <ConfigurationLine2+0x4e>
 8000828:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800082c:	e000      	b.n	8000830 <ConfigurationLine2+0x50>
 800082e:	2240      	movs	r2, #64	; 0x40
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <ConfigurationLine2+0x5c>
 8000836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800083a:	e000      	b.n	800083e <ConfigurationLine2+0x5e>
 800083c:	2308      	movs	r3, #8
 800083e:	4313      	orrs	r3, r2
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <ConfigurationLine2+0x74>
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <ConfigurationLine2+0x128>)
 8000852:	e000      	b.n	8000856 <ConfigurationLine2+0x76>
 8000854:	4b2d      	ldr	r3, [pc, #180]	; (800090c <ConfigurationLine2+0x12c>)
 8000856:	f107 0214 	add.w	r2, r7, #20
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fde7 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_3(side) | IO_KEY_4(side) | IO_KEY_5(side);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <ConfigurationLine2+0x8e>
 8000868:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086c:	e000      	b.n	8000870 <ConfigurationLine2+0x90>
 800086e:	2204      	movs	r2, #4
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <ConfigurationLine2+0x9c>
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	e000      	b.n	800087e <ConfigurationLine2+0x9e>
 800087c:	2302      	movs	r3, #2
 800087e:	4313      	orrs	r3, r2
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	2a00      	cmp	r2, #0
 8000884:	d102      	bne.n	800088c <ConfigurationLine2+0xac>
 8000886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088a:	e000      	b.n	800088e <ConfigurationLine2+0xae>
 800088c:	2201      	movs	r2, #1
 800088e:	4313      	orrs	r3, r2
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <ConfigurationLine2+0xc8>
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <ConfigurationLine2+0x128>)
 80008a6:	e000      	b.n	80008aa <ConfigurationLine2+0xca>
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <ConfigurationLine2+0x12c>)
 80008aa:	f107 0214 	add.w	r2, r7, #20
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdbd 	bl	8002430 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_2(side), GPIO_PIN_SET);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <ConfigurationLine2+0xe0>
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <ConfigurationLine2+0x128>)
 80008be:	e000      	b.n	80008c2 <ConfigurationLine2+0xe2>
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <ConfigurationLine2+0x12c>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <ConfigurationLine2+0xee>
 80008c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008cc:	e000      	b.n	80008d0 <ConfigurationLine2+0xf0>
 80008ce:	2308      	movs	r3, #8
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f001 ff5e 	bl	8002794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side), GPIO_PIN_RESET);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <ConfigurationLine2+0x102>
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <ConfigurationLine2+0x128>)
 80008e0:	e000      	b.n	80008e4 <ConfigurationLine2+0x104>
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <ConfigurationLine2+0x12c>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <ConfigurationLine2+0x110>
 80008ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ee:	e000      	b.n	80008f2 <ConfigurationLine2+0x112>
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 ff4d 	bl	8002794 <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40020c00 	.word	0x40020c00

08000910 <ConfigurationLine3>:

void ConfigurationLine3(KeypadSide side)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <ConfigurationLine3+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <ConfigurationLine3+0x134>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <ConfigurationLine3+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <ConfigurationLine3+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <ConfigurationLine3+0x134>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <ConfigurationLine3+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <ConfigurationLine3+0x4e>
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	e000      	b.n	8000960 <ConfigurationLine3+0x50>
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <ConfigurationLine3+0x5c>
 8000966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800096a:	e000      	b.n	800096e <ConfigurationLine3+0x5e>
 800096c:	2308      	movs	r3, #8
 800096e:	4313      	orrs	r3, r2
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	2a00      	cmp	r2, #0
 8000974:	d102      	bne.n	800097c <ConfigurationLine3+0x6c>
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	e000      	b.n	800097e <ConfigurationLine3+0x6e>
 800097c:	2204      	movs	r2, #4
 800097e:	4313      	orrs	r3, r2
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <ConfigurationLine3+0x84>
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <ConfigurationLine3+0x138>)
 8000992:	e000      	b.n	8000996 <ConfigurationLine3+0x86>
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000996:	f107 0214 	add.w	r2, r7, #20
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fd47 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_4(side) | IO_KEY_5(side);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <ConfigurationLine3+0x9e>
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	e000      	b.n	80009b0 <ConfigurationLine3+0xa0>
 80009ae:	2202      	movs	r2, #2
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <ConfigurationLine3+0xac>
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	e000      	b.n	80009be <ConfigurationLine3+0xae>
 80009bc:	2301      	movs	r3, #1
 80009be:	4313      	orrs	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d101      	bne.n	80009d8 <ConfigurationLine3+0xc8>
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <ConfigurationLine3+0x138>)
 80009d6:	e000      	b.n	80009da <ConfigurationLine3+0xca>
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009da:	f107 0214 	add.w	r2, r7, #20
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fd25 	bl	8002430 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side), GPIO_PIN_RESET);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <ConfigurationLine3+0xe0>
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <ConfigurationLine3+0x138>)
 80009ee:	e000      	b.n	80009f2 <ConfigurationLine3+0xe2>
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <ConfigurationLine3+0x13c>)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <ConfigurationLine3+0xec>
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <ConfigurationLine3+0x140>)
 80009fa:	e000      	b.n	80009fe <ConfigurationLine3+0xee>
 80009fc:	2240      	movs	r2, #64	; 0x40
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <ConfigurationLine3+0xfa>
 8000a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a08:	e000      	b.n	8000a0c <ConfigurationLine3+0xfc>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f001 febd 	bl	8002794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_3(side), GPIO_PIN_SET);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <ConfigurationLine3+0x114>
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ConfigurationLine3+0x138>)
 8000a22:	e000      	b.n	8000a26 <ConfigurationLine3+0x116>
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <ConfigurationLine3+0x13c>)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <ConfigurationLine3+0x122>
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	e000      	b.n	8000a34 <ConfigurationLine3+0x124>
 8000a32:	2304      	movs	r3, #4
 8000a34:	2201      	movs	r2, #1
 8000a36:	4619      	mov	r1, r3
 8000a38:	f001 feac 	bl	8002794 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	ffff8000 	.word	0xffff8000

08000a54 <ConfigurationLine4>:

void ConfigurationLine4(KeypadSide side)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <ConfigurationLine4+0x148>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]


  GPIO_InitStructure.Pin = IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side) | IO_KEY_4(side);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <ConfigurationLine4+0x4e>
 8000a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa0:	e000      	b.n	8000aa4 <ConfigurationLine4+0x50>
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <ConfigurationLine4+0x5c>
 8000aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aae:	e000      	b.n	8000ab2 <ConfigurationLine4+0x5e>
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d102      	bne.n	8000ac0 <ConfigurationLine4+0x6c>
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	e000      	b.n	8000ac2 <ConfigurationLine4+0x6e>
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d102      	bne.n	8000ad0 <ConfigurationLine4+0x7c>
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	e000      	b.n	8000ad2 <ConfigurationLine4+0x7e>
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <ConfigurationLine4+0x94>
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000ae6:	e000      	b.n	8000aea <ConfigurationLine4+0x96>
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000aea:	f107 0214 	add.w	r2, r7, #20
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fc9d 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin = IO_KEY_5(side);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <ConfigurationLine4+0xae>
 8000afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b00:	e000      	b.n	8000b04 <ConfigurationLine4+0xb0>
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_KEY_GPIO(side), &GPIO_InitStructure);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <ConfigurationLine4+0xc8>
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b1a:	e000      	b.n	8000b1e <ConfigurationLine4+0xca>
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b1e:	f107 0214 	add.w	r2, r7, #20
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fc83 	bl	8002430 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_1(side) | IO_KEY_2(side) | IO_KEY_3(side), GPIO_PIN_RESET);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <ConfigurationLine4+0xe0>
 8000b30:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b32:	e000      	b.n	8000b36 <ConfigurationLine4+0xe2>
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <ConfigurationLine4+0xec>
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <ConfigurationLine4+0x154>)
 8000b3e:	e000      	b.n	8000b42 <ConfigurationLine4+0xee>
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <ConfigurationLine4+0xfa>
 8000b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4c:	e000      	b.n	8000b50 <ConfigurationLine4+0xfc>
 8000b4e:	2308      	movs	r3, #8
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d102      	bne.n	8000b60 <ConfigurationLine4+0x10c>
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	e000      	b.n	8000b62 <ConfigurationLine4+0x10e>
 8000b60:	2204      	movs	r2, #4
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f001 fe12 	bl	8002794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IO_KEY_GPIO(side), IO_KEY_4(side), GPIO_PIN_SET);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <ConfigurationLine4+0x126>
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <ConfigurationLine4+0x14c>)
 8000b78:	e000      	b.n	8000b7c <ConfigurationLine4+0x128>
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <ConfigurationLine4+0x150>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <ConfigurationLine4+0x134>
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	e000      	b.n	8000b8a <ConfigurationLine4+0x136>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f001 fe01 	bl	8002794 <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	ffff8000 	.word	0xffff8000

08000bac <GndScanStart>:

void GndScanStart(KeypadSide side)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	ConfigurationGnd(side);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd25 	bl	8000608 <ConfigurationGnd>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <GndScanStart+0x1c>
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <GndScanStart+0x100>)
 8000bc6:	e000      	b.n	8000bca <GndScanStart+0x1e>
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <GndScanStart+0x104>)
 8000bca:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <GndScanStart+0x2a>
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <GndScanStart+0x108>)
 8000bd4:	e000      	b.n	8000bd8 <GndScanStart+0x2c>
 8000bd6:	4a38      	ldr	r2, [pc, #224]	; (8000cb8 <GndScanStart+0x10c>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <GndScanStart+0x38>
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	e000      	b.n	8000be6 <GndScanStart+0x3a>
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	4619      	mov	r1, r3
 8000be8:	4610      	mov	r0, r2
 8000bea:	f001 fdbb 	bl	8002764 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d04f      	beq.n	8000c94 <GndScanStart+0xe8>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <GndScanStart+0x52>
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <GndScanStart+0x108>)
 8000bfc:	e000      	b.n	8000c00 <GndScanStart+0x54>
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <GndScanStart+0x10c>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <GndScanStart+0x60>
 8000c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c0a:	e000      	b.n	8000c0e <GndScanStart+0x62>
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4610      	mov	r0, r2
 8000c12:	f001 fda7 	bl	8002764 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d03b      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <GndScanStart+0x7a>
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <GndScanStart+0x108>)
 8000c24:	e000      	b.n	8000c28 <GndScanStart+0x7c>
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <GndScanStart+0x10c>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <GndScanStart+0x88>
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	e000      	b.n	8000c36 <GndScanStart+0x8a>
 8000c34:	2304      	movs	r3, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f001 fd93 	bl	8002764 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d027      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <GndScanStart+0xa2>
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <GndScanStart+0x108>)
 8000c4c:	e000      	b.n	8000c50 <GndScanStart+0xa4>
 8000c4e:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <GndScanStart+0x10c>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <GndScanStart+0xb0>
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	e000      	b.n	8000c5e <GndScanStart+0xb2>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4610      	mov	r0, r2
 8000c62:	f001 fd7f 	bl	8002764 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <GndScanStart+0xe8>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <GndScanStart+0xca>
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <GndScanStart+0x108>)
 8000c74:	e000      	b.n	8000c78 <GndScanStart+0xcc>
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <GndScanStart+0x10c>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <GndScanStart+0xd8>
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	e000      	b.n	8000c86 <GndScanStart+0xda>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f001 fd6b 	bl	8002764 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <GndScanStart+0xf0>
	{
		*CurrentKeyState = GND_DETECTION;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e002      	b.n	8000ca2 <GndScanStart+0xf6>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200001f0 	.word	0x200001f0
 8000cb0:	200001f1 	.word	0x200001f1
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <GndScanDetection>:

uint32_t GndScanDetection(KeypadSide side)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <GndScanDetection+0x14>
 8000ccc:	4b7e      	ldr	r3, [pc, #504]	; (8000ec8 <GndScanDetection+0x20c>)
 8000cce:	e000      	b.n	8000cd2 <GndScanDetection+0x16>
 8000cd0:	4b7e      	ldr	r3, [pc, #504]	; (8000ecc <GndScanDetection+0x210>)
 8000cd2:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0))
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <GndScanDetection+0x22>
 8000cda:	4a7d      	ldr	r2, [pc, #500]	; (8000ed0 <GndScanDetection+0x214>)
 8000cdc:	e000      	b.n	8000ce0 <GndScanDetection+0x24>
 8000cde:	4a7d      	ldr	r2, [pc, #500]	; (8000ed4 <GndScanDetection+0x218>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <GndScanDetection+0x30>
 8000ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cea:	e000      	b.n	8000cee <GndScanDetection+0x32>
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f001 fd37 	bl	8002764 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d050      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <GndScanDetection+0x4a>
 8000d02:	4a73      	ldr	r2, [pc, #460]	; (8000ed0 <GndScanDetection+0x214>)
 8000d04:	e000      	b.n	8000d08 <GndScanDetection+0x4c>
 8000d06:	4a73      	ldr	r2, [pc, #460]	; (8000ed4 <GndScanDetection+0x218>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <GndScanDetection+0x58>
 8000d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d12:	e000      	b.n	8000d16 <GndScanDetection+0x5a>
 8000d14:	2308      	movs	r3, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f001 fd23 	bl	8002764 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d03c      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <GndScanDetection+0x72>
 8000d2a:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <GndScanDetection+0x214>)
 8000d2c:	e000      	b.n	8000d30 <GndScanDetection+0x74>
 8000d2e:	4a69      	ldr	r2, [pc, #420]	; (8000ed4 <GndScanDetection+0x218>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <GndScanDetection+0x80>
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	e000      	b.n	8000d3e <GndScanDetection+0x82>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4610      	mov	r0, r2
 8000d42:	f001 fd0f 	bl	8002764 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d028      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <GndScanDetection+0x9a>
 8000d52:	4a5f      	ldr	r2, [pc, #380]	; (8000ed0 <GndScanDetection+0x214>)
 8000d54:	e000      	b.n	8000d58 <GndScanDetection+0x9c>
 8000d56:	4a5f      	ldr	r2, [pc, #380]	; (8000ed4 <GndScanDetection+0x218>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <GndScanDetection+0xa8>
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	e000      	b.n	8000d66 <GndScanDetection+0xaa>
 8000d64:	2302      	movs	r3, #2
 8000d66:	4619      	mov	r1, r3
 8000d68:	4610      	mov	r0, r2
 8000d6a:	f001 fcfb 	bl	8002764 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d014      	beq.n	8000d9e <GndScanDetection+0xe2>
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <GndScanDetection+0xc2>
 8000d7a:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <GndScanDetection+0x214>)
 8000d7c:	e000      	b.n	8000d80 <GndScanDetection+0xc4>
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <GndScanDetection+0x218>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <GndScanDetection+0xd0>
 8000d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8a:	e000      	b.n	8000d8e <GndScanDetection+0xd2>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f001 fce7 	bl	8002764 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 808a 	bne.w	8000eb2 <GndScanDetection+0x1f6>
	{
		if(GET_IO_KEY_1(side) == 0)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <GndScanDetection+0xec>
 8000da4:	4a4a      	ldr	r2, [pc, #296]	; (8000ed0 <GndScanDetection+0x214>)
 8000da6:	e000      	b.n	8000daa <GndScanDetection+0xee>
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <GndScanDetection+0x218>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <GndScanDetection+0xfa>
 8000db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db4:	e000      	b.n	8000db8 <GndScanDetection+0xfc>
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f001 fcd2 	bl	8002764 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <GndScanDetection+0x11a>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_LEFT : KEY_VALUE_LEFT);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <GndScanDetection+0x114>
 8000dcc:	2305      	movs	r3, #5
 8000dce:	e000      	b.n	8000dd2 <GndScanDetection+0x116>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e069      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_2(side) == 0))
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <GndScanDetection+0x124>
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <GndScanDetection+0x214>)
 8000dde:	e000      	b.n	8000de2 <GndScanDetection+0x126>
 8000de0:	4a3c      	ldr	r2, [pc, #240]	; (8000ed4 <GndScanDetection+0x218>)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <GndScanDetection+0x132>
 8000de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dec:	e000      	b.n	8000df0 <GndScanDetection+0x134>
 8000dee:	2308      	movs	r3, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f001 fcb6 	bl	8002764 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <GndScanDetection+0x152>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_UP : KEY_VALUE_UP);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <GndScanDetection+0x14c>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e000      	b.n	8000e0a <GndScanDetection+0x14e>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e04d      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_3(side) == 0))
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <GndScanDetection+0x15c>
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <GndScanDetection+0x214>)
 8000e16:	e000      	b.n	8000e1a <GndScanDetection+0x15e>
 8000e18:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <GndScanDetection+0x218>)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <GndScanDetection+0x16a>
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	e000      	b.n	8000e28 <GndScanDetection+0x16c>
 8000e26:	2304      	movs	r3, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f001 fc9a 	bl	8002764 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <GndScanDetection+0x180>
		{
			ReValue = KEY_VALUE_PRESS;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e036      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_4(side) == 0))
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <GndScanDetection+0x18a>
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <GndScanDetection+0x214>)
 8000e44:	e000      	b.n	8000e48 <GndScanDetection+0x18c>
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <GndScanDetection+0x218>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <GndScanDetection+0x198>
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	e000      	b.n	8000e56 <GndScanDetection+0x19a>
 8000e54:	2302      	movs	r3, #2
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f001 fc83 	bl	8002764 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <GndScanDetection+0x1b8>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_DOWN : KEY_VALUE_DOWN);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <GndScanDetection+0x1b2>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e000      	b.n	8000e70 <GndScanDetection+0x1b4>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e01a      	b.n	8000eaa <GndScanDetection+0x1ee>
		}
		else if((GET_IO_KEY_5(side) == 0))
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <GndScanDetection+0x1c2>
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <GndScanDetection+0x214>)
 8000e7c:	e000      	b.n	8000e80 <GndScanDetection+0x1c4>
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <GndScanDetection+0x218>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <GndScanDetection+0x1d0>
 8000e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8a:	e000      	b.n	8000e8e <GndScanDetection+0x1d2>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f001 fc67 	bl	8002764 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <GndScanDetection+0x1ee>
		{
			ReValue = (side == LEFT ? KEY_VALUE_REVERSED_RIGHT : KEY_VALUE_RIGHT);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <GndScanDetection+0x1ea>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <GndScanDetection+0x1ec>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	60fb      	str	r3, [r7, #12]
		}	

		*CurrentKeyState = GND_DETECTION;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e004      	b.n	8000ebc <GndScanDetection+0x200>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
	}

	return ReValue;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}	
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001f0 	.word	0x200001f0
 8000ecc:	200001f1 	.word	0x200001f1
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <GndScanOver>:
	
void GndScanOver(KeypadSide side)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <GndScanOver+0x14>
 8000ee8:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <GndScanOver+0xf8>)
 8000eea:	e000      	b.n	8000eee <GndScanOver+0x16>
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <GndScanOver+0xfc>)
 8000eee:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_1(side) == 0)||(GET_IO_KEY_2(side) == 0)||(GET_IO_KEY_3(side) == 0)||(GET_IO_KEY_4(side) == 0)||(GET_IO_KEY_5(side) == 0)))
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <GndScanOver+0x22>
 8000ef6:	4a38      	ldr	r2, [pc, #224]	; (8000fd8 <GndScanOver+0x100>)
 8000ef8:	e000      	b.n	8000efc <GndScanOver+0x24>
 8000efa:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <GndScanOver+0x104>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <GndScanOver+0x30>
 8000f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f06:	e000      	b.n	8000f0a <GndScanOver+0x32>
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	f001 fc29 	bl	8002764 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d04f      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <GndScanOver+0x4a>
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <GndScanOver+0x100>)
 8000f20:	e000      	b.n	8000f24 <GndScanOver+0x4c>
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <GndScanOver+0x104>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <GndScanOver+0x58>
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	e000      	b.n	8000f32 <GndScanOver+0x5a>
 8000f30:	2308      	movs	r3, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4610      	mov	r0, r2
 8000f36:	f001 fc15 	bl	8002764 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03b      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <GndScanOver+0x72>
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <GndScanOver+0x100>)
 8000f48:	e000      	b.n	8000f4c <GndScanOver+0x74>
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <GndScanOver+0x104>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <GndScanOver+0x80>
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	e000      	b.n	8000f5a <GndScanOver+0x82>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f001 fc01 	bl	8002764 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d027      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <GndScanOver+0x9a>
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <GndScanOver+0x100>)
 8000f70:	e000      	b.n	8000f74 <GndScanOver+0x9c>
 8000f72:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <GndScanOver+0x104>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <GndScanOver+0xa8>
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	e000      	b.n	8000f82 <GndScanOver+0xaa>
 8000f80:	2302      	movs	r3, #2
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 fbed 	bl	8002764 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <GndScanOver+0xe0>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <GndScanOver+0xc2>
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <GndScanOver+0x100>)
 8000f98:	e000      	b.n	8000f9c <GndScanOver+0xc4>
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <GndScanOver+0x104>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <GndScanOver+0xd0>
 8000fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa6:	e000      	b.n	8000faa <GndScanOver+0xd2>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f001 fbd9 	bl	8002764 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <GndScanOver+0xe8>
	{
		*CurrentKeyState = GND_OVER;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <GndScanOver+0xee>
	}
	else
	{
		*CurrentKeyState = LINE1_START;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	200001f1 	.word	0x200001f1
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <Line1ScanStart>:
/* Scan line 1 */
void Line1ScanStart(KeypadSide side)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine1(side);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb71 	bl	80006d4 <ConfigurationLine1>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <Line1ScanStart+0x1c>
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <Line1ScanStart+0x178>)
 8000ffa:	e000      	b.n	8000ffe <Line1ScanStart+0x1e>
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <Line1ScanStart+0x17c>)
 8000ffe:	60fb      	str	r3, [r7, #12]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <Line1ScanStart+0x2a>
 8001006:	4a56      	ldr	r2, [pc, #344]	; (8001160 <Line1ScanStart+0x180>)
 8001008:	e000      	b.n	800100c <Line1ScanStart+0x2c>
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <Line1ScanStart+0x184>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <Line1ScanStart+0x38>
 8001012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001016:	e000      	b.n	800101a <Line1ScanStart+0x3a>
 8001018:	2308      	movs	r3, #8
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f001 fba1 	bl	8002764 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d03b      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <Line1ScanStart+0x52>
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <Line1ScanStart+0x180>)
 8001030:	e000      	b.n	8001034 <Line1ScanStart+0x54>
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <Line1ScanStart+0x184>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <Line1ScanStart+0x60>
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	e000      	b.n	8001042 <Line1ScanStart+0x62>
 8001040:	2304      	movs	r3, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f001 fb8d 	bl	8002764 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d027      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <Line1ScanStart+0x7a>
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <Line1ScanStart+0x180>)
 8001058:	e000      	b.n	800105c <Line1ScanStart+0x7c>
 800105a:	4a42      	ldr	r2, [pc, #264]	; (8001164 <Line1ScanStart+0x184>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <Line1ScanStart+0x88>
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	e000      	b.n	800106a <Line1ScanStart+0x8a>
 8001068:	2302      	movs	r3, #2
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f001 fb79 	bl	8002764 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d013      	beq.n	80010a0 <Line1ScanStart+0xc0>
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <Line1ScanStart+0xa2>
 800107e:	4a38      	ldr	r2, [pc, #224]	; (8001160 <Line1ScanStart+0x180>)
 8001080:	e000      	b.n	8001084 <Line1ScanStart+0xa4>
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <Line1ScanStart+0x184>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <Line1ScanStart+0xb0>
 800108a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800108e:	e000      	b.n	8001092 <Line1ScanStart+0xb2>
 8001090:	2301      	movs	r3, #1
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 fb65 	bl	8002764 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d103      	bne.n	80010a8 <Line1ScanStart+0xc8>
	{
		*CurrentKeyState = LINE1_DETECTION;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2204      	movs	r2, #4
 80010a4:	701a      	strb	r2, [r3, #0]
	}
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
	{
		*CurrentKeyState = LINE2_START;
	}		
}
 80010a6:	e052      	b.n	800114e <Line1ScanStart+0x16e>
	else if((!((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))))
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <Line1ScanStart+0xd2>
 80010ae:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <Line1ScanStart+0x180>)
 80010b0:	e000      	b.n	80010b4 <Line1ScanStart+0xd4>
 80010b2:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <Line1ScanStart+0x184>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <Line1ScanStart+0xe0>
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	e000      	b.n	80010c2 <Line1ScanStart+0xe2>
 80010c0:	2308      	movs	r3, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 fb4d 	bl	8002764 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d03e      	beq.n	800114e <Line1ScanStart+0x16e>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <Line1ScanStart+0xfa>
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <Line1ScanStart+0x180>)
 80010d8:	e000      	b.n	80010dc <Line1ScanStart+0xfc>
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <Line1ScanStart+0x184>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <Line1ScanStart+0x108>
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	e000      	b.n	80010ea <Line1ScanStart+0x10a>
 80010e8:	2304      	movs	r3, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f001 fb39 	bl	8002764 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d02a      	beq.n	800114e <Line1ScanStart+0x16e>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <Line1ScanStart+0x122>
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <Line1ScanStart+0x180>)
 8001100:	e000      	b.n	8001104 <Line1ScanStart+0x124>
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <Line1ScanStart+0x184>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <Line1ScanStart+0x130>
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	e000      	b.n	8001112 <Line1ScanStart+0x132>
 8001110:	2302      	movs	r3, #2
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f001 fb25 	bl	8002764 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d016      	beq.n	800114e <Line1ScanStart+0x16e>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <Line1ScanStart+0x14a>
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <Line1ScanStart+0x180>)
 8001128:	e000      	b.n	800112c <Line1ScanStart+0x14c>
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <Line1ScanStart+0x184>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <Line1ScanStart+0x158>
 8001132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001136:	e000      	b.n	800113a <Line1ScanStart+0x15a>
 8001138:	2301      	movs	r3, #1
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f001 fb11 	bl	8002764 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d002      	beq.n	800114e <Line1ScanStart+0x16e>
		*CurrentKeyState = LINE2_START;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2206      	movs	r2, #6
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001f0 	.word	0x200001f0
 800115c:	200001f1 	.word	0x200001f1
 8001160:	40020400 	.word	0x40020400
 8001164:	40020c00 	.word	0x40020c00

08001168 <Line1ScanDetection>:

uint32_t Line1ScanDetection(KeypadSide side)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <Line1ScanDetection+0x14>
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <Line1ScanDetection+0x18c>)
 800117a:	e000      	b.n	800117e <Line1ScanDetection+0x16>
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <Line1ScanDetection+0x190>)
 800117e:	60bb      	str	r3, [r7, #8]

	if(((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1)))
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <Line1ScanDetection+0x22>
 8001186:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <Line1ScanDetection+0x194>)
 8001188:	e000      	b.n	800118c <Line1ScanDetection+0x24>
 800118a:	4a5d      	ldr	r2, [pc, #372]	; (8001300 <Line1ScanDetection+0x198>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <Line1ScanDetection+0x30>
 8001192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001196:	e000      	b.n	800119a <Line1ScanDetection+0x32>
 8001198:	2308      	movs	r3, #8
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f001 fae1 	bl	8002764 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d03b      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <Line1ScanDetection+0x4a>
 80011ae:	4a53      	ldr	r2, [pc, #332]	; (80012fc <Line1ScanDetection+0x194>)
 80011b0:	e000      	b.n	80011b4 <Line1ScanDetection+0x4c>
 80011b2:	4a53      	ldr	r2, [pc, #332]	; (8001300 <Line1ScanDetection+0x198>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <Line1ScanDetection+0x58>
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	e000      	b.n	80011c2 <Line1ScanDetection+0x5a>
 80011c0:	2304      	movs	r3, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f001 facd 	bl	8002764 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d027      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <Line1ScanDetection+0x72>
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <Line1ScanDetection+0x194>)
 80011d8:	e000      	b.n	80011dc <Line1ScanDetection+0x74>
 80011da:	4a49      	ldr	r2, [pc, #292]	; (8001300 <Line1ScanDetection+0x198>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <Line1ScanDetection+0x80>
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	e000      	b.n	80011ea <Line1ScanDetection+0x82>
 80011e8:	2302      	movs	r3, #2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f001 fab9 	bl	8002764 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d013      	beq.n	8001220 <Line1ScanDetection+0xb8>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <Line1ScanDetection+0x9a>
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <Line1ScanDetection+0x194>)
 8001200:	e000      	b.n	8001204 <Line1ScanDetection+0x9c>
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <Line1ScanDetection+0x198>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <Line1ScanDetection+0xa8>
 800120a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800120e:	e000      	b.n	8001212 <Line1ScanDetection+0xaa>
 8001210:	2301      	movs	r3, #1
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 faa5 	bl	8002764 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d15e      	bne.n	80012de <Line1ScanDetection+0x176>
	{
		if(GET_IO_KEY_2(side) == 1)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <Line1ScanDetection+0xc2>
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <Line1ScanDetection+0x194>)
 8001228:	e000      	b.n	800122c <Line1ScanDetection+0xc4>
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <Line1ScanDetection+0x198>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <Line1ScanDetection+0xd0>
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	e000      	b.n	800123a <Line1ScanDetection+0xd2>
 8001238:	2308      	movs	r3, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f001 fa91 	bl	8002764 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <Line1ScanDetection+0xe6>
		{
			ReValue = KEY_VALUE_ONE;	
 8001248:	2306      	movs	r3, #6
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e043      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_3(side) == 1)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <Line1ScanDetection+0xf0>
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <Line1ScanDetection+0x194>)
 8001256:	e000      	b.n	800125a <Line1ScanDetection+0xf2>
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <Line1ScanDetection+0x198>)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <Line1ScanDetection+0xfe>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e000      	b.n	8001268 <Line1ScanDetection+0x100>
 8001266:	2304      	movs	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f001 fa7a 	bl	8002764 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <Line1ScanDetection+0x114>
		{
			ReValue = KEY_VALUE_TWO;
 8001276:	2307      	movs	r3, #7
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e02c      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_4(side) == 1)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <Line1ScanDetection+0x11e>
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <Line1ScanDetection+0x194>)
 8001284:	e000      	b.n	8001288 <Line1ScanDetection+0x120>
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <Line1ScanDetection+0x198>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <Line1ScanDetection+0x12c>
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	e000      	b.n	8001296 <Line1ScanDetection+0x12e>
 8001294:	2302      	movs	r3, #2
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f001 fa63 	bl	8002764 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <Line1ScanDetection+0x142>
		{
			ReValue = KEY_VALUE_THREE;
 80012a4:	2308      	movs	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e015      	b.n	80012d6 <Line1ScanDetection+0x16e>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <Line1ScanDetection+0x14c>
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <Line1ScanDetection+0x194>)
 80012b2:	e000      	b.n	80012b6 <Line1ScanDetection+0x14e>
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <Line1ScanDetection+0x198>)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <Line1ScanDetection+0x15a>
 80012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c0:	e000      	b.n	80012c4 <Line1ScanDetection+0x15c>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f001 fa4c 	bl	8002764 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <Line1ScanDetection+0x16e>
		{
			ReValue = KEY_VALUE_FOUR;
 80012d2:	2309      	movs	r3, #9
 80012d4:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE1_DETECTION;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2204      	movs	r2, #4
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e004      	b.n	80012e8 <Line1ScanDetection+0x180>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2206      	movs	r2, #6
 80012e2:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	200001f1 	.word	0x200001f1
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020c00 	.word	0x40020c00

08001304 <Line1ScanOver>:

void Line1ScanOver(KeypadSide side)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <Line1ScanOver+0x14>
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <Line1ScanOver+0xd0>)
 8001316:	e000      	b.n	800131a <Line1ScanOver+0x16>
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <Line1ScanOver+0xd4>)
 800131a:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_2(side) == 1)||(GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <Line1ScanOver+0x22>
 8001322:	4a2e      	ldr	r2, [pc, #184]	; (80013dc <Line1ScanOver+0xd8>)
 8001324:	e000      	b.n	8001328 <Line1ScanOver+0x24>
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <Line1ScanOver+0xdc>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <Line1ScanOver+0x30>
 800132e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001332:	e000      	b.n	8001336 <Line1ScanOver+0x32>
 8001334:	2308      	movs	r3, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f001 fa13 	bl	8002764 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d03b      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <Line1ScanOver+0x4a>
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <Line1ScanOver+0xd8>)
 800134c:	e000      	b.n	8001350 <Line1ScanOver+0x4c>
 800134e:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <Line1ScanOver+0xdc>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <Line1ScanOver+0x58>
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	e000      	b.n	800135e <Line1ScanOver+0x5a>
 800135c:	2304      	movs	r3, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f001 f9ff 	bl	8002764 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d027      	beq.n	80013bc <Line1ScanOver+0xb8>
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <Line1ScanOver+0x72>
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <Line1ScanOver+0xd8>)
 8001374:	e000      	b.n	8001378 <Line1ScanOver+0x74>
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <Line1ScanOver+0xdc>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <Line1ScanOver+0x80>
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	e000      	b.n	8001386 <Line1ScanOver+0x82>
 8001384:	2302      	movs	r3, #2
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f001 f9eb 	bl	8002764 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d013      	beq.n	80013bc <Line1ScanOver+0xb8>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <Line1ScanOver+0x9a>
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <Line1ScanOver+0xd8>)
 800139c:	e000      	b.n	80013a0 <Line1ScanOver+0x9c>
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <Line1ScanOver+0xdc>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <Line1ScanOver+0xa8>
 80013a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013aa:	e000      	b.n	80013ae <Line1ScanOver+0xaa>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f001 f9d7 	bl	8002764 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d103      	bne.n	80013c4 <Line1ScanOver+0xc0>
	{
		*CurrentKeyState = LINE1_OVER;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2205      	movs	r2, #5
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e002      	b.n	80013ca <Line1ScanOver+0xc6>
	}
	else
	{
		*CurrentKeyState = LINE2_START;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2206      	movs	r2, #6
 80013c8:	701a      	strb	r2, [r3, #0]
	}
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001f0 	.word	0x200001f0
 80013d8:	200001f1 	.word	0x200001f1
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <Line2ScanStart>:
/* Scan line 2 */
void Line2ScanStart(KeypadSide side)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine2(side);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f9f5 	bl	80007e0 <ConfigurationLine2>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <Line2ScanStart+0x1c>
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <Line2ScanStart+0xb0>)
 80013fe:	e000      	b.n	8001402 <Line2ScanStart+0x1e>
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <Line2ScanStart+0xb4>)
 8001402:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <Line2ScanStart+0x2a>
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <Line2ScanStart+0xb8>)
 800140c:	e000      	b.n	8001410 <Line2ScanStart+0x2c>
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <Line2ScanStart+0xbc>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <Line2ScanStart+0x38>
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	e000      	b.n	800141e <Line2ScanStart+0x3a>
 800141c:	2304      	movs	r3, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f001 f99f 	bl	8002764 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d027      	beq.n	800147c <Line2ScanStart+0x98>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <Line2ScanStart+0x52>
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <Line2ScanStart+0xb8>)
 8001434:	e000      	b.n	8001438 <Line2ScanStart+0x54>
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <Line2ScanStart+0xbc>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <Line2ScanStart+0x60>
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	e000      	b.n	8001446 <Line2ScanStart+0x62>
 8001444:	2302      	movs	r3, #2
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f001 f98b 	bl	8002764 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d013      	beq.n	800147c <Line2ScanStart+0x98>
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <Line2ScanStart+0x7a>
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <Line2ScanStart+0xb8>)
 800145c:	e000      	b.n	8001460 <Line2ScanStart+0x7c>
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <Line2ScanStart+0xbc>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <Line2ScanStart+0x88>
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	e000      	b.n	800146e <Line2ScanStart+0x8a>
 800146c:	2301      	movs	r3, #1
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f001 f977 	bl	8002764 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <Line2ScanStart+0xa0>
	{
		*CurrentKeyState = LINE2_DETECTION;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2207      	movs	r2, #7
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e002      	b.n	800148a <Line2ScanStart+0xa6>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2209      	movs	r2, #9
 8001488:	701a      	strb	r2, [r3, #0]
	}		
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0
 8001498:	200001f1 	.word	0x200001f1
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <Line2ScanDetection>:

uint32_t Line2ScanDetection(KeypadSide side)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <Line2ScanDetection+0x14>
 80014b4:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <Line2ScanDetection+0x134>)
 80014b6:	e000      	b.n	80014ba <Line2ScanDetection+0x16>
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <Line2ScanDetection+0x138>)
 80014ba:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <Line2ScanDetection+0x22>
 80014c2:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014c4:	e000      	b.n	80014c8 <Line2ScanDetection+0x24>
 80014c6:	4a47      	ldr	r2, [pc, #284]	; (80015e4 <Line2ScanDetection+0x140>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <Line2ScanDetection+0x30>
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	e000      	b.n	80014d6 <Line2ScanDetection+0x32>
 80014d4:	2304      	movs	r3, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f001 f943 	bl	8002764 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d027      	beq.n	8001534 <Line2ScanDetection+0x90>
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <Line2ScanDetection+0x4a>
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <Line2ScanDetection+0x13c>)
 80014ec:	e000      	b.n	80014f0 <Line2ScanDetection+0x4c>
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <Line2ScanDetection+0x140>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <Line2ScanDetection+0x58>
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	e000      	b.n	80014fe <Line2ScanDetection+0x5a>
 80014fc:	2302      	movs	r3, #2
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f001 f92f 	bl	8002764 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d013      	beq.n	8001534 <Line2ScanDetection+0x90>
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <Line2ScanDetection+0x72>
 8001512:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001514:	e000      	b.n	8001518 <Line2ScanDetection+0x74>
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <Line2ScanDetection+0x140>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <Line2ScanDetection+0x80>
 800151e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001522:	e000      	b.n	8001526 <Line2ScanDetection+0x82>
 8001524:	2301      	movs	r3, #1
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f001 f91b 	bl	8002764 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d147      	bne.n	80015c4 <Line2ScanDetection+0x120>
	{
		if(GET_IO_KEY_3(side) == 1)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <Line2ScanDetection+0x9a>
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <Line2ScanDetection+0x13c>)
 800153c:	e000      	b.n	8001540 <Line2ScanDetection+0x9c>
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <Line2ScanDetection+0x140>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <Line2ScanDetection+0xa8>
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	e000      	b.n	800154e <Line2ScanDetection+0xaa>
 800154c:	2304      	movs	r3, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f001 f907 	bl	8002764 <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <Line2ScanDetection+0xbe>
		{
			ReValue = KEY_VALUE_FIVE;	
 800155c:	230a      	movs	r3, #10
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e02c      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_4(side) == 1)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <Line2ScanDetection+0xc8>
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <Line2ScanDetection+0x13c>)
 800156a:	e000      	b.n	800156e <Line2ScanDetection+0xca>
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <Line2ScanDetection+0x140>)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <Line2ScanDetection+0xd6>
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	e000      	b.n	800157c <Line2ScanDetection+0xd8>
 800157a:	2302      	movs	r3, #2
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f001 f8f0 	bl	8002764 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <Line2ScanDetection+0xec>
		{
			ReValue = KEY_VALUE_SIX;
 800158a:	230b      	movs	r3, #11
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e015      	b.n	80015bc <Line2ScanDetection+0x118>
		}
		else if(GET_IO_KEY_5(side) == 1)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <Line2ScanDetection+0xf6>
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <Line2ScanDetection+0x13c>)
 8001598:	e000      	b.n	800159c <Line2ScanDetection+0xf8>
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <Line2ScanDetection+0x140>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <Line2ScanDetection+0x104>
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a6:	e000      	b.n	80015aa <Line2ScanDetection+0x106>
 80015a8:	2301      	movs	r3, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f001 f8d9 	bl	8002764 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <Line2ScanDetection+0x118>
		{
			ReValue = KEY_VALUE_SEVEN;
 80015b8:	230c      	movs	r3, #12
 80015ba:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE2_DETECTION;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2207      	movs	r2, #7
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e004      	b.n	80015ce <Line2ScanDetection+0x12a>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2209      	movs	r2, #9
 80015c8:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200001f0 	.word	0x200001f0
 80015dc:	200001f1 	.word	0x200001f1
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <Line2ScanOver>:

void Line2ScanOver(KeypadSide side)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <Line2ScanOver+0x14>
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <Line2ScanOver+0xa8>)
 80015fa:	e000      	b.n	80015fe <Line2ScanOver+0x16>
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <Line2ScanOver+0xac>)
 80015fe:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_3(side) == 1)||(GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <Line2ScanOver+0x22>
 8001606:	4a24      	ldr	r2, [pc, #144]	; (8001698 <Line2ScanOver+0xb0>)
 8001608:	e000      	b.n	800160c <Line2ScanOver+0x24>
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <Line2ScanOver+0xb4>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <Line2ScanOver+0x30>
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	e000      	b.n	800161a <Line2ScanOver+0x32>
 8001618:	2304      	movs	r3, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f001 f8a1 	bl	8002764 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d027      	beq.n	8001678 <Line2ScanOver+0x90>
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <Line2ScanOver+0x4a>
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <Line2ScanOver+0xb0>)
 8001630:	e000      	b.n	8001634 <Line2ScanOver+0x4c>
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <Line2ScanOver+0xb4>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <Line2ScanOver+0x58>
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	e000      	b.n	8001642 <Line2ScanOver+0x5a>
 8001640:	2302      	movs	r3, #2
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f001 f88d 	bl	8002764 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d013      	beq.n	8001678 <Line2ScanOver+0x90>
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <Line2ScanOver+0x72>
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <Line2ScanOver+0xb0>)
 8001658:	e000      	b.n	800165c <Line2ScanOver+0x74>
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <Line2ScanOver+0xb4>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <Line2ScanOver+0x80>
 8001662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001666:	e000      	b.n	800166a <Line2ScanOver+0x82>
 8001668:	2301      	movs	r3, #1
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f001 f879 	bl	8002764 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d103      	bne.n	8001680 <Line2ScanOver+0x98>
	{
		*CurrentKeyState = LINE2_OVER;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2208      	movs	r2, #8
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e002      	b.n	8001686 <Line2ScanOver+0x9e>
	}
	else
	{
		*CurrentKeyState = LINE3_START;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2209      	movs	r2, #9
 8001684:	701a      	strb	r2, [r3, #0]
	}
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001f0 	.word	0x200001f0
 8001694:	200001f1 	.word	0x200001f1
 8001698:	40020400 	.word	0x40020400
 800169c:	40020c00 	.word	0x40020c00

080016a0 <Line3ScanStart>:
/* Scan line 3 */
void Line3ScanStart(KeypadSide side)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine3(side);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f92f 	bl	8000910 <ConfigurationLine3>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <Line3ScanStart+0x1c>
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <Line3ScanStart+0x88>)
 80016ba:	e000      	b.n	80016be <Line3ScanStart+0x1e>
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <Line3ScanStart+0x8c>)
 80016be:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <Line3ScanStart+0x2a>
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <Line3ScanStart+0x90>)
 80016c8:	e000      	b.n	80016cc <Line3ScanStart+0x2c>
 80016ca:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <Line3ScanStart+0x94>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <Line3ScanStart+0x38>
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	e000      	b.n	80016da <Line3ScanStart+0x3a>
 80016d8:	2302      	movs	r3, #2
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f001 f841 	bl	8002764 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d013      	beq.n	8001710 <Line3ScanStart+0x70>
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <Line3ScanStart+0x52>
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <Line3ScanStart+0x90>)
 80016f0:	e000      	b.n	80016f4 <Line3ScanStart+0x54>
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <Line3ScanStart+0x94>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <Line3ScanStart+0x60>
 80016fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016fe:	e000      	b.n	8001702 <Line3ScanStart+0x62>
 8001700:	2301      	movs	r3, #1
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f001 f82d 	bl	8002764 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d103      	bne.n	8001718 <Line3ScanStart+0x78>
	{
		*CurrentKeyState = LINE3_DETECTION;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	220a      	movs	r2, #10
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e002      	b.n	800171e <Line3ScanStart+0x7e>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	701a      	strb	r2, [r3, #0]
	}		
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001f0 	.word	0x200001f0
 800172c:	200001f1 	.word	0x200001f1
 8001730:	40020400 	.word	0x40020400
 8001734:	40020c00 	.word	0x40020c00

08001738 <Line3ScanDetection>:

uint32_t Line3ScanDetection(KeypadSide side)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <Line3ScanDetection+0x14>
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <Line3ScanDetection+0xe0>)
 800174a:	e000      	b.n	800174e <Line3ScanDetection+0x16>
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <Line3ScanDetection+0xe4>)
 800174e:	60bb      	str	r3, [r7, #8]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <Line3ScanDetection+0x22>
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <Line3ScanDetection+0xe8>)
 8001758:	e000      	b.n	800175c <Line3ScanDetection+0x24>
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <Line3ScanDetection+0xec>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <Line3ScanDetection+0x30>
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	e000      	b.n	800176a <Line3ScanDetection+0x32>
 8001768:	2302      	movs	r3, #2
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f000 fff9 	bl	8002764 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d013      	beq.n	80017a0 <Line3ScanDetection+0x68>
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <Line3ScanDetection+0x4a>
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <Line3ScanDetection+0xe8>)
 8001780:	e000      	b.n	8001784 <Line3ScanDetection+0x4c>
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <Line3ScanDetection+0xec>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <Line3ScanDetection+0x58>
 800178a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178e:	e000      	b.n	8001792 <Line3ScanDetection+0x5a>
 8001790:	2301      	movs	r3, #1
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f000 ffe5 	bl	8002764 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d130      	bne.n	8001802 <Line3ScanDetection+0xca>
	{
		if(GET_IO_KEY_4(side) == 1)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <Line3ScanDetection+0x72>
 80017a6:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <Line3ScanDetection+0xe8>)
 80017a8:	e000      	b.n	80017ac <Line3ScanDetection+0x74>
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <Line3ScanDetection+0xec>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <Line3ScanDetection+0x80>
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	e000      	b.n	80017ba <Line3ScanDetection+0x82>
 80017b8:	2302      	movs	r3, #2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f000 ffd1 	bl	8002764 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <Line3ScanDetection+0x96>
		{
			ReValue = KEY_VALUE_EIGHT;	
 80017c8:	230d      	movs	r3, #13
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e015      	b.n	80017fa <Line3ScanDetection+0xc2>
		}
		else if(GET_IO_KEY_5(side) == 1)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <Line3ScanDetection+0xa0>
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <Line3ScanDetection+0xe8>)
 80017d6:	e000      	b.n	80017da <Line3ScanDetection+0xa2>
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <Line3ScanDetection+0xec>)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <Line3ScanDetection+0xae>
 80017e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e4:	e000      	b.n	80017e8 <Line3ScanDetection+0xb0>
 80017e6:	2301      	movs	r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f000 ffba 	bl	8002764 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <Line3ScanDetection+0xc2>
		{
			ReValue = KEY_VALUE_NINE;
 80017f6:	230e      	movs	r3, #14
 80017f8:	60fb      	str	r3, [r7, #12]
		}

		*CurrentKeyState = LINE3_DETECTION;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	220a      	movs	r2, #10
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e004      	b.n	800180c <Line3ScanDetection+0xd4>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	220c      	movs	r2, #12
 8001806:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001f0 	.word	0x200001f0
 800181c:	200001f1 	.word	0x200001f1
 8001820:	40020400 	.word	0x40020400
 8001824:	40020c00 	.word	0x40020c00

08001828 <Line3ScanOver>:

void Line3ScanOver(KeypadSide side)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <Line3ScanOver+0x14>
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <Line3ScanOver+0x80>)
 800183a:	e000      	b.n	800183e <Line3ScanOver+0x16>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <Line3ScanOver+0x84>)
 800183e:	60fb      	str	r3, [r7, #12]

	if((GET_IO_KEY_4(side) == 1)||(GET_IO_KEY_5(side) == 1))
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <Line3ScanOver+0x22>
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <Line3ScanOver+0x88>)
 8001848:	e000      	b.n	800184c <Line3ScanOver+0x24>
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <Line3ScanOver+0x8c>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <Line3ScanOver+0x30>
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	e000      	b.n	800185a <Line3ScanOver+0x32>
 8001858:	2302      	movs	r3, #2
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f000 ff81 	bl	8002764 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d013      	beq.n	8001890 <Line3ScanOver+0x68>
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <Line3ScanOver+0x4a>
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <Line3ScanOver+0x88>)
 8001870:	e000      	b.n	8001874 <Line3ScanOver+0x4c>
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <Line3ScanOver+0x8c>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <Line3ScanOver+0x58>
 800187a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187e:	e000      	b.n	8001882 <Line3ScanOver+0x5a>
 8001880:	2301      	movs	r3, #1
 8001882:	4619      	mov	r1, r3
 8001884:	4610      	mov	r0, r2
 8001886:	f000 ff6d 	bl	8002764 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <Line3ScanOver+0x70>
	{
		*CurrentKeyState = LINE3_OVER;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	220b      	movs	r2, #11
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <Line3ScanOver+0x76>
	}
	else
	{
		*CurrentKeyState = LINE4_START;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	220c      	movs	r2, #12
 800189c:	701a      	strb	r2, [r3, #0]
	}
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001f0 	.word	0x200001f0
 80018ac:	200001f1 	.word	0x200001f1
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <Line4ScanStart>:
/* Scan line 4 */
void Line4ScanStart(KeypadSide side)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	ConfigurationLine4(side);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8c5 	bl	8000a54 <ConfigurationLine4>
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <Line4ScanStart+0x1c>
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <Line4ScanStart+0x60>)
 80018d2:	e000      	b.n	80018d6 <Line4ScanStart+0x1e>
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <Line4ScanStart+0x64>)
 80018d6:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <Line4ScanStart+0x2a>
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <Line4ScanStart+0x68>)
 80018e0:	e000      	b.n	80018e4 <Line4ScanStart+0x2c>
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <Line4ScanStart+0x6c>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <Line4ScanStart+0x38>
 80018ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ee:	e000      	b.n	80018f2 <Line4ScanStart+0x3a>
 80018f0:	2301      	movs	r3, #1
 80018f2:	4619      	mov	r1, r3
 80018f4:	4610      	mov	r0, r2
 80018f6:	f000 ff35 	bl	8002764 <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d103      	bne.n	8001908 <Line4ScanStart+0x50>
	{
		*CurrentKeyState = LINE4_DETECTION;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	220d      	movs	r2, #13
 8001904:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}		
}
 8001906:	e002      	b.n	800190e <Line4ScanStart+0x56>
		*CurrentKeyState = GND_START;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001f0 	.word	0x200001f0
 800191c:	200001f1 	.word	0x200001f1
 8001920:	40020400 	.word	0x40020400
 8001924:	40020c00 	.word	0x40020c00

08001928 <Line4ScanDetection>:

uint32_t Line4ScanDetection(KeypadSide side)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	uint32_t ReValue;
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <Line4ScanDetection+0x14>
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <Line4ScanDetection+0x60>)
 800193a:	e000      	b.n	800193e <Line4ScanDetection+0x16>
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <Line4ScanDetection+0x64>)
 800193e:	60bb      	str	r3, [r7, #8]

	if(GET_IO_KEY_5(side) == 1)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <Line4ScanDetection+0x22>
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <Line4ScanDetection+0x68>)
 8001948:	e000      	b.n	800194c <Line4ScanDetection+0x24>
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <Line4ScanDetection+0x6c>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <Line4ScanDetection+0x30>
 8001952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001956:	e000      	b.n	800195a <Line4ScanDetection+0x32>
 8001958:	2301      	movs	r3, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f000 ff01 	bl	8002764 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <Line4ScanDetection+0x4c>
	{
		ReValue = KEY_VALUE_TEN;	
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]

		*CurrentKeyState = LINE4_DETECTION;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	220d      	movs	r2, #13
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e004      	b.n	800197e <Line4ScanDetection+0x56>
	}
	else
	{
		*CurrentKeyState = GND_START;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		ReValue = KEY_VALUE_NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
	}	

	return ReValue;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001f0 	.word	0x200001f0
 800198c:	200001f1 	.word	0x200001f1
 8001990:	40020400 	.word	0x40020400
 8001994:	40020c00 	.word	0x40020c00

08001998 <Line4ScanOver>:

void Line4ScanOver(KeypadSide side)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	Key_State* CurrentKeyState = (side == LEFT ? &CurrentKeyStateLeft : &CurrentKeyStateRight);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <Line4ScanOver+0x14>
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <Line4ScanOver+0x58>)
 80019aa:	e000      	b.n	80019ae <Line4ScanOver+0x16>
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <Line4ScanOver+0x5c>)
 80019ae:	60fb      	str	r3, [r7, #12]

	if(GET_IO_KEY_5(side) == 1)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <Line4ScanOver+0x22>
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <Line4ScanOver+0x60>)
 80019b8:	e000      	b.n	80019bc <Line4ScanOver+0x24>
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <Line4ScanOver+0x64>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <Line4ScanOver+0x30>
 80019c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c6:	e000      	b.n	80019ca <Line4ScanOver+0x32>
 80019c8:	2301      	movs	r3, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f000 fec9 	bl	8002764 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d103      	bne.n	80019e0 <Line4ScanOver+0x48>
	{
		*CurrentKeyState = LINE4_OVER;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	220e      	movs	r2, #14
 80019dc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*CurrentKeyState = GND_START;
	}
}
 80019de:	e002      	b.n	80019e6 <Line4ScanOver+0x4e>
		*CurrentKeyState = GND_START;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001f0 	.word	0x200001f0
 80019f4:	200001f1 	.word	0x200001f1
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020c00 	.word	0x40020c00

08001a00 <ResetGamepadReport>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */


void ResetGamepadReport() {
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	gamepadReport.buttons = 0;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <ResetGamepadReport+0x2c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	gamepadReport.left_x = 0;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <ResetGamepadReport+0x2c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	709a      	strb	r2, [r3, #2]
	gamepadReport.left_y = 0;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <ResetGamepadReport+0x2c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	70da      	strb	r2, [r3, #3]
	gamepadReport.right_x = 0;
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <ResetGamepadReport+0x2c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	711a      	strb	r2, [r3, #4]
	gamepadReport.right_y = 0;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <ResetGamepadReport+0x2c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	715a      	strb	r2, [r3, #5]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000204 	.word	0x20000204

08001a30 <PrepareSendBuffer>:

void PrepareSendBuffer(uint8_t *buffer, GamepadReport_t *gamepadReport) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	buffer[0] = (uint8_t) (gamepadReport->buttons & 0x00FF);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t) (gamepadReport->buttons >> 8);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
	buffer[2] = gamepadReport->left_x;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
	buffer[3] = gamepadReport->left_y;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
	buffer[4] = gamepadReport->right_x;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
	buffer[5] = gamepadReport->right_y;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3305      	adds	r3, #5
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <GetUserInput>:

void GetUserInput() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
	const uint8_t JOYSTICK_VALUE = 64;
 8001a9e:	2340      	movs	r3, #64	; 0x40
 8001aa0:	73fb      	strb	r3, [r7, #15]

	uint32_t leftKeypadValue = KeypadScan(LEFT);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7fe fd10 	bl	80004c8 <KeypadScan>
 8001aa8:	60b8      	str	r0, [r7, #8]
	uint32_t rightKeypadValue = KeypadScan(RIGHT);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7fe fd0c 	bl	80004c8 <KeypadScan>
 8001ab0:	6078      	str	r0, [r7, #4]
	if (leftKeypadValue == 0 && rightKeypadValue == 0) {
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d116      	bne.n	8001ae6 <GetUserInput+0x4e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d113      	bne.n	8001ae6 <GetUserInput+0x4e>
		if (CHANGED == 1) {
 8001abe:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <GetUserInput+0x258>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	f040 8110 	bne.w	8001ce8 <GetUserInput+0x250>
			ResetGamepadReport();
 8001ac8:	f7ff ff9a 	bl	8001a00 <ResetGamepadReport>
			PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001acc:	4989      	ldr	r1, [pc, #548]	; (8001cf4 <GetUserInput+0x25c>)
 8001ace:	488a      	ldr	r0, [pc, #552]	; (8001cf8 <GetUserInput+0x260>)
 8001ad0:	f7ff ffae 	bl	8001a30 <PrepareSendBuffer>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	4988      	ldr	r1, [pc, #544]	; (8001cf8 <GetUserInput+0x260>)
 8001ad8:	4888      	ldr	r0, [pc, #544]	; (8001cfc <GetUserInput+0x264>)
 8001ada:	f004 f8b5 	bl	8005c48 <USBD_CUSTOM_HID_SendReport>
			CHANGED = 0;
 8001ade:	4b84      	ldr	r3, [pc, #528]	; (8001cf0 <GetUserInput+0x258>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001ae4:	e100      	b.n	8001ce8 <GetUserInput+0x250>
	}

	switch(leftKeypadValue) {
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	2b0e      	cmp	r3, #14
 8001aec:	d878      	bhi.n	8001be0 <GetUserInput+0x148>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <GetUserInput+0x5c>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b31 	.word	0x08001b31
 8001af8:	08001b3f 	.word	0x08001b3f
 8001afc:	08001be1 	.word	0x08001be1
 8001b00:	08001b4d 	.word	0x08001b4d
 8001b04:	08001b57 	.word	0x08001b57
 8001b08:	08001be1 	.word	0x08001be1
 8001b0c:	08001b61 	.word	0x08001b61
 8001b10:	08001b71 	.word	0x08001b71
 8001b14:	08001b81 	.word	0x08001b81
 8001b18:	08001b91 	.word	0x08001b91
 8001b1c:	08001be1 	.word	0x08001be1
 8001b20:	08001ba1 	.word	0x08001ba1
 8001b24:	08001bb1 	.word	0x08001bb1
 8001b28:	08001bc1 	.word	0x08001bc1
 8001b2c:	08001bd1 	.word	0x08001bd1
		case 1: gamepadReport.left_x = -JOYSTICK_VALUE; break; // LEFT
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	425b      	negs	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	b25a      	sxtb	r2, r3
 8001b38:	4b6e      	ldr	r3, [pc, #440]	; (8001cf4 <GetUserInput+0x25c>)
 8001b3a:	709a      	strb	r2, [r3, #2]
 8001b3c:	e050      	b.n	8001be0 <GetUserInput+0x148>
		case 2: gamepadReport.left_y = -JOYSTICK_VALUE; break;  // UP
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	425b      	negs	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <GetUserInput+0x25c>)
 8001b48:	70da      	strb	r2, [r3, #3]
 8001b4a:	e049      	b.n	8001be0 <GetUserInput+0x148>
		case 3: break; // PRESS
		case 4: gamepadReport.left_y = JOYSTICK_VALUE; break; // DOWN
 8001b4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <GetUserInput+0x25c>)
 8001b52:	70da      	strb	r2, [r3, #3]
 8001b54:	e044      	b.n	8001be0 <GetUserInput+0x148>
		case 5: gamepadReport.left_x = JOYSTICK_VALUE; break;  // RIGHT
 8001b56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <GetUserInput+0x25c>)
 8001b5c:	709a      	strb	r2, [r3, #2]
 8001b5e:	e03f      	b.n	8001be0 <GetUserInput+0x148>
		case 6: break;
		case 7: gamepadReport.buttons |= 1U << 7; break;
 8001b60:	4b64      	ldr	r3, [pc, #400]	; (8001cf4 <GetUserInput+0x25c>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <GetUserInput+0x25c>)
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	e037      	b.n	8001be0 <GetUserInput+0x148>
		case 8: gamepadReport.buttons |= 1U << 6; break;
 8001b70:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <GetUserInput+0x25c>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <GetUserInput+0x25c>)
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	e02f      	b.n	8001be0 <GetUserInput+0x148>
		case 9: gamepadReport.buttons |= 1U << 5; break;
 8001b80:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <GetUserInput+0x25c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <GetUserInput+0x25c>)
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e027      	b.n	8001be0 <GetUserInput+0x148>
		case 10: gamepadReport.buttons |= 1U << 4; break;
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <GetUserInput+0x25c>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <GetUserInput+0x25c>)
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	e01f      	b.n	8001be0 <GetUserInput+0x148>
		case 11: break;
		case 12: gamepadReport.buttons |= 1U << 3; break;
 8001ba0:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <GetUserInput+0x25c>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <GetUserInput+0x25c>)
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e017      	b.n	8001be0 <GetUserInput+0x148>
		case 13: gamepadReport.buttons |= 1U << 2; break;
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <GetUserInput+0x25c>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <GetUserInput+0x25c>)
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	e00f      	b.n	8001be0 <GetUserInput+0x148>
		case 14: gamepadReport.buttons |= 1U << 1; break;
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <GetUserInput+0x25c>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <GetUserInput+0x25c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <GetUserInput+0x148>
		case 15: gamepadReport.buttons |= 1U << 0; break;
 8001bd0:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <GetUserInput+0x25c>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <GetUserInput+0x25c>)
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	bf00      	nop
	}

	switch(rightKeypadValue) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2b0e      	cmp	r3, #14
 8001be6:	d87b      	bhi.n	8001ce0 <GetUserInput+0x248>
 8001be8:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <GetUserInput+0x158>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c2d 	.word	0x08001c2d
 8001bf4:	08001c3b 	.word	0x08001c3b
 8001bf8:	08001ce1 	.word	0x08001ce1
 8001bfc:	08001c49 	.word	0x08001c49
 8001c00:	08001c53 	.word	0x08001c53
 8001c04:	08001ce1 	.word	0x08001ce1
 8001c08:	08001c5d 	.word	0x08001c5d
 8001c0c:	08001c6d 	.word	0x08001c6d
 8001c10:	08001c7d 	.word	0x08001c7d
 8001c14:	08001c8d 	.word	0x08001c8d
 8001c18:	08001ce1 	.word	0x08001ce1
 8001c1c:	08001c9d 	.word	0x08001c9d
 8001c20:	08001cad 	.word	0x08001cad
 8001c24:	08001cbd 	.word	0x08001cbd
 8001c28:	08001ccd 	.word	0x08001ccd
		case 1: gamepadReport.right_x = -JOYSTICK_VALUE; break; // LEFT
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	425b      	negs	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <GetUserInput+0x25c>)
 8001c36:	711a      	strb	r2, [r3, #4]
 8001c38:	e052      	b.n	8001ce0 <GetUserInput+0x248>
		case 2: gamepadReport.right_y = -JOYSTICK_VALUE; break;  // UP
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <GetUserInput+0x25c>)
 8001c44:	715a      	strb	r2, [r3, #5]
 8001c46:	e04b      	b.n	8001ce0 <GetUserInput+0x248>
		case 3: break; // PRESS
		case 4: gamepadReport.right_y = JOYSTICK_VALUE; break; // DOWN
 8001c48:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <GetUserInput+0x25c>)
 8001c4e:	715a      	strb	r2, [r3, #5]
 8001c50:	e046      	b.n	8001ce0 <GetUserInput+0x248>
		case 5: gamepadReport.right_x = JOYSTICK_VALUE; break;  // RIGHT
 8001c52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <GetUserInput+0x25c>)
 8001c58:	711a      	strb	r2, [r3, #4]
 8001c5a:	e041      	b.n	8001ce0 <GetUserInput+0x248>
		case 6: break; // K1
		case 7: gamepadReport.buttons |= 1U << 8; break; // K2
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <GetUserInput+0x25c>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <GetUserInput+0x25c>)
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	e039      	b.n	8001ce0 <GetUserInput+0x248>
		case 8: gamepadReport.buttons |= 1U << 9; break; // K3
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <GetUserInput+0x25c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <GetUserInput+0x25c>)
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e031      	b.n	8001ce0 <GetUserInput+0x248>
		case 9: gamepadReport.buttons |= 1U << 10; break; // K4
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <GetUserInput+0x25c>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <GetUserInput+0x25c>)
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	e029      	b.n	8001ce0 <GetUserInput+0x248>
		case 10: gamepadReport.buttons |= 1U << 11; break; // K5
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <GetUserInput+0x25c>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <GetUserInput+0x25c>)
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	e021      	b.n	8001ce0 <GetUserInput+0x248>
		case 11: break; // K6
		case 12: gamepadReport.buttons |= 1U << 12; break; // K7
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <GetUserInput+0x25c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <GetUserInput+0x25c>)
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e019      	b.n	8001ce0 <GetUserInput+0x248>
		case 13: gamepadReport.buttons |= 1U << 13; break; // K8
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <GetUserInput+0x25c>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <GetUserInput+0x25c>)
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	e011      	b.n	8001ce0 <GetUserInput+0x248>
		case 14: gamepadReport.buttons |= 1U << 14; break; // K9
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <GetUserInput+0x25c>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <GetUserInput+0x25c>)
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	e009      	b.n	8001ce0 <GetUserInput+0x248>
		case 15: gamepadReport.buttons |= 1U << 15; break; // K10
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <GetUserInput+0x25c>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <GetUserInput+0x25c>)
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	bf00      	nop
	}

	CHANGED = 1;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <GetUserInput+0x258>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <GetUserInput+0x252>
		return;
 8001ce8:	bf00      	nop
}
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200001f2 	.word	0x200001f2
 8001cf4:	20000204 	.word	0x20000204
 8001cf8:	2000020c 	.word	0x2000020c
 8001cfc:	20000218 	.word	0x20000218

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f000 f9ee 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f824 	bl	8001d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f000 f88c 	bl	8001e28 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001d10:	f005 f98a 	bl	8007028 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ResetGamepadReport();
 8001d14:	f7ff fe74 	bl	8001a00 <ResetGamepadReport>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GetUserInput();
 8001d18:	f7ff febe 	bl	8001a98 <GetUserInput>

	  if (CHANGED == 1) {
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <main+0x44>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d1f9      	bne.n	8001d18 <main+0x18>
		  PrepareSendBuffer(dataSendBuffer, &gamepadReport);
 8001d24:	4908      	ldr	r1, [pc, #32]	; (8001d48 <main+0x48>)
 8001d26:	4809      	ldr	r0, [pc, #36]	; (8001d4c <main+0x4c>)
 8001d28:	f7ff fe82 	bl	8001a30 <PrepareSendBuffer>

	  	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataSendBuffer, SEND_BUFFER_SIZE);
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	4907      	ldr	r1, [pc, #28]	; (8001d4c <main+0x4c>)
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <main+0x50>)
 8001d32:	f003 ff89 	bl	8005c48 <USBD_CUSTOM_HID_SendReport>
	  	  ResetGamepadReport();
 8001d36:	f7ff fe63 	bl	8001a00 <ResetGamepadReport>

	  	HAL_Delay(50);
 8001d3a:	2032      	movs	r0, #50	; 0x32
 8001d3c:	f000 fa44 	bl	80021c8 <HAL_Delay>
	  GetUserInput();
 8001d40:	e7ea      	b.n	8001d18 <main+0x18>
 8001d42:	bf00      	nop
 8001d44:	200001f2 	.word	0x200001f2
 8001d48:	20000204 	.word	0x20000204
 8001d4c:	2000020c 	.word	0x2000020c
 8001d50:	20000218 	.word	0x20000218

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2230      	movs	r2, #48	; 0x30
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fde4 	bl	8007930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <SystemClock_Config+0xd0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <SystemClock_Config+0xd0>)
 8001d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <SystemClock_Config+0xd0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc8:	23a8      	movs	r3, #168	; 0xa8
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fe5f 	bl	8003a9c <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de4:	f000 f8aa 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001dfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2102      	movs	r1, #2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 f8b8 	bl	8003f7c <HAL_RCC_ClockConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e12:	f000 f893 	bl	8001f3c <Error_Handler>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3750      	adds	r7, #80	; 0x50
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_GPIO_Init+0x104>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001eb4:	481e      	ldr	r0, [pc, #120]	; (8001f30 <MX_GPIO_Init+0x108>)
 8001eb6:	f000 fc6d 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <MX_GPIO_Init+0x10c>)
 8001ece:	f000 faaf 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001ed2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ed6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <MX_GPIO_Init+0x110>)
 8001ee8:	f000 faa2 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <MX_GPIO_Init+0x108>)
 8001f06:	f000 fa93 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001f0a:	234f      	movs	r3, #79	; 0x4f
 8001f0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <MX_GPIO_Init+0x108>)
 8001f1e:	f000 fa87 	bl	8002430 <HAL_GPIO_Init>

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f8ca 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <OTG_FS_IRQHandler+0x10>)
 8001ffe:	f000 fd32 	bl	8002a66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200006e8 	.word	0x200006e8

0800200c <_sbrk>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x50>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x16>
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <_sbrk+0x50>)
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <_sbrk+0x54>)
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <_sbrk+0x50>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <_sbrk+0x50>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	466a      	mov	r2, sp
 8002032:	4293      	cmp	r3, r2
 8002034:	d907      	bls.n	8002046 <_sbrk+0x3a>
 8002036:	f005 fc41 	bl	80078bc <__errno>
 800203a:	4602      	mov	r2, r0
 800203c:	230c      	movs	r3, #12
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e006      	b.n	8002054 <_sbrk+0x48>
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <_sbrk+0x50>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a03      	ldr	r2, [pc, #12]	; (800205c <_sbrk+0x50>)
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200001f4 	.word	0x200001f4
 8002060:	20000af8 	.word	0x20000af8

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <SystemInit+0x28>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <SystemInit+0x28>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <SystemInit+0x28>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	609a      	str	r2, [r3, #8]
#endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopFillZerobss+0x14>
 8002094:	2100      	movs	r1, #0
 8002096:	e003      	b.n	80020a0 <LoopCopyDataInit>

08002098 <CopyDataInit>:
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <LoopFillZerobss+0x18>)
 800209a:	585b      	ldr	r3, [r3, r1]
 800209c:	5043      	str	r3, [r0, r1]
 800209e:	3104      	adds	r1, #4

080020a0 <LoopCopyDataInit>:
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <LoopFillZerobss+0x1c>)
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <LoopFillZerobss+0x20>)
 80020a4:	1842      	adds	r2, r0, r1
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3f6      	bcc.n	8002098 <CopyDataInit>
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <LoopFillZerobss+0x24>)
 80020ac:	e002      	b.n	80020b4 <LoopFillZerobss>

080020ae <FillZerobss>:
 80020ae:	2300      	movs	r3, #0
 80020b0:	f842 3b04 	str.w	r3, [r2], #4

080020b4 <LoopFillZerobss>:
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <LoopFillZerobss+0x28>)
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3f9      	bcc.n	80020ae <FillZerobss>
 80020ba:	f7ff ffd3 	bl	8002064 <SystemInit>
 80020be:	f005 fc03 	bl	80078c8 <__libc_init_array>
 80020c2:	f7ff fe1d 	bl	8001d00 <main>
 80020c6:	4770      	bx	lr
 80020c8:	20020000 	.word	0x20020000
 80020cc:	08007bac 	.word	0x08007bac
 80020d0:	20000000 	.word	0x20000000
 80020d4:	200001d4 	.word	0x200001d4
 80020d8:	200001d4 	.word	0x200001d4
 80020dc:	20000af4 	.word	0x20000af4

080020e0 <ADC_IRQHandler>:
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f94d 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff ff18 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f965 	bl	8002416 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f92d 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000214 	.word	0x20000214

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000214 	.word	0x20000214

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_Delay+0x40>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000008 	.word	0x20000008

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff3e 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff8e 	bl	8002300 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5d 	bl	80022ac <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff31 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e16b      	b.n	8002724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 815a 	bne.w	800271e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d00b      	beq.n	800248a <HAL_GPIO_Init+0x5a>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247e:	2b11      	cmp	r3, #17
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b12      	cmp	r3, #18
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0xfc>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b12      	cmp	r3, #18
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80b4 	beq.w	800271e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <HAL_GPIO_Init+0x308>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a5e      	ldr	r2, [pc, #376]	; (8002738 <HAL_GPIO_Init+0x308>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_GPIO_Init+0x308>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_GPIO_Init+0x30c>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_GPIO_Init+0x310>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_GPIO_Init+0x226>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_GPIO_Init+0x314>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x222>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_GPIO_Init+0x318>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x21e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_GPIO_Init+0x31c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x320>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_GPIO_Init+0x328>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_GPIO_Init+0x32c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x20a>
 8002636:	2307      	movs	r3, #7
 8002638:	e00e      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800263a:	2308      	movs	r3, #8
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800263e:	2306      	movs	r3, #6
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x228>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x228>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_GPIO_Init+0x30c>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002676:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_GPIO_Init+0x330>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269a:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_GPIO_Init+0x330>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_GPIO_Init+0x330>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_GPIO_Init+0x330>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_GPIO_Init+0x330>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_GPIO_Init+0x330>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_GPIO_Init+0x330>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_GPIO_Init+0x330>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f ae90 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40021400 	.word	0x40021400
 8002758:	40021800 	.word	0x40021800
 800275c:	40021c00 	.word	0x40021c00
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e001      	b.n	8002786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b0:	e003      	b.n	80027ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c8:	b08f      	sub	sp, #60	; 0x3c
 80027ca:	af0a      	add	r7, sp, #40	; 0x28
 80027cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e10f      	b.n	80029f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f004 fd78 	bl	80072e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fe8f 	bl	800453a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	687e      	ldr	r6, [r7, #4]
 8002824:	466d      	mov	r5, sp
 8002826:	f106 0410 	add.w	r4, r6, #16
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002836:	e885 0003 	stmia.w	r5, {r0, r1}
 800283a:	1d33      	adds	r3, r6, #4
 800283c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f001 fd66 	bl	8004310 <USB_CoreInit>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0d0      	b.n	80029f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fe7d 	bl	800455c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e04a      	b.n	80028fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	333d      	adds	r3, #61	; 0x3d
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	333c      	adds	r3, #60	; 0x3c
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	b298      	uxth	r0, r3
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3342      	adds	r3, #66	; 0x42
 80028a4:	4602      	mov	r2, r0
 80028a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333f      	adds	r3, #63	; 0x3f
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3344      	adds	r3, #68	; 0x44
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3350      	adds	r3, #80	; 0x50
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	3301      	adds	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3af      	bcc.n	8002868 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e044      	b.n	8002998 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	3301      	adds	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3b5      	bcc.n	800290e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	687e      	ldr	r6, [r7, #4]
 80029aa:	466d      	mov	r5, sp
 80029ac:	f106 0410 	add.w	r4, r6, #16
 80029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c0:	1d33      	adds	r3, r6, #4
 80029c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f001 fdf3 	bl	80045b0 <USB_DevInit>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e00d      	b.n	80029f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fe32 	bl	800565a <USB_DevDisconnect>

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_Start+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e020      	b.n	8002a5e <HAL_PCD_Start+0x5e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d109      	bne.n	8002a40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d005      	beq.n	8002a40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fdf0 	bl	800562a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fd62 	bl	8004518 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a66:	b590      	push	{r4, r7, lr}
 8002a68:	b08d      	sub	sp, #52	; 0x34
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fe97 	bl	80057b0 <USB_GetMode>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 839d 	bne.w	80031c4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fdfb 	bl	800568a <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8393 	beq.w	80031c2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fdf2 	bl	800568a <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d107      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f002 0202 	and.w	r2, r2, #2
 8002abe:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fde0 	bl	800568a <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d161      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 020f 	and.w	r2, r3, #15
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	0c5b      	lsrs	r3, r3, #17
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d124      	bne.n	8002b5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d035      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6a38      	ldr	r0, [r7, #32]
 8002b30:	f002 fc58 	bl	80053e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b40:	441a      	add	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b52:	441a      	add	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	619a      	str	r2, [r3, #24]
 8002b58:	e016      	b.n	8002b88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	0c5b      	lsrs	r3, r3, #17
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d110      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6a38      	ldr	r0, [r7, #32]
 8002b72:	f002 fc37 	bl	80053e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b82:	441a      	add	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0210 	orr.w	r2, r2, #16
 8002b96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fd74 	bl	800568a <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bac:	d16e      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fd7a 	bl	80056b0 <USB_ReadDevAllOutEpInterrupt>
 8002bbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bbe:	e062      	b.n	8002c86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d057      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 fd9f 	bl	8005718 <USB_ReadDevOutEPInterrupt>
 8002bda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fd98 	bl	8003730 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c16:	461a      	mov	r2, r3
 8002c18:	2308      	movs	r3, #8
 8002c1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fe92 	bl	8003948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	461a      	mov	r2, r3
 8002c58:	2320      	movs	r3, #32
 8002c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d199      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 fcfa 	bl	800568a <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca0:	f040 80c0 	bne.w	8002e24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 fd1b 	bl	80056e4 <USB_ReadDevAllInEpInterrupt>
 8002cae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002cb4:	e0b2      	b.n	8002e1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a7 	beq.w	8002e10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fd41 	bl	8005754 <USB_ReadDevInEPInterrupt>
 8002cd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d057      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69f9      	ldr	r1, [r7, #28]
 8002cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cfe:	4013      	ands	r3, r2
 8002d00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d132      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3348      	adds	r3, #72	; 0x48
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	3344      	adds	r3, #68	; 0x44
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4419      	add	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4403      	add	r3, r0
 8002d50:	3348      	adds	r3, #72	; 0x48
 8002d52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d113      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x31c>
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3350      	adds	r3, #80	; 0x50
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	f002 fd49 	bl	8005814 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f004 fb2e 	bl	80073ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da4:	461a      	mov	r2, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2340      	movs	r3, #64	; 0x40
 8002de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fc03 	bl	8003616 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f af49 	bne.w	8002cb6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fc2e 	bl	800568a <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e38:	d122      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fe0e 	bl	8003a84 <HAL_PCDEx_LPM_Callback>
 8002e68:	e002      	b.n	8002e70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 fb34 	bl	80074d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fc00 	bl	800568a <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e94:	d112      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f004 faf0 	bl	800748c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002eba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fbe2 	bl	800568a <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	f040 80c7 	bne.w	8003062 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2110      	movs	r1, #16
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fcc2 	bl	8004878 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef8:	e056      	b.n	8002fa8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f06:	461a      	mov	r2, r3
 8002f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1e:	0151      	lsls	r1, r2, #5
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	440a      	add	r2, r1
 8002f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	0151      	lsls	r1, r2, #5
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	440a      	add	r2, r1
 8002f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d3a3      	bcc.n	8002efa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fde:	f043 030b 	orr.w	r3, r3, #11
 8002fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff4:	f043 030b 	orr.w	r3, r3, #11
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	e015      	b.n	8003028 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800300e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003022:	f043 030b 	orr.w	r3, r3, #11
 8003026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800303a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800304c:	461a      	mov	r2, r3
 800304e:	f002 fbe1 	bl	8005814 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fb0f 	bl	800568a <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d124      	bne.n	80030c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fba5 	bl	80057cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fc57 	bl	800493a <USB_GetDevSpeed>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681c      	ldr	r4, [r3, #0]
 8003098:	f001 f92e 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 800309c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4620      	mov	r0, r4
 80030a8:	f001 f994 	bl	80043d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f004 f9c4 	bl	800743a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f002 fadf 	bl	800568a <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d10a      	bne.n	80030ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f004 f9a1 	bl	800741e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 0208 	and.w	r2, r2, #8
 80030ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 faca 	bl	800568a <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	d10f      	bne.n	8003122 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f004 fa03 	bl	8007518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 faaf 	bl	800568a <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003136:	d10f      	bne.n	8003158 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f004 f9d6 	bl	80074f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fa94 	bl	800568a <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d10a      	bne.n	8003184 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f004 f9e4 	bl	800753c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f002 fa7e 	bl	800568a <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d115      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f004 f9d4 	bl	8007558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e000      	b.n	80031c4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80031c2:	bf00      	nop
    }
  }
}
 80031c4:	3734      	adds	r7, #52	; 0x34
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}

080031ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_PCD_SetAddress+0x1a>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e013      	b.n	800320c <HAL_PCD_SetAddress+0x42>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 f9ee 	bl	80055de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	70fb      	strb	r3, [r7, #3]
 8003226:	460b      	mov	r3, r1
 8003228:	803b      	strh	r3, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0f      	bge.n	800325a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	3338      	adds	r3, #56	; 0x38
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	705a      	strb	r2, [r3, #1]
 8003258:	e00f      	b.n	800327a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003286:	883a      	ldrh	r2, [r7, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	78ba      	ldrb	r2, [r7, #2]
 8003290:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032a4:	78bb      	ldrb	r3, [r7, #2]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d102      	bne.n	80032b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_PCD_EP_Open+0xaa>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_Open+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fb59 	bl	8004984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80032da:	7afb      	ldrb	r3, [r7, #11]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	da0f      	bge.n	8003318 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	3338      	adds	r3, #56	; 0x38
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	705a      	strb	r2, [r3, #1]
 8003316:	e00f      	b.n	8003338 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_PCD_EP_Close+0x6e>
 800334e:	2302      	movs	r3, #2
 8003350:	e00e      	b.n	8003370 <HAL_PCD_EP_Close+0x8c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	4618      	mov	r0, r3
 8003362:	f001 fb97 	bl	8004a94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ba:	7afb      	ldrb	r3, [r7, #11]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d4:	7afb      	ldrb	r3, [r7, #11]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6979      	ldr	r1, [r7, #20]
 80033ec:	f001 fe72 	bl	80050d4 <USB_EP0StartXfer>
 80033f0:	e008      	b.n	8003404 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	f001 fc24 	bl	8004c4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	460b      	mov	r3, r1
 800341c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2201      	movs	r2, #1
 800344c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	b2da      	uxtb	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	f001 fe28 	bl	80050d4 <USB_EP0StartXfer>
 8003484:	e008      	b.n	8003498 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	f001 fbda 	bl	8004c4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d901      	bls.n	80034c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e050      	b.n	8003562 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da0f      	bge.n	80034e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	3338      	adds	r3, #56	; 0x38
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	705a      	strb	r2, [r3, #1]
 80034e6:	e00d      	b.n	8003504 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_PCD_EP_SetStall+0x82>
 8003520:	2302      	movs	r3, #2
 8003522:	e01e      	b.n	8003562 <HAL_PCD_EP_SetStall+0xc0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68f9      	ldr	r1, [r7, #12]
 8003532:	4618      	mov	r0, r3
 8003534:	f001 ff7f 	bl	8005436 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	b2d9      	uxtb	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003552:	461a      	mov	r2, r3
 8003554:	f002 f95e 	bl	8005814 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d901      	bls.n	8003588 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e042      	b.n	800360e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	da0f      	bge.n	80035b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3338      	adds	r3, #56	; 0x38
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	705a      	strb	r2, [r3, #1]
 80035ae:	e00f      	b.n	80035d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_EP_ClrStall+0x86>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e00e      	b.n	800360e <HAL_PCD_EP_ClrStall+0xa4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 ff87 	bl	8005512 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b08a      	sub	sp, #40	; 0x28
 800361a:	af02      	add	r7, sp, #8
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3338      	adds	r3, #56	; 0x38
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	3304      	adds	r3, #4
 800363c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d901      	bls.n	800364e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06c      	b.n	8003728 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	429a      	cmp	r2, r3
 8003662:	d902      	bls.n	800366a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3303      	adds	r3, #3
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003672:	e02b      	b.n	80036cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	429a      	cmp	r2, r3
 8003688:	d902      	bls.n	8003690 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3303      	adds	r3, #3
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68d9      	ldr	r1, [r3, #12]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4603      	mov	r3, r0
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f001 fe63 	bl	800537a <USB_WritePacket>

    ep->xfer_buff  += len;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	441a      	add	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d809      	bhi.n	80036f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d203      	bcs.n	80036f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1be      	bne.n	8003674 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d811      	bhi.n	8003726 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2201      	movs	r2, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	43db      	mvns	r3, r3
 800371c:	6939      	ldr	r1, [r7, #16]
 800371e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003722:	4013      	ands	r3, r2
 8003724:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	333c      	adds	r3, #60	; 0x3c
 8003748:	3304      	adds	r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	f040 80a0 	bne.w	80038a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a72      	ldr	r2, [pc, #456]	; (8003940 <PCD_EP_OutXfrComplete_int+0x210>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f240 80dd 	bls.w	8003936 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80d7 	beq.w	8003936 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379a:	6093      	str	r3, [r2, #8]
 800379c:	e0cb      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	2320      	movs	r3, #32
 80037b8:	6093      	str	r3, [r2, #8]
 80037ba:	e0bc      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 80b7 	bne.w	8003936 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <PCD_EP_OutXfrComplete_int+0x210>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d90f      	bls.n	80037f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	461a      	mov	r2, r3
 80037e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ec:	6093      	str	r3, [r2, #8]
 80037ee:	e0a2      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003802:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	0159      	lsls	r1, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	440b      	add	r3, r1
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003816:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4403      	add	r3, r0
 8003826:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800382a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4403      	add	r3, r0
 800384e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4419      	add	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4403      	add	r3, r0
 8003864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003868:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d114      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x16a>
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d108      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003892:	461a      	mov	r2, r3
 8003894:	2101      	movs	r1, #1
 8003896:	f001 ffbd 	bl	8005814 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f003 fd87 	bl	80073b4 <HAL_PCD_DataOutStageCallback>
 80038a6:	e046      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <PCD_EP_OutXfrComplete_int+0x214>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d124      	bne.n	80038fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	461a      	mov	r2, r3
 80038c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	e032      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	461a      	mov	r2, r3
 80038e8:	2320      	movs	r3, #32
 80038ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f003 fd5e 	bl	80073b4 <HAL_PCD_DataOutStageCallback>
 80038f8:	e01d      	b.n	8003936 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d114      	bne.n	800392a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003922:	461a      	mov	r2, r3
 8003924:	2100      	movs	r1, #0
 8003926:	f001 ff75 	bl	8005814 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f003 fd3f 	bl	80073b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	4f54300a 	.word	0x4f54300a
 8003944:	4f54310a 	.word	0x4f54310a

08003948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	333c      	adds	r3, #60	; 0x3c
 8003960:	3304      	adds	r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d90e      	bls.n	800399c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f003 fcf7 	bl	8007390 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d90c      	bls.n	80039c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039bc:	461a      	mov	r2, r3
 80039be:	2101      	movs	r1, #1
 80039c0:	f001 ff28 	bl	8005814 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	4f54300a 	.word	0x4f54300a

080039d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
 80039e0:	4613      	mov	r3, r2
 80039e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039f2:	883b      	ldrh	r3, [r7, #0]
 80039f4:	0419      	lsls	r1, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003a00:	e028      	b.n	8003a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	e00d      	b.n	8003a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3340      	adds	r3, #64	; 0x40
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4413      	add	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3ec      	bcc.n	8003a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a3c:	883b      	ldrh	r3, [r7, #0]
 8003a3e:	0418      	lsls	r0, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	4302      	orrs	r2, r0
 8003a4c:	3340      	adds	r3, #64	; 0x40
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e25b      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d075      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aba:	4ba3      	ldr	r3, [pc, #652]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac6:	4ba0      	ldr	r3, [pc, #640]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d112      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad2:	4b9d      	ldr	r3, [pc, #628]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	4b99      	ldr	r3, [pc, #612]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x108>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d157      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e236      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x74>
 8003b02:	4b91      	ldr	r3, [pc, #580]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a90      	ldr	r2, [pc, #576]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xb0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x98>
 8003b1a:	4b8b      	ldr	r3, [pc, #556]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a8a      	ldr	r2, [pc, #552]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b88      	ldr	r3, [pc, #544]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a87      	ldr	r2, [pc, #540]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xb0>
 8003b34:	4b84      	ldr	r3, [pc, #528]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a83      	ldr	r2, [pc, #524]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a80      	ldr	r2, [pc, #512]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fb2c 	bl	80021b0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fb28 	bl	80021b0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1fb      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b76      	ldr	r3, [pc, #472]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xc0>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fb18 	bl	80021b0 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fb14 	bl	80021b0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1e7      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0xe8>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d063      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bbe:	4b62      	ldr	r3, [pc, #392]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bca:	4b5f      	ldr	r3, [pc, #380]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d116      	bne.n	8003c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	4b5c      	ldr	r3, [pc, #368]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x152>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e1bb      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4952      	ldr	r1, [pc, #328]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	e03a      	b.n	8003c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <HAL_RCC_OscConfig+0x2b0>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fe facd 	bl	80021b0 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fac9 	bl	80021b0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e19c      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	4b46      	ldr	r3, [pc, #280]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4940      	ldr	r1, [pc, #256]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x2b0>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe faac 	bl	80021b0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fe faa8 	bl	80021b0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e17b      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d030      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_RCC_OscConfig+0x2b4>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fe fa8c 	bl	80021b0 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fe fa88 	bl	80021b0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e15b      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x200>
 8003cba:	e015      	b.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_OscConfig+0x2b4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fa75 	bl	80021b0 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fe fa71 	bl	80021b0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e144      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a0 	beq.w	8003e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x2b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_RCC_OscConfig+0x2b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <HAL_RCC_OscConfig+0x2b8>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fa37 	bl	80021b0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	e011      	b.n	8003d6a <HAL_RCC_OscConfig+0x2ce>
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	42470000 	.word	0x42470000
 8003d50:	42470e80 	.word	0x42470e80
 8003d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d58:	f7fe fa2a 	bl	80021b0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0fd      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x4d4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x2f0>
 8003d7e:	4b7d      	ldr	r3, [pc, #500]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a7c      	ldr	r2, [pc, #496]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	e01c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x32a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d10c      	bne.n	8003dae <HAL_RCC_OscConfig+0x312>
 8003d94:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a76      	ldr	r2, [pc, #472]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	4b74      	ldr	r3, [pc, #464]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x32a>
 8003dae:	4b71      	ldr	r3, [pc, #452]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a70      	ldr	r2, [pc, #448]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a6d      	ldr	r2, [pc, #436]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d015      	beq.n	8003dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fe f9ef 	bl	80021b0 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe f9eb 	bl	80021b0 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0bc      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x33a>
 8003df8:	e014      	b.n	8003e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fe f9d9 	bl	80021b0 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe f9d5 	bl	80021b0 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0a6      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ee      	bne.n	8003e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a51      	ldr	r2, [pc, #324]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8092 	beq.w	8003f64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e40:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d05c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d141      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <HAL_RCC_OscConfig+0x4dc>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fe f9a9 	bl	80021b0 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fe f9a5 	bl	80021b0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e078      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	019b      	lsls	r3, r3, #6
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	4933      	ldr	r1, [pc, #204]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eaa:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <HAL_RCC_OscConfig+0x4dc>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe f97e 	bl	80021b0 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe f97a 	bl	80021b0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e04d      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x41c>
 8003ed6:	e045      	b.n	8003f64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x4dc>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe f967 	bl	80021b0 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe f963 	bl	80021b0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e036      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x44a>
 8003f04:	e02e      	b.n	8003f64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e029      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d11c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d115      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40007000 	.word	0x40007000
 8003f74:	40023800 	.word	0x40023800
 8003f78:	42470060 	.word	0x42470060

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0cc      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90c      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d044      	beq.n	800409c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d119      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d003      	beq.n	800403a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e067      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4934      	ldr	r1, [pc, #208]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fe f8a0 	bl	80021b0 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fe f89c 	bl	80021b0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e04f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d20c      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4601      	mov	r1, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	fa21 f303 	lsr.w	r3, r1, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe f800 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00
 8004138:	40023800 	.word	0x40023800
 800413c:	08007b2c 	.word	0x08007b2c
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d007      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x32>
 800416a:	2b08      	cmp	r3, #8
 800416c:	d008      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x38>
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 80b4 	bne.w	80042dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004176:	60bb      	str	r3, [r7, #8]
       break;
 8004178:	e0b3      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800417c:	60bb      	str	r3, [r7, #8]
      break;
 800417e:	e0b0      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418a:	4b58      	ldr	r3, [pc, #352]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04a      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b55      	ldr	r3, [pc, #340]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	ea03 0501 	and.w	r5, r3, r1
 80041ac:	ea04 0602 	and.w	r6, r4, r2
 80041b0:	4629      	mov	r1, r5
 80041b2:	4632      	mov	r2, r6
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	0154      	lsls	r4, r2, #5
 80041be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041c2:	014b      	lsls	r3, r1, #5
 80041c4:	4619      	mov	r1, r3
 80041c6:	4622      	mov	r2, r4
 80041c8:	1b49      	subs	r1, r1, r5
 80041ca:	eb62 0206 	sbc.w	r2, r2, r6
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	0194      	lsls	r4, r2, #6
 80041d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041dc:	018b      	lsls	r3, r1, #6
 80041de:	1a5b      	subs	r3, r3, r1
 80041e0:	eb64 0402 	sbc.w	r4, r4, r2
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	00e2      	lsls	r2, r4, #3
 80041ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041f2:	00d9      	lsls	r1, r3, #3
 80041f4:	460b      	mov	r3, r1
 80041f6:	4614      	mov	r4, r2
 80041f8:	195b      	adds	r3, r3, r5
 80041fa:	eb44 0406 	adc.w	r4, r4, r6
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	0262      	lsls	r2, r4, #9
 8004208:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800420c:	0259      	lsls	r1, r3, #9
 800420e:	460b      	mov	r3, r1
 8004210:	4614      	mov	r4, r2
 8004212:	4618      	mov	r0, r3
 8004214:	4621      	mov	r1, r4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f04f 0400 	mov.w	r4, #0
 800421c:	461a      	mov	r2, r3
 800421e:	4623      	mov	r3, r4
 8004220:	f7fb ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e049      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	ea03 0501 	and.w	r5, r3, r1
 8004242:	ea04 0602 	and.w	r6, r4, r2
 8004246:	4629      	mov	r1, r5
 8004248:	4632      	mov	r2, r6
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	0154      	lsls	r4, r2, #5
 8004254:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004258:	014b      	lsls	r3, r1, #5
 800425a:	4619      	mov	r1, r3
 800425c:	4622      	mov	r2, r4
 800425e:	1b49      	subs	r1, r1, r5
 8004260:	eb62 0206 	sbc.w	r2, r2, r6
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	f04f 0400 	mov.w	r4, #0
 800426c:	0194      	lsls	r4, r2, #6
 800426e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004272:	018b      	lsls	r3, r1, #6
 8004274:	1a5b      	subs	r3, r3, r1
 8004276:	eb64 0402 	sbc.w	r4, r4, r2
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	00e2      	lsls	r2, r4, #3
 8004284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004288:	00d9      	lsls	r1, r3, #3
 800428a:	460b      	mov	r3, r1
 800428c:	4614      	mov	r4, r2
 800428e:	195b      	adds	r3, r3, r5
 8004290:	eb44 0406 	adc.w	r4, r4, r6
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	02a2      	lsls	r2, r4, #10
 800429e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042a2:	0299      	lsls	r1, r3, #10
 80042a4:	460b      	mov	r3, r1
 80042a6:	4614      	mov	r4, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	4621      	mov	r1, r4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f04f 0400 	mov.w	r4, #0
 80042b2:	461a      	mov	r2, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	f7fb ff87 	bl	80001c8 <__aeabi_uldivmod>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	60bb      	str	r3, [r7, #8]
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042de:	60bb      	str	r3, [r7, #8]
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	68bb      	ldr	r3, [r7, #8]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000000 	.word	0x20000000

08004310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004310:	b084      	sub	sp, #16
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	f107 001c 	add.w	r0, r7, #28
 800431e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	d122      	bne.n	800436e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800433c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fab4 	bl	80058d0 <USB_CoreReset>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e01a      	b.n	80043a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 faa8 	bl	80058d0 <USB_CoreReset>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
 8004396:	e005      	b.n	80043a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d10b      	bne.n	80043c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0206 	orr.w	r2, r3, #6
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ce:	b004      	add	sp, #16
 80043d0:	4770      	bx	lr
	...

080043d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d165      	bne.n	80044b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <USB_SetTurnaroundTime+0x11c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d906      	bls.n	80043fe <USB_SetTurnaroundTime+0x2a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <USB_SetTurnaroundTime+0x120>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d802      	bhi.n	80043fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043f8:	230f      	movs	r3, #15
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e062      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <USB_SetTurnaroundTime+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d906      	bls.n	8004414 <USB_SetTurnaroundTime+0x40>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <USB_SetTurnaroundTime+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d802      	bhi.n	8004414 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800440e:	230e      	movs	r3, #14
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e057      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a38      	ldr	r2, [pc, #224]	; (80044f8 <USB_SetTurnaroundTime+0x124>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d906      	bls.n	800442a <USB_SetTurnaroundTime+0x56>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a37      	ldr	r2, [pc, #220]	; (80044fc <USB_SetTurnaroundTime+0x128>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d802      	bhi.n	800442a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004424:	230d      	movs	r3, #13
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e04c      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a33      	ldr	r2, [pc, #204]	; (80044fc <USB_SetTurnaroundTime+0x128>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d906      	bls.n	8004440 <USB_SetTurnaroundTime+0x6c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a32      	ldr	r2, [pc, #200]	; (8004500 <USB_SetTurnaroundTime+0x12c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d802      	bhi.n	8004440 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800443a:	230c      	movs	r3, #12
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e041      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <USB_SetTurnaroundTime+0x12c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d906      	bls.n	8004456 <USB_SetTurnaroundTime+0x82>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <USB_SetTurnaroundTime+0x130>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d802      	bhi.n	8004456 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004450:	230b      	movs	r3, #11
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e036      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <USB_SetTurnaroundTime+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d906      	bls.n	800446c <USB_SetTurnaroundTime+0x98>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <USB_SetTurnaroundTime+0x134>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d802      	bhi.n	800446c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004466:	230a      	movs	r3, #10
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e02b      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4a26      	ldr	r2, [pc, #152]	; (8004508 <USB_SetTurnaroundTime+0x134>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d906      	bls.n	8004482 <USB_SetTurnaroundTime+0xae>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <USB_SetTurnaroundTime+0x138>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d802      	bhi.n	8004482 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800447c:	2309      	movs	r3, #9
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e020      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4a21      	ldr	r2, [pc, #132]	; (800450c <USB_SetTurnaroundTime+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d906      	bls.n	8004498 <USB_SetTurnaroundTime+0xc4>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <USB_SetTurnaroundTime+0x13c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004492:	2308      	movs	r3, #8
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e015      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <USB_SetTurnaroundTime+0x13c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d906      	bls.n	80044ae <USB_SetTurnaroundTime+0xda>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <USB_SetTurnaroundTime+0x140>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d802      	bhi.n	80044ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044a8:	2307      	movs	r3, #7
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e00a      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ae:	2306      	movs	r3, #6
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e007      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044ba:	2309      	movs	r3, #9
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e001      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044c0:	2309      	movs	r3, #9
 80044c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	029b      	lsls	r3, r3, #10
 80044d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	00d8acbf 	.word	0x00d8acbf
 80044f4:	00e4e1bf 	.word	0x00e4e1bf
 80044f8:	00f423ff 	.word	0x00f423ff
 80044fc:	0106737f 	.word	0x0106737f
 8004500:	011a499f 	.word	0x011a499f
 8004504:	01312cff 	.word	0x01312cff
 8004508:	014ca43f 	.word	0x014ca43f
 800450c:	016e35ff 	.word	0x016e35ff
 8004510:	01a6ab1f 	.word	0x01a6ab1f
 8004514:	01e847ff 	.word	0x01e847ff

08004518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	e00b      	b.n	80045a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e001      	b.n	80045a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e003      	b.n	80045a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045a0:	2032      	movs	r0, #50	; 0x32
 80045a2:	f7fd fe11 	bl	80021c8 <HAL_Delay>

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b0:	b084      	sub	sp, #16
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e009      	b.n	80045e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3340      	adds	r3, #64	; 0x40
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3301      	adds	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b0e      	cmp	r3, #14
 80045e8:	d9f2      	bls.n	80045d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d11c      	bne.n	800462a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
 8004628:	e00b      	b.n	8004642 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004648:	461a      	mov	r2, r3
 800464a:	2300      	movs	r3, #0
 800464c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	4619      	mov	r1, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	461a      	mov	r2, r3
 800465e:	680b      	ldr	r3, [r1, #0]
 8004660:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10c      	bne.n	8004682 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800466e:	2100      	movs	r1, #0
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f949 	bl	8004908 <USB_SetDevSpeed>
 8004676:	e008      	b.n	800468a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004678:	2101      	movs	r1, #1
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f944 	bl	8004908 <USB_SetDevSpeed>
 8004680:	e003      	b.n	800468a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004682:	2103      	movs	r1, #3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f93f 	bl	8004908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800468a:	2110      	movs	r1, #16
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8f3 	bl	8004878 <USB_FlushTxFifo>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f911 	bl	80048c4 <USB_FlushRxFifo>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	e043      	b.n	800475e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d118      	bne.n	8004720 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	e013      	b.n	8004732 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	461a      	mov	r2, r3
 8004718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e008      	b.n	8004732 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	461a      	mov	r2, r3
 8004752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	3301      	adds	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3b7      	bcc.n	80046d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e043      	b.n	80047f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800477e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004782:	d118      	bne.n	80047b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e013      	b.n	80047c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e008      	b.n	80047c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3b7      	bcc.n	800476c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f043 0210 	orr.w	r2, r3, #16
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <USB_DevInit+0x2c4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f043 0208 	orr.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr
 8004874:	803c3800 	.word	0x803c3800

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <USB_FlushTxFifo+0x48>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e006      	b.n	80048b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d0f0      	beq.n	8004892 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	00030d40 	.word	0x00030d40

080048c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2210      	movs	r2, #16
 80048d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <USB_FlushRxFifo+0x40>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d0f0      	beq.n	80048d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	00030d40 	.word	0x00030d40

08004908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b087      	sub	sp, #28
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
 800495e:	e00a      	b.n	8004976 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d002      	beq.n	800496c <USB_GetDevSpeed+0x32>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b06      	cmp	r3, #6
 800496a:	d102      	bne.n	8004972 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800496c:	2302      	movs	r3, #2
 800496e:	75fb      	strb	r3, [r7, #23]
 8004970:	e001      	b.n	8004976 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004972:	230f      	movs	r3, #15
 8004974:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d13a      	bne.n	8004a16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049be:	4313      	orrs	r3, r2
 80049c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d155      	bne.n	8004a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049fc:	4313      	orrs	r3, r2
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e036      	b.n	8004a84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11a      	bne.n	8004a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	78db      	ldrb	r3, [r3, #3]
 8004a68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d161      	bne.n	8004b74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac6:	d11f      	bne.n	8004b08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ae6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4013      	ands	r3, r2
 8004b2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	440b      	add	r3, r1
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <USB_DeactivateEndpoint+0x1b0>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
 8004b72:	e060      	b.n	8004c36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8a:	d11f      	bne.n	8004bcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004baa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	43db      	mvns	r3, r3
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bec:	4013      	ands	r3, r2
 8004bee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c10:	4013      	ands	r3, r2
 8004c12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0159      	lsls	r1, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	440b      	add	r3, r1
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <USB_DeactivateEndpoint+0x1b4>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	ec337800 	.word	0xec337800
 8004c48:	eff37800 	.word	0xeff37800

08004c4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 815c 	bne.w	8004f26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d132      	bne.n	8004cdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd4:	0cdb      	lsrs	r3, r3, #19
 8004cd6:	04db      	lsls	r3, r3, #19
 8004cd8:	6113      	str	r3, [r2, #16]
 8004cda:	e074      	b.n	8004dc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	0cdb      	lsrs	r3, r3, #19
 8004cf8:	04db      	lsls	r3, r3, #19
 8004cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6959      	ldr	r1, [r3, #20]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	440b      	add	r3, r1
 8004d38:	1e59      	subs	r1, r3, #1
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d42:	04d9      	lsls	r1, r3, #19
 8004d44:	4b9d      	ldr	r3, [pc, #628]	; (8004fbc <USB_EPStartXfer+0x370>)
 8004d46:	400b      	ands	r3, r1
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	0148      	lsls	r0, r1, #5
 8004d72:	69f9      	ldr	r1, [r7, #28]
 8004d74:	4401      	add	r1, r0
 8004d76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	78db      	ldrb	r3, [r3, #3]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d11f      	bne.n	8004dc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004da4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d14b      	bne.n	8004e64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	461a      	mov	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d128      	bne.n	8004e42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d110      	bne.n	8004e22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e00f      	b.n	8004e42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e12f      	b.n	80050c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	78db      	ldrb	r3, [r3, #3]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d015      	beq.n	8004eb8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8117 	beq.w	80050c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	634b      	str	r3, [r1, #52]	; 0x34
 8004eb6:	e105      	b.n	80050c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d110      	bne.n	8004eea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e00f      	b.n	8004f0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	b298      	uxth	r0, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa2b 	bl	800537a <USB_WritePacket>
 8004f24:	e0ce      	b.n	80050c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f40:	0cdb      	lsrs	r3, r3, #19
 8004f42:	04db      	lsls	r3, r3, #19
 8004f44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d126      	bne.n	8004fc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f88:	69b9      	ldr	r1, [r7, #24]
 8004f8a:	0148      	lsls	r0, r1, #5
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	4401      	add	r1, r0
 8004f90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f94:	4313      	orrs	r3, r2
 8004f96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fb6:	6113      	str	r3, [r2, #16]
 8004fb8:	e036      	b.n	8005028 <USB_EPStartXfer+0x3dc>
 8004fba:	bf00      	nop
 8004fbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	8afb      	ldrh	r3, [r7, #22]
 8004fe6:	04d9      	lsls	r1, r3, #19
 8004fe8:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <USB_EPStartXfer+0x484>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	69b9      	ldr	r1, [r7, #24]
 8004fee:	0148      	lsls	r0, r1, #5
 8004ff0:	69f9      	ldr	r1, [r7, #28]
 8004ff2:	4401      	add	r1, r0
 8004ff4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	8af9      	ldrh	r1, [r7, #22]
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	0148      	lsls	r0, r1, #5
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	4401      	add	r1, r0
 8005020:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d10d      	bne.n	800504a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	460a      	mov	r2, r1
 8005048:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	78db      	ldrb	r3, [r3, #3]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d128      	bne.n	80050a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d110      	bne.n	8005084 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e00f      	b.n	80050a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	1ff80000 	.word	0x1ff80000

080050d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 80cd 	bne.w	8005290 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d132      	bne.n	8005164 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005118:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800511c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005140:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	0cdb      	lsrs	r3, r3, #19
 800515e:	04db      	lsls	r3, r3, #19
 8005160:	6113      	str	r3, [r2, #16]
 8005162:	e04e      	b.n	8005202 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	0cdb      	lsrs	r3, r3, #19
 8005180:	04db      	lsls	r3, r3, #19
 8005182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	0148      	lsls	r0, r1, #5
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	4401      	add	r1, r0
 80051fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d11e      	bne.n	8005246 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e092      	b.n	800536c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005264:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d07e      	beq.n	800536c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	2101      	movs	r1, #1
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528a:	4313      	orrs	r3, r2
 800528c:	634b      	str	r3, [r1, #52]	; 0x34
 800528e:	e06d      	b.n	800536c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052aa:	0cdb      	lsrs	r3, r3, #19
 80052ac:	04db      	lsls	r3, r3, #19
 80052ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005302:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531a:	6939      	ldr	r1, [r7, #16]
 800531c:	0148      	lsls	r0, r1, #5
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	4401      	add	r1, r0
 8005322:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10d      	bne.n	800534c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	68d9      	ldr	r1, [r3, #12]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	460a      	mov	r2, r1
 800534a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005366:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800536a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800537a:	b480      	push	{r7}
 800537c:	b089      	sub	sp, #36	; 0x24
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	4611      	mov	r1, r2
 8005386:	461a      	mov	r2, r3
 8005388:	460b      	mov	r3, r1
 800538a:	71fb      	strb	r3, [r7, #7]
 800538c:	4613      	mov	r3, r2
 800538e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11a      	bne.n	80053d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053a0:	88bb      	ldrh	r3, [r7, #4]
 80053a2:	3303      	adds	r3, #3
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e00f      	b.n	80053ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	031a      	lsls	r2, r3, #12
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ba:	461a      	mov	r2, r3
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3304      	adds	r3, #4
 80053c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3eb      	bcc.n	80053ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3724      	adds	r7, #36	; 0x24
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	3303      	adds	r3, #3
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	e00b      	b.n	8005420 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	601a      	str	r2, [r3, #0]
    pDest++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3304      	adds	r3, #4
 8005418:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3301      	adds	r3, #1
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	429a      	cmp	r2, r3
 8005426:	d3ef      	bcc.n	8005408 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005428:	69fb      	ldr	r3, [r7, #28]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3724      	adds	r7, #36	; 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d12c      	bne.n	80054ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db12      	blt.n	800548a <USB_EPSetStall+0x54>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005488:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e02b      	b.n	8005504 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db12      	blt.n	80054e4 <USB_EPSetStall+0xae>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00f      	beq.n	80054e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d128      	bne.n	8005580 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800554c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d003      	beq.n	800555e <USB_EPClearStall+0x4c>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	78db      	ldrb	r3, [r3, #3]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d138      	bne.n	80055d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e027      	b.n	80055d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	78db      	ldrb	r3, [r3, #3]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d003      	beq.n	80055b0 <USB_EPClearStall+0x9e>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d10f      	bne.n	80055d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005600:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005644:	f023 0302 	bic.w	r3, r3, #2
 8005648:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800564a:	2003      	movs	r0, #3
 800564c:	f7fc fdbc 	bl	80021c8 <HAL_Delay>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800567a:	2003      	movs	r0, #3
 800567c:	f7fc fda4 	bl	80021c8 <HAL_Delay>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4013      	ands	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	0c1b      	lsrs	r3, r3, #16
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	b29b      	uxth	r3, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005746:	68bb      	ldr	r3, [r7, #8]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	b2db      	uxtb	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4013      	ands	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057a2:	68bb      	ldr	r3, [r7, #8]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0301 	and.w	r3, r3, #1
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	460b      	mov	r3, r1
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	333c      	adds	r3, #60	; 0x3c
 800582a:	3304      	adds	r3, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4a26      	ldr	r2, [pc, #152]	; (80058cc <USB_EP0_OutStart+0xb8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d90a      	bls.n	800584e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005848:	d101      	bne.n	800584e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e037      	b.n	80058be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	2300      	movs	r3, #0
 8005858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587c:	f043 0318 	orr.w	r3, r3, #24
 8005880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005894:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10f      	bne.n	80058bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	4f54300a 	.word	0x4f54300a

080058d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a13      	ldr	r2, [pc, #76]	; (8005934 <USB_CoreReset+0x64>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e01b      	b.n	8005926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	daf2      	bge.n	80058dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f043 0201 	orr.w	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <USB_CoreReset+0x64>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d901      	bls.n	8005918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d0f0      	beq.n	8005906 <USB_CoreReset+0x36>

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	00030d40 	.word	0x00030d40

08005938 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005944:	2018      	movs	r0, #24
 8005946:	f001 ffe3 	bl	8007910 <malloc>
 800594a:	4603      	mov	r3, r0
 800594c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800595c:	2302      	movs	r3, #2
 800595e:	e038      	b.n	80059d2 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	7c1b      	ldrb	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2205      	movs	r2, #5
 8005974:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2205      	movs	r2, #5
 800597a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800597e:	e006      	b.n	800598e <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2205      	movs	r2, #5
 8005984:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2205      	movs	r2, #5
 800598a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800598e:	2302      	movs	r3, #2
 8005990:	2203      	movs	r2, #3
 8005992:	2181      	movs	r1, #129	; 0x81
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 fe54 	bl	8007642 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80059a0:	2302      	movs	r3, #2
 80059a2:	2203      	movs	r2, #3
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fe4b 	bl	8007642 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	2302      	movs	r3, #2
 80059c8:	2101      	movs	r1, #1
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 ff28 	bl	8007820 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80059e6:	2181      	movs	r1, #129	; 0x81
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fe50 	bl	800768e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80059fa:	2101      	movs	r1, #1
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fe46 	bl	800768e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 ff77 	bl	8007920 <free>
    pdev->pClassData = NULL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a54:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d051      	beq.n	8005b16 <USBD_CUSTOM_HID_Setup+0xd2>
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 80d9 	bne.w	8005c2a <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	3b02      	subs	r3, #2
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d841      	bhi.n	8005b06 <USBD_CUSTOM_HID_Setup+0xc2>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <USBD_CUSTOM_HID_Setup+0x44>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005abf 	.word	0x08005abf
 8005a90:	08005b07 	.word	0x08005b07
 8005a94:	08005b07 	.word	0x08005b07
 8005a98:	08005b07 	.word	0x08005b07
 8005a9c:	08005b07 	.word	0x08005b07
 8005aa0:	08005b07 	.word	0x08005b07
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005acf 	.word	0x08005acf
 8005aac:	08005ab1 	.word	0x08005ab1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	885b      	ldrh	r3, [r3, #2]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]
      break;
 8005abc:	e02a      	b.n	8005b14 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fa2d 	bl	8006f26 <USBD_CtlSendData>
      break;
 8005acc:	e022      	b.n	8005b14 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	885b      	ldrh	r3, [r3, #2]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	609a      	str	r2, [r3, #8]
      break;
 8005ade:	e019      	b.n	8005b14 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fa1c 	bl	8006f26 <USBD_CtlSendData>
      break;
 8005aee:	e011      	b.n	8005b14 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2201      	movs	r2, #1
 8005af4:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	88db      	ldrh	r3, [r3, #6]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fa3d 	bl	8006f7e <USBD_CtlPrepareRx>
      break;
 8005b04:	e006      	b.n	8005b14 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 f99b 	bl	8006e44 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	75fb      	strb	r3, [r7, #23]
      break;
 8005b12:	bf00      	nop
    }
    break;
 8005b14:	e090      	b.n	8005c38 <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b0b      	cmp	r3, #11
 8005b1c:	d87c      	bhi.n	8005c18 <USBD_CUSTOM_HID_Setup+0x1d4>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005c27 	.word	0x08005c27
 8005b2c:	08005c19 	.word	0x08005c19
 8005b30:	08005c19 	.word	0x08005c19
 8005b34:	08005c19 	.word	0x08005c19
 8005b38:	08005c19 	.word	0x08005c19
 8005b3c:	08005b7d 	.word	0x08005b7d
 8005b40:	08005c19 	.word	0x08005c19
 8005b44:	08005c19 	.word	0x08005c19
 8005b48:	08005c19 	.word	0x08005c19
 8005b4c:	08005bcb 	.word	0x08005bcb
 8005b50:	08005bf3 	.word	0x08005bf3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d107      	bne.n	8005b6e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b5e:	f107 030e 	add.w	r3, r7, #14
 8005b62:	2202      	movs	r2, #2
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 f9dd 	bl	8006f26 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b6c:	e05c      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 f967 	bl	8006e44 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b76:	2303      	movs	r3, #3
 8005b78:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7a:	e055      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	885b      	ldrh	r3, [r3, #2]
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b22      	cmp	r3, #34	; 0x22
 8005b86:	d10b      	bne.n	8005ba0 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	88db      	ldrh	r3, [r3, #6]
 8005b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b8e:	bf28      	it	cs
 8005b90:	232e      	movcs	r3, #46	; 0x2e
 8005b92:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e00d      	b.n	8005bbc <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	885b      	ldrh	r3, [r3, #2]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b21      	cmp	r3, #33	; 0x21
 8005baa:	d107      	bne.n	8005bbc <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <USBD_CUSTOM_HID_Setup+0x200>)
 8005bae:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	88db      	ldrh	r3, [r3, #6]
 8005bb4:	2b09      	cmp	r3, #9
 8005bb6:	bf28      	it	cs
 8005bb8:	2309      	movcs	r3, #9
 8005bba:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bbc:	8bfb      	ldrh	r3, [r7, #30]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 f9af 	bl	8006f26 <USBD_CtlSendData>
      break;
 8005bc8:	e02e      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d107      	bne.n	8005be4 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f9a2 	bl	8006f26 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005be2:	e021      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 f92c 	bl	8006e44 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bec:	2303      	movs	r3, #3
 8005bee:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf0:	e01a      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d106      	bne.n	8005c0a <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	885b      	ldrh	r3, [r3, #2]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c08:	e00e      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 f919 	bl	8006e44 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c12:	2303      	movs	r3, #3
 8005c14:	75fb      	strb	r3, [r7, #23]
      break;
 8005c16:	e007      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f912 	bl	8006e44 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c20:	2303      	movs	r3, #3
 8005c22:	75fb      	strb	r3, [r7, #23]
      break;
 8005c24:	e000      	b.n	8005c28 <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 8005c26:	bf00      	nop
    }
    break;
 8005c28:	e006      	b.n	8005c38 <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f909 	bl	8006e44 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c32:	2303      	movs	r3, #3
 8005c34:	75fb      	strb	r3, [r7, #23]
    break;
 8005c36:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200000c8 	.word	0x200000c8

08005c48 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e019      	b.n	8005c98 <USBD_CUSTOM_HID_SendReport+0x50>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d10f      	bne.n	8005c96 <USBD_CUSTOM_HID_SendReport+0x4e>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	7d1b      	ldrb	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <USBD_CUSTOM_HID_SendReport+0x4a>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2201      	movs	r2, #1
 8005c82:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f001 fda7 	bl	80077de <USBD_LL_Transmit>
 8005c90:	e001      	b.n	8005c96 <USBD_CUSTOM_HID_SendReport+0x4e>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <USBD_CUSTOM_HID_SendReport+0x50>
    }
  }
  return (uint8_t)USBD_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2229      	movs	r2, #41	; 0x29
 8005cac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005cae:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000044 	.word	0x20000044

08005cc0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2229      	movs	r2, #41	; 0x29
 8005ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005cce:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000070 	.word	0x20000070

08005ce0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2229      	movs	r2, #41	; 0x29
 8005cec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	2000009c 	.word	0x2000009c

08005d00 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d12:	2200      	movs	r2, #0
 8005d14:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e00e      	b.n	8005d5c <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d44:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	7810      	ldrb	r0, [r2, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	7852      	ldrb	r2, [r2, #1]
 8005d56:	4611      	mov	r1, r2
 8005d58:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e00a      	b.n	8005d90 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	2302      	movs	r3, #2
 8005d86:	2101      	movs	r1, #1
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fd49 	bl	8007820 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10c      	bne.n	8005dca <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	7810      	ldrb	r0, [r2, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	7852      	ldrb	r2, [r2, #1]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	220a      	movs	r2, #10
 8005de0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	200000d4 	.word	0x200000d4

08005df4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e004      	b.n	8005e12 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e025      	b.n	8005e82 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	79fa      	ldrb	r2, [r7, #7]
 8005e74:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f001 fb7c 	bl	8007574 <USBD_LL_Init>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e010      	b.n	8005ec4 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	f107 020e 	add.w	r2, r7, #14
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4798      	blx	r3
 8005eba:	4602      	mov	r2, r0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fb99 	bl	800760c <USBD_LL_Start>
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f06:	2303      	movs	r3, #3
 8005f08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	4611      	mov	r1, r2
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
  }

  return USBD_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 ff2b 	bl	8006dd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d00e      	beq.n	8005fbc <USBD_LL_SetupStage+0x5a>
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d302      	bcc.n	8005fa8 <USBD_LL_SetupStage+0x46>
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d014      	beq.n	8005fd0 <USBD_LL_SetupStage+0x6e>
 8005fa6:	e01d      	b.n	8005fe4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa17 	bl	80063e4 <USBD_StdDevReq>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fba:	e020      	b.n	8005ffe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa7b 	bl	80064c0 <USBD_StdItfReq>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fce:	e016      	b.n	8005ffe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fab7 	bl	800654c <USBD_StdEPReq>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e00c      	b.n	8005ffe <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fb6a 	bl	80076cc <USBD_LL_StallEP>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	bf00      	nop
  }

  return ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d137      	bne.n	800608c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006022:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800602a:	2b03      	cmp	r3, #3
 800602c:	d14a      	bne.n	80060c4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	429a      	cmp	r2, r3
 8006038:	d913      	bls.n	8006062 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4293      	cmp	r3, r2
 8006052:	bf28      	it	cs
 8006054:	4613      	movcs	r3, r2
 8006056:	461a      	mov	r2, r3
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 ffac 	bl	8006fb8 <USBD_CtlContinueRx>
 8006060:	e030      	b.n	80060c4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006074:	2b03      	cmp	r3, #3
 8006076:	d105      	bne.n	8006084 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 ffa8 	bl	8006fda <USBD_CtlSendStatus>
 800608a:	e01b      	b.n	80060c4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d10e      	bne.n	80060c0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	7afa      	ldrb	r2, [r7, #11]
 80060ac:	4611      	mov	r1, r2
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	4798      	blx	r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	e002      	b.n	80060c6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e000      	b.n	80060c6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	460b      	mov	r3, r1
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d16a      	bne.n	80061b8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3314      	adds	r3, #20
 80060e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d155      	bne.n	800619e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d914      	bls.n	8006128 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	461a      	mov	r2, r3
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 ff21 	bl	8006f5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800611a:	2300      	movs	r3, #0
 800611c:	2200      	movs	r2, #0
 800611e:	2100      	movs	r1, #0
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f001 fb7d 	bl	8007820 <USBD_LL_PrepareReceive>
 8006126:	e03a      	b.n	800619e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d11c      	bne.n	800616e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800613c:	429a      	cmp	r2, r3
 800613e:	d316      	bcc.n	800616e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800614a:	429a      	cmp	r2, r3
 800614c:	d20f      	bcs.n	800616e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800614e:	2200      	movs	r2, #0
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 ff02 	bl	8006f5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006160:	2300      	movs	r3, #0
 8006162:	2200      	movs	r2, #0
 8006164:	2100      	movs	r1, #0
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 fb5a 	bl	8007820 <USBD_LL_PrepareReceive>
 800616c:	e017      	b.n	800619e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006180:	2b03      	cmp	r3, #3
 8006182:	d105      	bne.n	8006190 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 fa9a 	bl	80076cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 ff31 	bl	8007000 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d123      	bne.n	80061f0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fe9b 	bl	8005ee4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80061b6:	e01b      	b.n	80061f0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d10e      	bne.n	80061ec <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	7afa      	ldrb	r2, [r7, #11]
 80061d8:	4611      	mov	r1, r2
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	4798      	blx	r3
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	e002      	b.n	80061f2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e000      	b.n	80061f2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	4611      	mov	r1, r2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f9fc 	bl	8007642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800625a:	2340      	movs	r3, #64	; 0x40
 800625c:	2200      	movs	r2, #0
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f9ee 	bl	8007642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2240      	movs	r2, #64	; 0x40
 8006270:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2204      	movs	r2, #4
 80062b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d105      	bne.n	80062e4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	2b03      	cmp	r3, #3
 8006302:	d10b      	bne.n	800631c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6852      	ldr	r2, [r2, #4]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	4611      	mov	r1, r2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
  }

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063c6:	8a3b      	ldrh	r3, [r7, #16]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063d6:	89fb      	ldrh	r3, [r7, #14]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d004      	beq.n	8006408 <USBD_StdDevReq+0x24>
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d002      	beq.n	8006408 <USBD_StdDevReq+0x24>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <USBD_StdDevReq+0x38>
 8006406:	e050      	b.n	80064aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
    break;
 800641a:	e04b      	b.n	80064b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b09      	cmp	r3, #9
 8006422:	d83c      	bhi.n	800649e <USBD_StdDevReq+0xba>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <USBD_StdDevReq+0x48>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006481 	.word	0x08006481
 8006430:	08006495 	.word	0x08006495
 8006434:	0800649f 	.word	0x0800649f
 8006438:	0800648b 	.word	0x0800648b
 800643c:	0800649f 	.word	0x0800649f
 8006440:	0800645f 	.word	0x0800645f
 8006444:	08006455 	.word	0x08006455
 8006448:	0800649f 	.word	0x0800649f
 800644c:	08006477 	.word	0x08006477
 8006450:	08006469 	.word	0x08006469
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9ce 	bl	80067f8 <USBD_GetDescriptor>
      break;
 800645c:	e024      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fb33 	bl	8006acc <USBD_SetAddress>
      break;
 8006466:	e01f      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fb70 	bl	8006b50 <USBD_SetConfig>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e018      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc0d 	bl	8006c98 <USBD_GetConfig>
      break;
 800647e:	e013      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fc3c 	bl	8006d00 <USBD_GetStatus>
      break;
 8006488:	e00e      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc6a 	bl	8006d66 <USBD_SetFeature>
      break;
 8006492:	e009      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc79 	bl	8006d8e <USBD_ClrFeature>
      break;
 800649c:	e004      	b.n	80064a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fccf 	bl	8006e44 <USBD_CtlError>
      break;
 80064a6:	bf00      	nop
    }
    break;
 80064a8:	e004      	b.n	80064b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fcc9 	bl	8006e44 <USBD_CtlError>
    break;
 80064b2:	bf00      	nop
  }

  return ret;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d003      	beq.n	80064e2 <USBD_StdItfReq+0x22>
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d001      	beq.n	80064e2 <USBD_StdItfReq+0x22>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d12a      	bne.n	8006538 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	3b01      	subs	r3, #1
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d81d      	bhi.n	800652a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	889b      	ldrh	r3, [r3, #4]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d813      	bhi.n	8006520 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	88db      	ldrh	r3, [r3, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d110      	bne.n	8006534 <USBD_StdItfReq+0x74>
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10d      	bne.n	8006534 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd5e 	bl	8006fda <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800651e:	e009      	b.n	8006534 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fc8e 	bl	8006e44 <USBD_CtlError>
      break;
 8006528:	e004      	b.n	8006534 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fc89 	bl	8006e44 <USBD_CtlError>
      break;
 8006532:	e000      	b.n	8006536 <USBD_StdItfReq+0x76>
      break;
 8006534:	bf00      	nop
    }
    break;
 8006536:	e004      	b.n	8006542 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fc82 	bl	8006e44 <USBD_CtlError>
    break;
 8006540:	bf00      	nop
  }

  return ret;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	889b      	ldrh	r3, [r3, #4]
 800655e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006568:	2b20      	cmp	r3, #32
 800656a:	d004      	beq.n	8006576 <USBD_StdEPReq+0x2a>
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d002      	beq.n	8006576 <USBD_StdEPReq+0x2a>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <USBD_StdEPReq+0x3e>
 8006574:	e135      	b.n	80067e2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
    break;
 8006588:	e130      	b.n	80067ec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d03e      	beq.n	8006610 <USBD_StdEPReq+0xc4>
 8006592:	2b03      	cmp	r3, #3
 8006594:	d002      	beq.n	800659c <USBD_StdEPReq+0x50>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d077      	beq.n	800668a <USBD_StdEPReq+0x13e>
 800659a:	e11c      	b.n	80067d6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d002      	beq.n	80065ac <USBD_StdEPReq+0x60>
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d015      	beq.n	80065d6 <USBD_StdEPReq+0x8a>
 80065aa:	e02b      	b.n	8006604 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <USBD_StdEPReq+0x80>
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d009      	beq.n	80065cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 f885 	bl	80076cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f881 	bl	80076cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80065ca:	e020      	b.n	800660e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fc38 	bl	8006e44 <USBD_CtlError>
        break;
 80065d4:	e01b      	b.n	800660e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10e      	bne.n	80065fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <USBD_StdEPReq+0xb0>
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d008      	beq.n	80065fc <USBD_StdEPReq+0xb0>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f868 	bl	80076cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fcec 	bl	8006fda <USBD_CtlSendStatus>

        break;
 8006602:	e004      	b.n	800660e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fc1c 	bl	8006e44 <USBD_CtlError>
        break;
 800660c:	bf00      	nop
      }
      break;
 800660e:	e0e7      	b.n	80067e0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	2b02      	cmp	r3, #2
 8006618:	d002      	beq.n	8006620 <USBD_StdEPReq+0xd4>
 800661a:	2b03      	cmp	r3, #3
 800661c:	d015      	beq.n	800664a <USBD_StdEPReq+0xfe>
 800661e:	e02d      	b.n	800667c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <USBD_StdEPReq+0xf4>
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d009      	beq.n	8006640 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f84b 	bl	80076cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006636:	2180      	movs	r1, #128	; 0x80
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 f847 	bl	80076cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800663e:	e023      	b.n	8006688 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbfe 	bl	8006e44 <USBD_CtlError>
        break;
 8006648:	e01e      	b.n	8006688 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d119      	bne.n	8006686 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f852 	bl	800770a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fcb7 	bl	8006fda <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
        }
        break;
 800667a:	e004      	b.n	8006686 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fbe0 	bl	8006e44 <USBD_CtlError>
        break;
 8006684:	e000      	b.n	8006688 <USBD_StdEPReq+0x13c>
        break;
 8006686:	bf00      	nop
      }
      break;
 8006688:	e0aa      	b.n	80067e0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006690:	2b02      	cmp	r3, #2
 8006692:	d002      	beq.n	800669a <USBD_StdEPReq+0x14e>
 8006694:	2b03      	cmp	r3, #3
 8006696:	d032      	beq.n	80066fe <USBD_StdEPReq+0x1b2>
 8006698:	e097      	b.n	80067ca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <USBD_StdEPReq+0x164>
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d004      	beq.n	80066b0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fbcb 	bl	8006e44 <USBD_CtlError>
          break;
 80066ae:	e091      	b.n	80067d4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da0b      	bge.n	80066d0 <USBD_StdEPReq+0x184>
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	3310      	adds	r3, #16
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	3304      	adds	r3, #4
 80066ce:	e00b      	b.n	80066e8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	3304      	adds	r3, #4
 80066e8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2202      	movs	r2, #2
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc15 	bl	8006f26 <USBD_CtlSendData>
        break;
 80066fc:	e06a      	b.n	80067d4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80066fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006702:	2b00      	cmp	r3, #0
 8006704:	da11      	bge.n	800672a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d117      	bne.n	8006750 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fb8e 	bl	8006e44 <USBD_CtlError>
            break;
 8006728:	e054      	b.n	80067d4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fb7b 	bl	8006e44 <USBD_CtlError>
            break;
 800674e:	e041      	b.n	80067d4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006754:	2b00      	cmp	r3, #0
 8006756:	da0b      	bge.n	8006770 <USBD_StdEPReq+0x224>
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	3310      	adds	r3, #16
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	4413      	add	r3, r2
 800676c:	3304      	adds	r3, #4
 800676e:	e00b      	b.n	8006788 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	3304      	adds	r3, #4
 8006788:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <USBD_StdEPReq+0x24a>
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d103      	bne.n	800679e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e00e      	b.n	80067bc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 ffd0 	bl	8007748 <USBD_LL_IsStallEP>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e002      	b.n	80067bc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2202      	movs	r2, #2
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbaf 	bl	8006f26 <USBD_CtlSendData>
          break;
 80067c8:	e004      	b.n	80067d4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb39 	bl	8006e44 <USBD_CtlError>
        break;
 80067d2:	bf00      	nop
      }
      break;
 80067d4:	e004      	b.n	80067e0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb33 	bl	8006e44 <USBD_CtlError>
      break;
 80067de:	bf00      	nop
    }
    break;
 80067e0:	e004      	b.n	80067ec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb2d 	bl	8006e44 <USBD_CtlError>
    break;
 80067ea:	bf00      	nop
  }

  return ret;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	885b      	ldrh	r3, [r3, #2]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	2b06      	cmp	r3, #6
 800681a:	f200 8128 	bhi.w	8006a6e <USBD_GetDescriptor+0x276>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <USBD_GetDescriptor+0x2c>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006841 	.word	0x08006841
 8006828:	08006859 	.word	0x08006859
 800682c:	08006899 	.word	0x08006899
 8006830:	08006a6f 	.word	0x08006a6f
 8006834:	08006a6f 	.word	0x08006a6f
 8006838:	08006a0f 	.word	0x08006a0f
 800683c:	08006a3b 	.word	0x08006a3b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	7c12      	ldrb	r2, [r2, #16]
 800684c:	f107 0108 	add.w	r1, r7, #8
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	60f8      	str	r0, [r7, #12]
    break;
 8006856:	e112      	b.n	8006a7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7c1b      	ldrb	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10d      	bne.n	800687c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f107 0208 	add.w	r2, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	2202      	movs	r2, #2
 8006878:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800687a:	e100      	b.n	8006a7e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	f107 0208 	add.w	r2, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	2202      	movs	r2, #2
 8006894:	701a      	strb	r2, [r3, #0]
    break;
 8006896:	e0f2      	b.n	8006a7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	885b      	ldrh	r3, [r3, #2]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b05      	cmp	r3, #5
 80068a0:	f200 80ac 	bhi.w	80069fc <USBD_GetDescriptor+0x204>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <USBD_GetDescriptor+0xb4>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068c5 	.word	0x080068c5
 80068b0:	080068f9 	.word	0x080068f9
 80068b4:	0800692d 	.word	0x0800692d
 80068b8:	08006961 	.word	0x08006961
 80068bc:	08006995 	.word	0x08006995
 80068c0:	080069c9 	.word	0x080069c9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00b      	beq.n	80068e8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	7c12      	ldrb	r2, [r2, #16]
 80068dc:	f107 0108 	add.w	r1, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e6:	e091      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 faaa 	bl	8006e44 <USBD_CtlError>
        err++;
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	3301      	adds	r3, #1
 80068f4:	72fb      	strb	r3, [r7, #11]
      break;
 80068f6:	e089      	b.n	8006a0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	7c12      	ldrb	r2, [r2, #16]
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800691a:	e077      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa90 	bl	8006e44 <USBD_CtlError>
        err++;
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	3301      	adds	r3, #1
 8006928:	72fb      	strb	r3, [r7, #11]
      break;
 800692a:	e06f      	b.n	8006a0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7c12      	ldrb	r2, [r2, #16]
 8006944:	f107 0108 	add.w	r1, r7, #8
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800694e:	e05d      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa76 	bl	8006e44 <USBD_CtlError>
        err++;
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	3301      	adds	r3, #1
 800695c:	72fb      	strb	r3, [r7, #11]
      break;
 800695e:	e055      	b.n	8006a0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	7c12      	ldrb	r2, [r2, #16]
 8006978:	f107 0108 	add.w	r1, r7, #8
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006982:	e043      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa5c 	bl	8006e44 <USBD_CtlError>
        err++;
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	3301      	adds	r3, #1
 8006990:	72fb      	strb	r3, [r7, #11]
      break;
 8006992:	e03b      	b.n	8006a0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	f107 0108 	add.w	r1, r7, #8
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069b6:	e029      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa42 	bl	8006e44 <USBD_CtlError>
        err++;
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	3301      	adds	r3, #1
 80069c4:	72fb      	strb	r3, [r7, #11]
      break;
 80069c6:	e021      	b.n	8006a0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ea:	e00f      	b.n	8006a0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa28 	bl	8006e44 <USBD_CtlError>
        err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
      break;
 80069fa:	e007      	b.n	8006a0c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa20 	bl	8006e44 <USBD_CtlError>
      err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006a0a:	bf00      	nop
    }
    break;
 8006a0c:	e037      	b.n	8006a7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7c1b      	ldrb	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	4610      	mov	r0, r2
 8006a24:	4798      	blx	r3
 8006a26:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a28:	e029      	b.n	8006a7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fa09 	bl	8006e44 <USBD_CtlError>
      err++;
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	3301      	adds	r3, #1
 8006a36:	72fb      	strb	r3, [r7, #11]
    break;
 8006a38:	e021      	b.n	8006a7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7c1b      	ldrb	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10d      	bne.n	8006a5e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	f107 0208 	add.w	r2, r7, #8
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4798      	blx	r3
 8006a52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	2207      	movs	r2, #7
 8006a5a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006a5c:	e00f      	b.n	8006a7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9ef 	bl	8006e44 <USBD_CtlError>
      err++;
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	72fb      	strb	r3, [r7, #11]
    break;
 8006a6c:	e007      	b.n	8006a7e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9e7 	bl	8006e44 <USBD_CtlError>
    err++;
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	72fb      	strb	r3, [r7, #11]
    break;
 8006a7c:	bf00      	nop
  }

  if (err != 0U)
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d11e      	bne.n	8006ac2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	88db      	ldrh	r3, [r3, #6]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d016      	beq.n	8006aba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006a8c:	893b      	ldrh	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88da      	ldrh	r2, [r3, #6]
 8006a96:	893b      	ldrh	r3, [r7, #8]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bf28      	it	cs
 8006a9c:	4613      	movcs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006aa2:	893b      	ldrh	r3, [r7, #8]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa3c 	bl	8006f26 <USBD_CtlSendData>
 8006aae:	e009      	b.n	8006ac4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9c6 	bl	8006e44 <USBD_CtlError>
 8006ab8:	e004      	b.n	8006ac4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa8d 	bl	8006fda <USBD_CtlSendStatus>
 8006ac0:	e000      	b.n	8006ac4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ac2:	bf00      	nop
    }
  }
}
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop

08006acc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	889b      	ldrh	r3, [r3, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d130      	bne.n	8006b40 <USBD_SetAddress+0x74>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d12c      	bne.n	8006b40 <USBD_SetAddress+0x74>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	885b      	ldrh	r3, [r3, #2]
 8006aea:	2b7f      	cmp	r3, #127	; 0x7f
 8006aec:	d828      	bhi.n	8006b40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d104      	bne.n	8006b0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f99c 	bl	8006e44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0c:	e01c      	b.n	8006b48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7bfa      	ldrb	r2, [r7, #15]
 8006b12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fe40 	bl	80077a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa5a 	bl	8006fda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b34:	e008      	b.n	8006b48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	e003      	b.n	8006b48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f97e 	bl	8006e44 <USBD_CtlError>
  }
}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <USBD_SetConfig+0x144>)
 8006b66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b68:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <USBD_SetConfig+0x144>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d905      	bls.n	8006b7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f966 	bl	8006e44 <USBD_CtlError>
    return USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e087      	b.n	8006c8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d002      	beq.n	8006b8c <USBD_SetConfig+0x3c>
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d025      	beq.n	8006bd6 <USBD_SetConfig+0x86>
 8006b8a:	e071      	b.n	8006c70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006b8c:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <USBD_SetConfig+0x144>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01c      	beq.n	8006bce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006b94:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <USBD_SetConfig+0x144>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	; (8006c94 <USBD_SetConfig+0x144>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff f9a8 	bl	8005efa <USBD_SetClassConfig>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f944 	bl	8006e44 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006bbc:	e065      	b.n	8006c8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa0b 	bl	8006fda <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006bcc:	e05d      	b.n	8006c8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa03 	bl	8006fda <USBD_CtlSendStatus>
    break;
 8006bd4:	e059      	b.n	8006c8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006bd6:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <USBD_SetConfig+0x144>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d112      	bne.n	8006c04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006be6:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <USBD_SetConfig+0x144>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <USBD_SetConfig+0x144>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff f99b 	bl	8005f32 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9ec 	bl	8006fda <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006c02:	e042      	b.n	8006c8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006c04:	4b23      	ldr	r3, [pc, #140]	; (8006c94 <USBD_SetConfig+0x144>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d02a      	beq.n	8006c68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff f989 	bl	8005f32 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006c20:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <USBD_SetConfig+0x144>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <USBD_SetConfig+0x144>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff f962 	bl	8005efa <USBD_SetClassConfig>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f8fe 	bl	8006e44 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f96e 	bl	8005f32 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006c5e:	e014      	b.n	8006c8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9ba 	bl	8006fda <USBD_CtlSendStatus>
    break;
 8006c66:	e010      	b.n	8006c8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f9b6 	bl	8006fda <USBD_CtlSendStatus>
    break;
 8006c6e:	e00c      	b.n	8006c8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8e6 	bl	8006e44 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <USBD_SetConfig+0x144>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff f957 	bl	8005f32 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006c84:	2303      	movs	r3, #3
 8006c86:	73fb      	strb	r3, [r7, #15]
    break;
 8006c88:	bf00      	nop
  }

  return ret;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200001f8 	.word	0x200001f8

08006c98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d004      	beq.n	8006cb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8c9 	bl	8006e44 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006cb2:	e021      	b.n	8006cf8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	db17      	blt.n	8006cee <USBD_GetConfig+0x56>
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	dd02      	ble.n	8006cc8 <USBD_GetConfig+0x30>
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d00b      	beq.n	8006cde <USBD_GetConfig+0x46>
 8006cc6:	e012      	b.n	8006cee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f925 	bl	8006f26 <USBD_CtlSendData>
      break;
 8006cdc:	e00c      	b.n	8006cf8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f91d 	bl	8006f26 <USBD_CtlSendData>
      break;
 8006cec:	e004      	b.n	8006cf8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8a7 	bl	8006e44 <USBD_CtlError>
      break;
 8006cf6:	bf00      	nop
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	3b01      	subs	r3, #1
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d81e      	bhi.n	8006d54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	88db      	ldrh	r3, [r3, #6]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d004      	beq.n	8006d28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f88f 	bl	8006e44 <USBD_CtlError>
      break;
 8006d26:	e01a      	b.n	8006d5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f043 0202 	orr.w	r2, r3, #2
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	330c      	adds	r3, #12
 8006d48:	2202      	movs	r2, #2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8ea 	bl	8006f26 <USBD_CtlSendData>
    break;
 8006d52:	e004      	b.n	8006d5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f874 	bl	8006e44 <USBD_CtlError>
    break;
 8006d5c:	bf00      	nop
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d106      	bne.n	8006d86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f92a 	bl	8006fda <USBD_CtlSendStatus>
  }
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d80b      	bhi.n	8006dbc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d10c      	bne.n	8006dc6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f910 	bl	8006fda <USBD_CtlSendStatus>
      }
      break;
 8006dba:	e004      	b.n	8006dc6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f840 	bl	8006e44 <USBD_CtlError>
      break;
 8006dc4:	e000      	b.n	8006dc8 <USBD_ClrFeature+0x3a>
      break;
 8006dc6:	bf00      	nop
  }
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fad4 	bl	80063a8 <SWAPBYTE>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fac7 	bl	80063a8 <SWAPBYTE>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff faba 	bl	80063a8 <SWAPBYTE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	80da      	strh	r2, [r3, #6]
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fc3b 	bl	80076cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc37 	bl	80076cc <USBD_LL_StallEP>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d036      	beq.n	8006eea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e80:	6938      	ldr	r0, [r7, #16]
 8006e82:	f000 f836 	bl	8006ef2 <USBD_GetLen>
 8006e86:	4603      	mov	r3, r0
 8006e88:	3301      	adds	r3, #1
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	4413      	add	r3, r2
 8006eac:	2203      	movs	r2, #3
 8006eae:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006eb6:	e013      	b.n	8006ee0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	613b      	str	r3, [r7, #16]
    idx++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	3301      	adds	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e7      	bne.n	8006eb8 <USBD_GetString+0x52>
 8006ee8:	e000      	b.n	8006eec <USBD_GetString+0x86>
    return;
 8006eea:	bf00      	nop
  }
}
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f02:	e005      	b.n	8006f10 <USBD_GetLen+0x1e>
  {
    len++;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	3301      	adds	r3, #1
 8006f08:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f5      	bne.n	8006f04 <USBD_GetLen+0x12>
  }

  return len;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fc46 	bl	80077de <USBD_LL_Transmit>

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fc35 	bl	80077de <USBD_LL_Transmit>

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fc39 	bl	8007820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fc28 	bl	8007820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fbf4 	bl	80077de <USBD_LL_Transmit>

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2205      	movs	r2, #5
 800700c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007010:	2300      	movs	r3, #0
 8007012:	2200      	movs	r2, #0
 8007014:	2100      	movs	r1, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc02 	bl	8007820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800702c:	2200      	movs	r2, #0
 800702e:	4912      	ldr	r1, [pc, #72]	; (8007078 <MX_USB_DEVICE_Init+0x50>)
 8007030:	4812      	ldr	r0, [pc, #72]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007032:	f7fe fef4 	bl	8005e1e <USBD_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800703c:	f7fa ff7e 	bl	8001f3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007040:	490f      	ldr	r1, [pc, #60]	; (8007080 <MX_USB_DEVICE_Init+0x58>)
 8007042:	480e      	ldr	r0, [pc, #56]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007044:	f7fe ff21 	bl	8005e8a <USBD_RegisterClass>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800704e:	f7fa ff75 	bl	8001f3c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007052:	490c      	ldr	r1, [pc, #48]	; (8007084 <MX_USB_DEVICE_Init+0x5c>)
 8007054:	4809      	ldr	r0, [pc, #36]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007056:	f7fe fecd 	bl	8005df4 <USBD_CUSTOM_HID_RegisterInterface>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007060:	f7fa ff6c 	bl	8001f3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007066:	f7fe ff31 	bl	8005ecc <USBD_Start>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007070:	f7fa ff64 	bl	8001f3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000120 	.word	0x20000120
 800707c:	20000218 	.word	0x20000218
 8007080:	2000000c 	.word	0x2000000c
 8007084:	20000110 	.word	0x20000110

08007088 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800708c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800709c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	460a      	mov	r2, r1
 80070b2:	71fb      	strb	r3, [r7, #7]
 80070b4:	4613      	mov	r3, r2
 80070b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80070b8:	4803      	ldr	r0, [pc, #12]	; (80070c8 <CUSTOM_HID_OutEvent_FS+0x20>)
 80070ba:	f7fe fe53 	bl	8005d64 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80070be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000218 	.word	0x20000218

080070cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2212      	movs	r2, #18
 80070dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070de:	4b03      	ldr	r3, [pc, #12]	; (80070ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000013c 	.word	0x2000013c

080070f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2204      	movs	r2, #4
 8007100:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000150 	.word	0x20000150

08007114 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d105      	bne.n	8007132 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4907      	ldr	r1, [pc, #28]	; (8007148 <USBD_FS_ProductStrDescriptor+0x34>)
 800712a:	4808      	ldr	r0, [pc, #32]	; (800714c <USBD_FS_ProductStrDescriptor+0x38>)
 800712c:	f7ff fe9b 	bl	8006e66 <USBD_GetString>
 8007130:	e004      	b.n	800713c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4904      	ldr	r1, [pc, #16]	; (8007148 <USBD_FS_ProductStrDescriptor+0x34>)
 8007136:	4805      	ldr	r0, [pc, #20]	; (800714c <USBD_FS_ProductStrDescriptor+0x38>)
 8007138:	f7ff fe95 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	200004e8 	.word	0x200004e8
 800714c:	08007acc 	.word	0x08007acc

08007150 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	4904      	ldr	r1, [pc, #16]	; (8007170 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007160:	4804      	ldr	r0, [pc, #16]	; (8007174 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007162:	f7ff fe80 	bl	8006e66 <USBD_GetString>
  return USBD_StrDesc;
 8007166:	4b02      	ldr	r3, [pc, #8]	; (8007170 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	200004e8 	.word	0x200004e8
 8007174:	08007aec 	.word	0x08007aec

08007178 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	221a      	movs	r2, #26
 8007188:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800718a:	f000 f843 	bl	8007214 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800718e:	4b02      	ldr	r3, [pc, #8]	; (8007198 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000154 	.word	0x20000154

0800719c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4907      	ldr	r1, [pc, #28]	; (80071d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071b2:	4808      	ldr	r0, [pc, #32]	; (80071d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b4:	f7ff fe57 	bl	8006e66 <USBD_GetString>
 80071b8:	e004      	b.n	80071c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4904      	ldr	r1, [pc, #16]	; (80071d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071be:	4805      	ldr	r0, [pc, #20]	; (80071d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071c0:	f7ff fe51 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071c4:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200004e8 	.word	0x200004e8
 80071d4:	08007b00 	.word	0x08007b00

080071d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4907      	ldr	r1, [pc, #28]	; (800720c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ee:	4808      	ldr	r0, [pc, #32]	; (8007210 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f0:	f7ff fe39 	bl	8006e66 <USBD_GetString>
 80071f4:	e004      	b.n	8007200 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4904      	ldr	r1, [pc, #16]	; (800720c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071fa:	4805      	ldr	r0, [pc, #20]	; (8007210 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071fc:	f7ff fe33 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007200:	4b02      	ldr	r3, [pc, #8]	; (800720c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200004e8 	.word	0x200004e8
 8007210:	08007b14 	.word	0x08007b14

08007214 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <Get_SerialNum+0x44>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <Get_SerialNum+0x48>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007226:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <Get_SerialNum+0x4c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800723a:	2208      	movs	r2, #8
 800723c:	4909      	ldr	r1, [pc, #36]	; (8007264 <Get_SerialNum+0x50>)
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f814 	bl	800726c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007244:	2204      	movs	r2, #4
 8007246:	4908      	ldr	r1, [pc, #32]	; (8007268 <Get_SerialNum+0x54>)
 8007248:	68b8      	ldr	r0, [r7, #8]
 800724a:	f000 f80f 	bl	800726c <IntToUnicode>
  }
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	1fff7a10 	.word	0x1fff7a10
 800725c:	1fff7a14 	.word	0x1fff7a14
 8007260:	1fff7a18 	.word	0x1fff7a18
 8007264:	20000156 	.word	0x20000156
 8007268:	20000166 	.word	0x20000166

0800726c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]
 8007282:	e027      	b.n	80072d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	0f1b      	lsrs	r3, r3, #28
 8007288:	2b09      	cmp	r3, #9
 800728a:	d80b      	bhi.n	80072a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	0f1b      	lsrs	r3, r3, #28
 8007290:	b2da      	uxtb	r2, r3
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4619      	mov	r1, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	440b      	add	r3, r1
 800729c:	3230      	adds	r2, #48	; 0x30
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e00a      	b.n	80072ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	0f1b      	lsrs	r3, r3, #28
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4619      	mov	r1, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	440b      	add	r3, r1
 80072b4:	3237      	adds	r2, #55	; 0x37
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	3301      	adds	r3, #1
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4413      	add	r3, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	3301      	adds	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
 80072d4:	7dfa      	ldrb	r2, [r7, #23]
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d3d3      	bcc.n	8007284 <IntToUnicode+0x18>
  }
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f0:	f107 0314 	add.w	r3, r7, #20
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	609a      	str	r2, [r3, #8]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007308:	d13a      	bne.n	8007380 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6313      	str	r3, [r2, #48]	; 0x30
 800731a:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800732a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732c:	2302      	movs	r3, #2
 800732e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007334:	2303      	movs	r3, #3
 8007336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007338:	230a      	movs	r3, #10
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	4619      	mov	r1, r3
 8007342:	4812      	ldr	r0, [pc, #72]	; (800738c <HAL_PCD_MspInit+0xa4>)
 8007344:	f7fb f874 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	4a0e      	ldr	r2, [pc, #56]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 800734e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007352:	6353      	str	r3, [r2, #52]	; 0x34
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	4a0a      	ldr	r2, [pc, #40]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 800735e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007362:	6453      	str	r3, [r2, #68]	; 0x44
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <HAL_PCD_MspInit+0xa0>)
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	2043      	movs	r0, #67	; 0x43
 8007376:	f7fb f824 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800737a:	2043      	movs	r0, #67	; 0x43
 800737c:	f7fb f83d 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007380:	bf00      	nop
 8007382:	3728      	adds	r7, #40	; 0x28
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40023800 	.word	0x40023800
 800738c:	40020000 	.word	0x40020000

08007390 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7fe fddb 	bl	8005f62 <USBD_LL_SetupStage>
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	4619      	mov	r1, r3
 80073de:	f7fe fe13 	bl	8006008 <USBD_LL_DataOutStage>
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3348      	adds	r3, #72	; 0x48
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	4619      	mov	r1, r3
 8007412:	f7fe fe5c 	bl	80060ce <USBD_LL_DataInStage>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe ff60 	bl	80062f2 <USBD_LL_SOF>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007442:	2301      	movs	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e008      	b.n	8007466 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d102      	bne.n	8007462 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	e001      	b.n	8007466 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007462:	f7fa fd6b 	bl	8001f3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	4611      	mov	r1, r2
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe ff03 	bl	800627c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe febc 	bl	80061fa <USBD_LL_Reset>
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800749a:	4618      	mov	r0, r3
 800749c:	f7fe fefe 	bl	800629c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b2:	f043 0301 	orr.w	r3, r3, #1
 80074b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074c0:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <HAL_PCD_SuspendCallback+0x48>)
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	4a03      	ldr	r2, [pc, #12]	; (80074d4 <HAL_PCD_SuspendCallback+0x48>)
 80074c6:	f043 0306 	orr.w	r3, r3, #6
 80074ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	e000ed00 	.word	0xe000ed00

080074d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe feed 	bl	80062c6 <USBD_LL_Resume>
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe ff18 	bl	8006340 <USBD_LL_IsoOUTIncomplete>
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fef9 	bl	8006326 <USBD_LL_IsoINIncomplete>
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe ff05 	bl	800635a <USBD_LL_DevConnected>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe ff02 	bl	8006370 <USBD_LL_DevDisconnected>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d13c      	bne.n	80075fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <USBD_LL_Init+0x94>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <USBD_LL_Init+0x94>)
 8007590:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007594:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <USBD_LL_Init+0x94>)
 8007596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800759a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800759c:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <USBD_LL_Init+0x94>)
 800759e:	2204      	movs	r2, #4
 80075a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075a2:	4b19      	ldr	r3, [pc, #100]	; (8007608 <USBD_LL_Init+0x94>)
 80075a4:	2202      	movs	r2, #2
 80075a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075a8:	4b17      	ldr	r3, [pc, #92]	; (8007608 <USBD_LL_Init+0x94>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <USBD_LL_Init+0x94>)
 80075b0:	2202      	movs	r2, #2
 80075b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075b4:	4b14      	ldr	r3, [pc, #80]	; (8007608 <USBD_LL_Init+0x94>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <USBD_LL_Init+0x94>)
 80075bc:	2200      	movs	r2, #0
 80075be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075c0:	4b11      	ldr	r3, [pc, #68]	; (8007608 <USBD_LL_Init+0x94>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <USBD_LL_Init+0x94>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075cc:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <USBD_LL_Init+0x94>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075d2:	480d      	ldr	r0, [pc, #52]	; (8007608 <USBD_LL_Init+0x94>)
 80075d4:	f7fb f8f7 	bl	80027c6 <HAL_PCD_Init>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075de:	f7fa fcad 	bl	8001f3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	4808      	ldr	r0, [pc, #32]	; (8007608 <USBD_LL_Init+0x94>)
 80075e6:	f7fc fa3c 	bl	8003a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075ea:	2240      	movs	r2, #64	; 0x40
 80075ec:	2100      	movs	r1, #0
 80075ee:	4806      	ldr	r0, [pc, #24]	; (8007608 <USBD_LL_Init+0x94>)
 80075f0:	f7fc f9f0 	bl	80039d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075f4:	2280      	movs	r2, #128	; 0x80
 80075f6:	2101      	movs	r1, #1
 80075f8:	4803      	ldr	r0, [pc, #12]	; (8007608 <USBD_LL_Init+0x94>)
 80075fa:	f7fc f9eb 	bl	80039d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200006e8 	.word	0x200006e8

0800760c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fb f9ec 	bl	8002a00 <HAL_PCD_Start>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f918 	bl	8007864 <USBD_Get_USB_Status>
 8007634:	4603      	mov	r3, r0
 8007636:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007638:	7bbb      	ldrb	r3, [r7, #14]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	4608      	mov	r0, r1
 800764c:	4611      	mov	r1, r2
 800764e:	461a      	mov	r2, r3
 8007650:	4603      	mov	r3, r0
 8007652:	70fb      	strb	r3, [r7, #3]
 8007654:	460b      	mov	r3, r1
 8007656:	70bb      	strb	r3, [r7, #2]
 8007658:	4613      	mov	r3, r2
 800765a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800766a:	78bb      	ldrb	r3, [r7, #2]
 800766c:	883a      	ldrh	r2, [r7, #0]
 800766e:	78f9      	ldrb	r1, [r7, #3]
 8007670:	f7fb fdd0 	bl	8003214 <HAL_PCD_EP_Open>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f8f2 	bl	8007864 <USBD_Get_USB_Status>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007684:	7bbb      	ldrb	r3, [r7, #14]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fb fe19 	bl	80032e4 <HAL_PCD_EP_Close>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 f8d3 	bl	8007864 <USBD_Get_USB_Status>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e6:	78fa      	ldrb	r2, [r7, #3]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fb fed9 	bl	80034a2 <HAL_PCD_EP_SetStall>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f8b4 	bl	8007864 <USBD_Get_USB_Status>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007700:	7bbb      	ldrb	r3, [r7, #14]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7fb ff1e 	bl	800356a <HAL_PCD_EP_ClrStall>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 f895 	bl	8007864 <USBD_Get_USB_Status>
 800773a:	4603      	mov	r3, r0
 800773c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800773e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800775c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	4613      	mov	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	333e      	adds	r3, #62	; 0x3e
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	e00b      	b.n	8007794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fb fd03 	bl	80031ca <HAL_PCD_SetAddress>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f84a 	bl	8007864 <USBD_Get_USB_Status>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	460b      	mov	r3, r1
 80077ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077fc:	7af9      	ldrb	r1, [r7, #11]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	f7fb fe04 	bl	800340e <HAL_PCD_EP_Transmit>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f829 	bl	8007864 <USBD_Get_USB_Status>
 8007812:	4603      	mov	r3, r0
 8007814:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007816:	7dbb      	ldrb	r3, [r7, #22]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	607a      	str	r2, [r7, #4]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	460b      	mov	r3, r1
 800782e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800783e:	7af9      	ldrb	r1, [r7, #11]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	f7fb fd98 	bl	8003378 <HAL_PCD_EP_Receive>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f808 	bl	8007864 <USBD_Get_USB_Status>
 8007854:	4603      	mov	r3, r0
 8007856:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007858:	7dbb      	ldrb	r3, [r7, #22]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d817      	bhi.n	80078a8 <USBD_Get_USB_Status+0x44>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <USBD_Get_USB_Status+0x1c>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	08007891 	.word	0x08007891
 8007884:	08007897 	.word	0x08007897
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078a3 	.word	0x080078a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
    break;
 8007894:	e00b      	b.n	80078ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	73fb      	strb	r3, [r7, #15]
    break;
 800789a:	e008      	b.n	80078ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
    break;
 80078a0:	e005      	b.n	80078ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
    break;
 80078a6:	e002      	b.n	80078ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078a8:	2303      	movs	r3, #3
 80078aa:	73fb      	strb	r3, [r7, #15]
    break;
 80078ac:	bf00      	nop
  }
  return usb_status;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <__errno>:
 80078bc:	4b01      	ldr	r3, [pc, #4]	; (80078c4 <__errno+0x8>)
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000170 	.word	0x20000170

080078c8 <__libc_init_array>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	4e0d      	ldr	r6, [pc, #52]	; (8007900 <__libc_init_array+0x38>)
 80078cc:	4c0d      	ldr	r4, [pc, #52]	; (8007904 <__libc_init_array+0x3c>)
 80078ce:	1ba4      	subs	r4, r4, r6
 80078d0:	10a4      	asrs	r4, r4, #2
 80078d2:	2500      	movs	r5, #0
 80078d4:	42a5      	cmp	r5, r4
 80078d6:	d109      	bne.n	80078ec <__libc_init_array+0x24>
 80078d8:	4e0b      	ldr	r6, [pc, #44]	; (8007908 <__libc_init_array+0x40>)
 80078da:	4c0c      	ldr	r4, [pc, #48]	; (800790c <__libc_init_array+0x44>)
 80078dc:	f000 f8ea 	bl	8007ab4 <_init>
 80078e0:	1ba4      	subs	r4, r4, r6
 80078e2:	10a4      	asrs	r4, r4, #2
 80078e4:	2500      	movs	r5, #0
 80078e6:	42a5      	cmp	r5, r4
 80078e8:	d105      	bne.n	80078f6 <__libc_init_array+0x2e>
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078f0:	4798      	blx	r3
 80078f2:	3501      	adds	r5, #1
 80078f4:	e7ee      	b.n	80078d4 <__libc_init_array+0xc>
 80078f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078fa:	4798      	blx	r3
 80078fc:	3501      	adds	r5, #1
 80078fe:	e7f2      	b.n	80078e6 <__libc_init_array+0x1e>
 8007900:	08007ba4 	.word	0x08007ba4
 8007904:	08007ba4 	.word	0x08007ba4
 8007908:	08007ba4 	.word	0x08007ba4
 800790c:	08007ba8 	.word	0x08007ba8

08007910 <malloc>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <malloc+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f000 b861 	b.w	80079dc <_malloc_r>
 800791a:	bf00      	nop
 800791c:	20000170 	.word	0x20000170

08007920 <free>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <free+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f000 b80b 	b.w	8007940 <_free_r>
 800792a:	bf00      	nop
 800792c:	20000170 	.word	0x20000170

08007930 <memset>:
 8007930:	4402      	add	r2, r0
 8007932:	4603      	mov	r3, r0
 8007934:	4293      	cmp	r3, r2
 8007936:	d100      	bne.n	800793a <memset+0xa>
 8007938:	4770      	bx	lr
 800793a:	f803 1b01 	strb.w	r1, [r3], #1
 800793e:	e7f9      	b.n	8007934 <memset+0x4>

08007940 <_free_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4605      	mov	r5, r0
 8007944:	2900      	cmp	r1, #0
 8007946:	d045      	beq.n	80079d4 <_free_r+0x94>
 8007948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800794c:	1f0c      	subs	r4, r1, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	bfb8      	it	lt
 8007952:	18e4      	addlt	r4, r4, r3
 8007954:	f000 f8ac 	bl	8007ab0 <__malloc_lock>
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <_free_r+0x98>)
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	4610      	mov	r0, r2
 800795e:	b933      	cbnz	r3, 800796e <_free_r+0x2e>
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	6014      	str	r4, [r2, #0]
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800796a:	f000 b8a2 	b.w	8007ab2 <__malloc_unlock>
 800796e:	42a3      	cmp	r3, r4
 8007970:	d90c      	bls.n	800798c <_free_r+0x4c>
 8007972:	6821      	ldr	r1, [r4, #0]
 8007974:	1862      	adds	r2, r4, r1
 8007976:	4293      	cmp	r3, r2
 8007978:	bf04      	itt	eq
 800797a:	681a      	ldreq	r2, [r3, #0]
 800797c:	685b      	ldreq	r3, [r3, #4]
 800797e:	6063      	str	r3, [r4, #4]
 8007980:	bf04      	itt	eq
 8007982:	1852      	addeq	r2, r2, r1
 8007984:	6022      	streq	r2, [r4, #0]
 8007986:	6004      	str	r4, [r0, #0]
 8007988:	e7ec      	b.n	8007964 <_free_r+0x24>
 800798a:	4613      	mov	r3, r2
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	b10a      	cbz	r2, 8007994 <_free_r+0x54>
 8007990:	42a2      	cmp	r2, r4
 8007992:	d9fa      	bls.n	800798a <_free_r+0x4a>
 8007994:	6819      	ldr	r1, [r3, #0]
 8007996:	1858      	adds	r0, r3, r1
 8007998:	42a0      	cmp	r0, r4
 800799a:	d10b      	bne.n	80079b4 <_free_r+0x74>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	4401      	add	r1, r0
 80079a0:	1858      	adds	r0, r3, r1
 80079a2:	4282      	cmp	r2, r0
 80079a4:	6019      	str	r1, [r3, #0]
 80079a6:	d1dd      	bne.n	8007964 <_free_r+0x24>
 80079a8:	6810      	ldr	r0, [r2, #0]
 80079aa:	6852      	ldr	r2, [r2, #4]
 80079ac:	605a      	str	r2, [r3, #4]
 80079ae:	4401      	add	r1, r0
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e7d7      	b.n	8007964 <_free_r+0x24>
 80079b4:	d902      	bls.n	80079bc <_free_r+0x7c>
 80079b6:	230c      	movs	r3, #12
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	e7d3      	b.n	8007964 <_free_r+0x24>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	1821      	adds	r1, r4, r0
 80079c0:	428a      	cmp	r2, r1
 80079c2:	bf04      	itt	eq
 80079c4:	6811      	ldreq	r1, [r2, #0]
 80079c6:	6852      	ldreq	r2, [r2, #4]
 80079c8:	6062      	str	r2, [r4, #4]
 80079ca:	bf04      	itt	eq
 80079cc:	1809      	addeq	r1, r1, r0
 80079ce:	6021      	streq	r1, [r4, #0]
 80079d0:	605c      	str	r4, [r3, #4]
 80079d2:	e7c7      	b.n	8007964 <_free_r+0x24>
 80079d4:	bd38      	pop	{r3, r4, r5, pc}
 80079d6:	bf00      	nop
 80079d8:	200001fc 	.word	0x200001fc

080079dc <_malloc_r>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	1ccd      	adds	r5, r1, #3
 80079e0:	f025 0503 	bic.w	r5, r5, #3
 80079e4:	3508      	adds	r5, #8
 80079e6:	2d0c      	cmp	r5, #12
 80079e8:	bf38      	it	cc
 80079ea:	250c      	movcc	r5, #12
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	4606      	mov	r6, r0
 80079f0:	db01      	blt.n	80079f6 <_malloc_r+0x1a>
 80079f2:	42a9      	cmp	r1, r5
 80079f4:	d903      	bls.n	80079fe <_malloc_r+0x22>
 80079f6:	230c      	movs	r3, #12
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	2000      	movs	r0, #0
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	f000 f857 	bl	8007ab0 <__malloc_lock>
 8007a02:	4a21      	ldr	r2, [pc, #132]	; (8007a88 <_malloc_r+0xac>)
 8007a04:	6814      	ldr	r4, [r2, #0]
 8007a06:	4621      	mov	r1, r4
 8007a08:	b991      	cbnz	r1, 8007a30 <_malloc_r+0x54>
 8007a0a:	4c20      	ldr	r4, [pc, #128]	; (8007a8c <_malloc_r+0xb0>)
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	b91b      	cbnz	r3, 8007a18 <_malloc_r+0x3c>
 8007a10:	4630      	mov	r0, r6
 8007a12:	f000 f83d 	bl	8007a90 <_sbrk_r>
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f838 	bl	8007a90 <_sbrk_r>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d124      	bne.n	8007a6e <_malloc_r+0x92>
 8007a24:	230c      	movs	r3, #12
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f000 f842 	bl	8007ab2 <__malloc_unlock>
 8007a2e:	e7e4      	b.n	80079fa <_malloc_r+0x1e>
 8007a30:	680b      	ldr	r3, [r1, #0]
 8007a32:	1b5b      	subs	r3, r3, r5
 8007a34:	d418      	bmi.n	8007a68 <_malloc_r+0x8c>
 8007a36:	2b0b      	cmp	r3, #11
 8007a38:	d90f      	bls.n	8007a5a <_malloc_r+0x7e>
 8007a3a:	600b      	str	r3, [r1, #0]
 8007a3c:	50cd      	str	r5, [r1, r3]
 8007a3e:	18cc      	adds	r4, r1, r3
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f836 	bl	8007ab2 <__malloc_unlock>
 8007a46:	f104 000b 	add.w	r0, r4, #11
 8007a4a:	1d23      	adds	r3, r4, #4
 8007a4c:	f020 0007 	bic.w	r0, r0, #7
 8007a50:	1ac3      	subs	r3, r0, r3
 8007a52:	d0d3      	beq.n	80079fc <_malloc_r+0x20>
 8007a54:	425a      	negs	r2, r3
 8007a56:	50e2      	str	r2, [r4, r3]
 8007a58:	e7d0      	b.n	80079fc <_malloc_r+0x20>
 8007a5a:	428c      	cmp	r4, r1
 8007a5c:	684b      	ldr	r3, [r1, #4]
 8007a5e:	bf16      	itet	ne
 8007a60:	6063      	strne	r3, [r4, #4]
 8007a62:	6013      	streq	r3, [r2, #0]
 8007a64:	460c      	movne	r4, r1
 8007a66:	e7eb      	b.n	8007a40 <_malloc_r+0x64>
 8007a68:	460c      	mov	r4, r1
 8007a6a:	6849      	ldr	r1, [r1, #4]
 8007a6c:	e7cc      	b.n	8007a08 <_malloc_r+0x2c>
 8007a6e:	1cc4      	adds	r4, r0, #3
 8007a70:	f024 0403 	bic.w	r4, r4, #3
 8007a74:	42a0      	cmp	r0, r4
 8007a76:	d005      	beq.n	8007a84 <_malloc_r+0xa8>
 8007a78:	1a21      	subs	r1, r4, r0
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f808 	bl	8007a90 <_sbrk_r>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d0cf      	beq.n	8007a24 <_malloc_r+0x48>
 8007a84:	6025      	str	r5, [r4, #0]
 8007a86:	e7db      	b.n	8007a40 <_malloc_r+0x64>
 8007a88:	200001fc 	.word	0x200001fc
 8007a8c:	20000200 	.word	0x20000200

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4c06      	ldr	r4, [pc, #24]	; (8007aac <_sbrk_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4605      	mov	r5, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	f7fa fab6 	bl	800200c <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000af0 	.word	0x20000af0

08007ab0 <__malloc_lock>:
 8007ab0:	4770      	bx	lr

08007ab2 <__malloc_unlock>:
 8007ab2:	4770      	bx	lr

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
